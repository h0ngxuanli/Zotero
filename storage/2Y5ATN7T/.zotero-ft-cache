Git教程

Git教程 By 廖雪峰

史上最浅显易懂的Git教程！
为什么要编写这个教程？因为我在学习Git的过程中，买过书，也在⺴⽹网上Google了⼀一堆Git 相关的⽂文章和教程，但令⼈人失望的是，这些教程不是难 得令⼈人发指，就是简单得⼀一笔带 过，或者，只⽀支离破碎地介绍Git的某⼏几个命令，还有直接从Git⼿手册粘贴帮助⽂文档的，总 之，初学者很难找到⼀一个由浅⼊入深， 学完后能⽴立刻上⼿手的Git教程。
既然号称史上最浅显易懂的Git教程，那这个教程有什么让你怦然⼼心动的特点呢？
⾸首先，本教程绝对⾯面向初学者，没有接触过版本控制概念的读者也可以轻松⼊入⻔门，不必担⼼心 起步难度；
其次，本教程实⽤用性超强，边学边练，⼀一点也不觉得枯燥。⽽而且，你所学的Git命令是“充 分且必要”的，掌握了这些东⻄西，你就可以通过Git轻松地完成你的⼯工作。
⽂文字+图⽚片还看不明⽩白？有视频！！！
本教程只会让你成为Git⽤用户，不会让你成为Git专家。很多Git命令只有那些专家才明⽩白 （事实上我也不明⽩白，因为我不是Git专家），但我保证 这些命令可能你⼀一辈⼦子都不会⽤用 到。既然Git是⼀一个⼯工具，就没必要把时间浪费在那些“⾼高级”但⼏几乎永远不会⽤用到的命令 上。⼀一旦你真的⾮非⽤用不可了，到时候再 ⾃自⾏行Google或者请教专家也未迟。
如果你是⼀一个开发⼈人员，想⽤用上这个世界上⺫⽬目前最先进的分布式版本控制系统，那么，赶快 开始学习吧！
关于作者
廖雪峰，⼗十年软件开发经验，业余产品经理，精通Java/Python/Ruby/Visual Basic/ Objective C等，对开源框架有深⼊入研究，著有《Spring 2.0核⼼心技术与最佳实践》⼀一书， 多个业余开源项⺫⽬目托管在GitHub，欢迎微博交流：@廖雪峰。
整理、排版：numbbbbb

Git简介!
Git的诞⽣生! 集中式vs分布式!
安装Git!
在Linux上安装Git! 在Mac OS X上安装Git! 在Windows上安装Git!
创建版本库!
把⽂文件添加到版本库! ⼩小结!
时光机穿梭!
⼩小结! 版本回退! ⼩小结! ⼯工作区和暂存区! ⼩小结! 管理修改! ⼩小结! 撤销修改! ⼩小结! 删除⽂文件!
远程仓库!
⼩小结! 添加远程库! ⼩小结! 从远程库克隆! ⼩小结!

Git教程 By 廖雪峰

5
7 8
10
11 12 13
14
14 16
17
18 19 22 24 27 28 29 30 32 33
35
37 38 40 41 42
整理、排版：numbbbbb

分⽀支管理!
创建与合并分⽀支! ⼩小结! 解决冲突! ⼩小结! 分⽀支管理策略! 分⽀支策略! ⼩小结! Bug分⽀支! ⼩小结! Feature分⽀支! ⼩小结! 多⼈人协作! ⼩小结!
标签管理!
创建标签! ⼩小结! 操作标签! ⼩小结!
使⽤用GitHub!
⼩小结!
⾃自定义Git!
忽略特殊⽂文件! ⼩小结! 配置别名! ⼩小结! 搭建Git服务器!

Git教程 By 廖雪峰

43
44 47 49 51 53 54 54 55 57 58 59 60 63
64
65 67 68 68
69
69
70
71 72 73 74 75
整理、排版：numbbbbb

Git教程 By 廖雪峰

期末总结!

77

整理、排版：numbbbbb

Git简介

Git教程 By 廖雪峰

Git是什么？
Git是⺫⽬目前世界上最先进的分布式版本控制系统（没有之⼀一）。
Git有什么特点？简单来说就是：⾼高端⼤大⽓气上档次！
那什么是版本控制系统？
如果你⽤用Microsoft Word写过⻓长篇⼤大论，那你⼀一定有这样的经历：
想删除⼀一个段落，⼜又怕将来想恢复找不回来怎么办？有办法，先把当前⽂文件“另存 为……”⼀一个新的Word⽂文件，再接着改，改到⼀一定程度，再“另存为……”⼀一个新⽂文件， 这样⼀一直改下去，最后你的Word⽂文档变成了这样：

过了⼀一周，你想找回被删除的⽂文字，但是已经记不清删除前保存在哪个⽂文件⾥里了，只好⼀一个 ⼀一个⽂文件去找，真⿇麻烦。
看着⼀一堆乱七⼋八糟的⽂文件，想保留最新的⼀一个，然后把其他的删掉，⼜又怕哪天会⽤用上，还不 敢删，真郁闷。
更要命的是，有些部分需要你的财务同事帮助填写，于是你把⽂文件Copy到U盘⾥里给她（也 可能通过Email发送⼀一份给她），然后，你继续修改 Word⽂文件。⼀一天后，同事再把Word⽂文 件传给你，此时，你必须想想，发给她之后到你收到她的⽂文件期间，你作了哪些改动，得把 你的改动和她的部分合并， 真困难。
于是你想，如果有⼀一个软件，不但能⾃自动帮我记录每次⽂文件的改动，还可以让同事协作编 辑，这样就不⽤用⾃自⼰己管理⼀一堆类似的⽂文件了，也不需要把⽂文件传来传去。如果想查看某次改 动，只需要在软件⾥里瞄⼀一眼就可以，岂不是很⽅方便？
这个软件⽤用起来就应该像这个样⼦子，能记录每次⽂文件的改动：
整理、排版：numbbbbb

版本 1 2 3 4

⽤用户 张三 张三 李四 张三

Git教程 By 廖雪峰
说明 删除了软件服务条款5 增加了License人数限制 财务部门调整了合同金额
延长了免费升级周期

⽇日期 7/12 10:38 7/12 18:09 7/13 9:51 7/14 15:17

这样，你就结束了⼿手动管理多个“版本”的史前时代，进⼊入到版本控制的20世纪。

整理、排版：numbbbbb

Git的诞⽣生

Git教程 By 廖雪峰

很多⼈人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为 最⼤大的服务器系统软件了。
Linus虽然创建了Linux，但Linux的壮⼤大是靠全世界热⼼心的志愿者参与的，这么多⼈人在世界各 地为Linux编写代码，那Linux的代码是如何管理的呢？
事实是，在2002年以前，世界各地的志愿者把源代码⽂文件通过diff的⽅方式发给Linus，然后由 Linus本⼈人通过⼿手⼯工⽅方式合并代码！
你也许会想，为什么Linus不把Linux代码放到版本控制系统⾥里呢？不是有CVS、SVN这些免 费的版本控制系统吗？因为Linus坚定地反对 CVS和SVN，这些集中式的版本控制系统不但 速度慢，⽽而且必须联⺴⽹网才能使⽤用。有⼀一些商⽤用的版本控制系统，虽然⽐比CVS、SVN好⽤用，但 那是付费的，和 Linux的开源精神不符。
不过，到了2002年，Linux系统已经发展了⼗十年了，代码库之⼤大让Linus很难继续通过⼿手⼯工⽅方 式管理了，社区的弟兄们也对这种⽅方式表达了强烈 不满，于是Linus选择了⼀一个商业的版本 控制系统BitKeeper，BitKeeper的东家BitMover公司出于⼈人道主义精神，授权Linux 社区免 费使⽤用这个版本控制系统。
安定团结的⼤大好局⾯面在2005年就被打破了，原因是Linux社区⽜牛⼈人聚集，不免沾染了⼀一些梁 ⼭山好汉的江湖习⽓气。开发Samba的Andrew试图 破解BitKeeper的协议（这么干的其实也 不只他⼀一个），被BitMover公司发现了（监控⼯工作做得不错！），于是BitMover公司怒 了，要收 回Linux社区的免费使⽤用权。
Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情 况是这样的：
Linus花了两周时间⾃自⼰己⽤用C写了⼀一个分布式版本控制系统，这就是Git！⼀一个月之内，Linux 系统的源码已经由Git管理了！⽜牛是怎么定义的呢？⼤大家可以体会⼀一下。
Git迅速成为最流⾏行的分布式版本控制系统，尤其是2008年，GitHub⺴⽹网站上线了，它为开源 项⺫⽬目免费提供Git存储，⽆无数开源项⺫⽬目开始迁移⾄至GitHub，包括jQuery，PHP，Ruby等 等。
历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费 ⽽而超级好⽤用的Git了。

整理、排版：numbbbbb

集中式vs分布式

Git教程 By 廖雪峰

Linus⼀一直痛恨的CVS及SVN都是集中式的版本控制系统，⽽而Git是分布式版本控制系统，集 中式和分布式版本控制系统有什么区别呢？
先说集中式版本控制系统，版本库是集中存放在中央服务器的，⽽而干活的时候，⽤用的都是⾃自 ⼰己的电脑，所以要先从中央服务器取得最新的版本，然后开始干 活，干完活了，再把⾃自⼰己 的活推送给中央服务器。中央服务器就好⽐比是⼀一个图书馆，你要改⼀一本书，必须先从图书馆 借出来，然后回到家⾃自⼰己改，改完了，再放回图书馆。

集中式版本控制系统最⼤大的⽑毛病就是必须联⺴⽹网才能⼯工作，如果在局域⺴⽹网内还好，带宽够⼤大， 速度够快，可如果在互联⺴⽹网上，遇到⺴⽹网速慢的话，可能提交⼀一个10M的⽂文件就需要5分钟， 这还不得把⼈人给憋死啊。
那分布式版本控制系统与集中式版本控制系统有何不同呢？⾸首先，分布式版本控制系统根本 没有“中央服务器”，每个⼈人的电脑上都是⼀一个完整的版本库，这 样，你⼯工作的时候，就 不需要联⺴⽹网了，因为版本库就在你⾃自⼰己的电脑上。既然每个⼈人电脑上都有⼀一个完整的版本 库，那多个⼈人如何协作呢？⽐比⽅方说你在⾃自⼰己电脑上改 了⽂文件A，你的同事也在他的电脑上改 了⽂文件A，这时，你们俩之间只需把各⾃自的修改推送给对⽅方，就可以互相看到对⽅方的修改 了。
和集中式版本控制系统相⽐比，分布式版本控制系统的安全性要⾼高很多，因为每个⼈人电脑⾥里都 有完整的版本库，某⼀一个⼈人的电脑坏掉了不要紧，随便从其他⼈人那⾥里复制⼀一个就可以了。⽽而 集中式版本控制系统的中央服务器要是出了问题，所有⼈人都没法干活了。
在实际使⽤用分布式版本控制系统的时候，其实很少在两⼈人之间的电脑上推送版本库的修改， 因为可能你们俩不在⼀一个局域⺴⽹网内，两台电脑互相访问不了，也可 能今天你的同事病了， 他的电脑压根没有开机。因此，分布式版本控制系统通常也有⼀一台充当“中央服务器”的电 脑，但这个服务器的作⽤用仅仅是⽤用来⽅方便“交换” ⼤大家的修改，没有它⼤大家也⼀一样干活， 只是交换修改不⽅方便⽽而已。
整理、排版：numbbbbb

Git教程 By 廖雪峰
当然，Git的优势不单是不必联⺴⽹网这么简单，后⾯面我们还会看到Git极其强⼤大的分⽀支管理，把 SVN等远远抛在了后⾯面。 CVS作为最早的开源⽽而且免费的集中式版本控制系统，直到现在还有不少⼈人在⽤用。由于CVS ⾃自⾝身设计的问题，会造成提交⽂文件不完整，版本库莫名其妙损坏的情况。同样是开源⽽而且免 费的SVN修正了CVS的⼀一些稳定性问题，是⺫⽬目前⽤用得最多的集中式版本库控制系统。 除了免费的外，还有收费的集中式版本控制系统，⽐比如IBM的ClearCase（以前是Rational 公司的，被IBM收购了），特点是安装⽐比 Windows还⼤大，运⾏行⽐比蜗⽜牛还慢，能⽤用 ClearCase的⼀一般是世界500强，他们有个共同的特点是财⼤大⽓气粗，或者⼈人傻钱多。 微软⾃自⼰己也有⼀一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反⼈人类的设 计，连微软⾃自⼰己都不好意思⽤用了。 分布式版本控制系统除了Git以及促使Git诞⽣生的BitKeeper外，还有类似Git的Mercurial和 Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流⾏行的依然是Git！
整理、排版：numbbbbb

安装Git

Git教程 By 廖雪峰

最早Git是在Linux上开发的，很⻓长⼀一段时间内，Git也只能在Linux和Unix系统上跑。不过， 慢慢地有⼈人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这 ⼏几⼤大平台上正常运⾏行了。
要使⽤用Git，第⼀一步当然是安装Git了。根据你当前使⽤用的平台来阅读下⾯面的⽂文字：

整理、排版：numbbbbb

在Linux上安装Git

Git教程 By 廖雪峰

⾸首先，你可以试着输⼊入git，看看系统有没有安装Git：
$ git The program 'git' is currently not installed. You can install it by typing: $ sudo apt-get install git
像上⾯面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。
如果你碰巧⽤用Debian或Ubuntu Linux，通过⼀一条“sudo apt-get install git”就可以直接完 成Git的安装，⾮非常简单。
⽼老⼀一点的Debian或Ubuntu Linux，要把命令改为“sudo apt-get install git-core”，因为以前 有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫git-core了。由于Git名⽓气 实在太⼤大，后来就把GNU Interactive Tools改成gnuit，git-core正式改为git。
如果是其他Linux版本，可以直接通过源码安装。先从Git官⺴⽹网下载源码，然后解压，依次输 ⼊入：./config make sudo make install这⼏几个命令安装就好了。
，，

整理、排版：numbbbbb

在Mac OS X上安装Git

Git教程 By 廖雪峰

如果你正在使⽤用Mac做开发，有两种安装Git的⽅方法。
⼀一是安装homebrew，然后通过homebrew安装Git，具体⽅方法请参考homebrew的⽂文 档：http://brew.sh/。
第⼆二种⽅方法更简单，也是推荐的⽅方法，就是直接从AppStore安装Xcode，Xcode集成了 Git，不过默认没有安装，你需要运⾏行 Xcode，选择菜单“Xcode”->“Preferences”， 在弹出窗⼝口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可 以完成安装了。

Xcode是Apple官⽅方IDE，功能⾮非常强⼤大，是开发Mac和iOS App的必选装备，⽽而且是免费 的！
整理、排版：numbbbbb

在Windows上安装Git

Git教程 By 廖雪峰

实话实说，Windows是最烂的开发平台，如果不是开发Windows游戏或者在IE⾥里调试⻚页 ⾯面，⼀一般不推荐⽤用Windows。不过，既然已经上了微软的贼船，也是有办法安装Git的。
Windows下要使⽤用很多Linux/Unix的⼯工具时，需要Cygwin这样的模拟环境，Git也⼀一样。 Cygwin的安装和配置都⽐比较复杂， 就不建议你折腾了。不过，有⾼高⼈人已经把模拟环境和 Git都打包好了，名叫msysgit，只需要下载⼀一个单独的exe安装程序，其他什么也不⽤用装， 绝对好 ⽤用。
msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即 可。
安装完成后，在开始菜单⾥里找到“Git”->“Git Bash”，蹦出⼀一个类似命令⾏行窗⼝口的东 ⻄西，就说明Git安装成功！

安装完成后，还需要最后⼀一步设置，在命令⾏行输⼊入： $ git config --global user.name "Your Name" $ git config --global user.email "email@example.com" 因为Git是分布式版本控制系统，所以，每个机器都必须⾃自报家⻔门：你的名字和Email地址。 你也许会担⼼心，如果有⼈人故意冒充别⼈人怎么办？这个不必担⼼心，⾸首先我们相信⼤大家都是善良 ⽆无知的群众，其次，真的有冒充的也是有办法可查的。 注意git config命令的--global参数，⽤用了这个参数，表⽰示你这台机器上所有的Git仓库都会 使⽤用这个配置，当然也可以对某个仓库指定不同的⽤用户名和Email地址。
整理、排版：numbbbbb

创建版本库

Git教程 By 廖雪峰

什么是版本库呢？版本库⼜又名仓库，英⽂文名repository，你可以简单理解成⼀一个⺫⽬目录，这个 ⺫⽬目录⾥里⾯面的所有⽂文件都可以被Git管理起来，每个⽂文件的修改、删除，Git都能跟踪，以便任 何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
所以，创建⼀一个版本库⾮非常简单，⾸首先，选择⼀一个合适的地⽅方，创建⼀一个空⺫⽬目录：
$ mkdir learngit $ cd learngit $ pwd /Users/michael/learngit
pwd命令⽤用于显⽰示当前⺫⽬目录。在我的Mac上，这个仓库位于/Users/michael/learngit。
如果你使⽤用Windows系统，为了避免遇到各种莫名其妙的问题，请确保⺫⽬目录名（包括⽗父⺫⽬目 录）不包含中⽂文。
第⼆二步，通过git init命令把这个⺫⽬目录变成Git可以管理的仓库：
$ git init Initialized empty Git repository in /Users/michael/learngit/.git/
瞬间Git就把仓库建好了，⽽而且告诉你是⼀一个空的仓库（empty Git repository），细⼼心的 读者可以发现当前⺫⽬目录下多了⼀一个.git的⺫⽬目录，这个⺫⽬目录是Git来跟踪管理版本库的，没事千 万不要⼿手动修改这个⺫⽬目录⾥里⾯面 的⽂文件，不然改乱了，就把Git仓库给破坏了。
也不⼀一定必须在空⺫⽬目录下创建Git仓库，选择⼀一个已经有东⻄西的⺫⽬目录也是可以的。不过，不 建议你使⽤用⾃自⼰己正在开发的公司项⺫⽬目来学习Git，否则造成的⼀一切后果概不负责。
把⽂文件添加到版本库 ⾸首先这⾥里再明确⼀一下，所有的版本控制系统，其实只能跟踪⽂文本⽂文件的改动，⽐比如TXT⽂文 件，⺴⽹网⻚页，所有的程序代码等等，Git也不例外。版本控制系统 可以告诉你每次的改动，⽐比 如在第5⾏行加了⼀一个单词“Linux”，在第8⾏行删了⼀一个单词“Windows”。⽽而图⽚片、视频这 些⼆二进制⽂文件，虽然也能由版本 控制系统管理，但没法跟踪⽂文件的变化，只能把⼆二进制⽂文 件每次改动串起来，也就是只知道图⽚片从100KB改成了120KB，但到底改了啥，版本控制系 统不知 道，也没法知道。
不幸的是，Microsoft的Word格式是⼆二进制格式，因此，版本控制系统是没法跟踪Word⽂文 件的改动的，前⾯面我们举的例⼦子只是为了演⽰示，如果要真正使⽤用版本控制系统，就要以纯⽂文 本⽅方式编写⽂文件。
因为⽂文本是有编码的，⽐比如中⽂文有常⽤用的GBK编码，⽇日⽂文有Shift_JIS编码，如果没有历史遗 留问题，强烈建议使⽤用标准的UTF-8编码，所有语⾔言使⽤用同⼀一种编码，既没有冲突，⼜又被所 有平台所⽀支持。
使用Windows的童鞋要特别注意：
千万不要使⽤用Windows⾃自带的记事本编辑任何⽂文本⽂文件。原因是Microsoft开发记事本的团 队使⽤用了⼀一 个⾮非常弱智的⾏行为来保存UTF-8编码的⽂文件，他们⾃自作聪明地在每个⽂文件开头添 加了0xefbbbf（⼗十六进制）的字符，你会遇到很多不可思议的问题，⽐比 如，⺴⽹网⻚页第⼀一⾏行可 能会显⽰示⼀一个“?”，明明正确的程序⼀一编译就报语法错误，等等，都是由记事本的弱智⾏行 为带来的。建议你下载Notepad++代替记事本，不但功能强⼤大，⽽而且免费！记得把 Notepad++的默认编码设置为UTF-8 without BOM即可：

整理、排版：numbbbbb

Git教程 By 廖雪峰
⾔言归正传，现在我们编写⼀一个readme.txt⽂文件，内容如下： Git is a version control system. Git is free software. ⼀一定要放到learngit⺫⽬目录下（⼦子⺫⽬目录也⾏行），因为这是⼀一个Git仓库，放到其他地⽅方Git再厉 害也找不到这个⽂文件。 和把⼤大象放到冰箱需要3步相⽐比，把⼀一个⽂文件放到Git仓库只需要两步。 第⼀一步，⽤用命令git add告诉Git，把⽂文件添加到仓库： $ git add readme.txt 执⾏行上⾯面的命令，没有任何显⽰示，这就对了，Unix的哲学是“没有消息就是好消息”，说明 添加成功。 第⼆二步，⽤用命令git commit告诉Git，把⽂文件提交到仓库： $ git commit -m "wrote a readme file" [master (root-commit) cb926e7] wrote a readme file
1 file changed, 2 insertions(+) create mode 100644 readme.txt 简单解释⼀一下git commit命令，-m后⾯面输⼊入的是本次提交的说明，可以输⼊入任意内容，当然 最好是有意义的，这样你就能从历史记录⾥里⽅方便地找到改动记录。 嫌⿇麻烦不想输⼊入-m "xxx"⾏行不⾏行？确实有办法可以这么干，但是强烈不建议你这么干，因为 输⼊入说明对⾃自⼰己对别⼈人阅读都很重要。实在不想输⼊入说明的童鞋请⾃自⾏行Google，我不告诉 你这个参数。 git commit命令执⾏行成功后会告诉你，1个⽂文件被改动（我们新添加的readme.txt⽂文件）， 插⼊入了两⾏行内容（readme.txt有两⾏行内容）。
整理、排版：numbbbbb

Git教程 By 廖雪峰
为什么Git添加⽂文件需要add，commit⼀一共两步呢？因为commit可以⼀一次提交很多⽂文件， 所以你可以多次add不同的⽂文件，⽐比如： $ git add file1.txt $ git add file2.txt $ git add file3.txt $ git commit -m "add 3 files." ⼩小结 现在总结⼀一下今天学的两点内容： 初始化⼀一个Git仓库，使⽤用git init命令。 添加⽂文件到Git仓库，分两步：
• 第⼀一步，使⽤用命令git add ，注意，可反复多次使⽤用，添加多个⽂文件； • 第⼆二步，使⽤用命令git commit，完成。
整理、排版：numbbbbb

时光机穿梭

Git教程 By 廖雪峰

我们已经成功地添加并提交了⼀一个readme.txt⽂文件，现在，是时候继续⼯工作了，于是，我 们继续修改readme.txt⽂文件，改成如下内容：

Git is a distributed version control system. Git is free software.

现在，运⾏行git status命令看看结果：

$ git status # On branch master # Changes not staged for commit: # (use "git add <file>..." to update what will be committed) # (use "git checkout -- <file>..." to discard changes in working directory) # # modified: readme.txt # no changes added to commit (use "git add" and/or "git commit -a")

git status命令可以让我们时刻掌握仓库当前的状态，上⾯面的命令告诉我们，readme.txt被 修改过了，但还没有准备提交的修改。
虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，⾃自然是很好 的。⽐比如你休假两周从国外回来，第⼀一天上班时，已经记不清上次怎么修改的 readme.txt，所以，需要⽤用git diff这个命令看看：

$ git diff readme.txt diff --git a/readme.txt b/readme.txt index 46d49bf..9247db6 100644 --- a/readme.txt +++ b/readme.txt @@ -1,2 +1,2 @@ -Git is a version control system. +Git is a distributed version control system.
Git is free software.

git diff顾名思义就是查看difference，显⽰示的格式正是Unix通⽤用的diff格式，可以从上⾯面的 命令输出看到，我们在第⼀一⾏行添加了⼀一个“distributed”单词。
知道了对readme.txt作了什么修改后，再把它提交到仓库就放⼼心多了，提交修改和提交新 ⽂文件是⼀一样的两步，第⼀一步是git add：

$ git add readme.txt

同样没有任何输出。在执⾏行第⼆二步git commit之前，我们再运⾏行git status看看当前仓库的状 态：

$ git status # On branch master

整理、排版：numbbbbb

Git教程 By 廖雪峰

# Changes to be committed:

# (use "git reset HEAD <file>..." to unstage)

#

#

modified: readme.txt

#

git status告诉我们，将要被提交的修改包括readme.txt，下⼀一步，就可以放⼼心地提交了：

$ git commit -m "add distributed" [master ea34578] add distributed
1 file changed, 1 insertion(+), 1 deletion(-)

提交后，我们再⽤用git status命令看看仓库的当前状态：

$ git status # On branch master nothing to commit (working directory clean)
Git告诉我们当前没有需要提交的修改，⽽而且，⼯工作⺫⽬目录是干净（working directory clean）的。
⼩小结

• 要随时掌握⼯工作区的状态，使⽤用git status命令。

• 如果git status告诉你有⽂文件被修改过，⽤用git diff可以查看修改内容。

整理、排版：numbbbbb

版本回退

Git教程 By 廖雪峰

现在，你已经学会了修改⽂文件，然后把修改提交到Git版本库，现在，再练习⼀一次，修改 readme.txt⽂文件如下：
Git is a distributed version control system. Git is free software distributed under the GPL.
然后尝试提交：
$ git add readme.txt $ git commit -m "append GPL" [master 3628164] append GPL 1 file changed, 1 insertion(+), 1 deletion(-)
像这样，你不断对⽂文件进⾏行修改，然后不断提交修改到版本库⾥里，就好⽐比玩RPG游戏时，每 通过⼀一关就会⾃自动把游戏状态存 盘，如果某⼀一关没过去，你还可以选择读取前⼀一关的状 态。有些时候，在打Boss之前，你会⼿手动存盘，以便万⼀一打Boss失败了，可以从最近的地⽅方 重新开 始。Git也是⼀一样，每当你觉得⽂文件修改到⼀一定程度的时候，就可以“保存⼀一个快 照”，这个快照在Git中被称为commit。⼀一旦你把⽂文件改乱了，或者误 删了⽂文件，还可以 从最近的⼀一个commit恢复，然后继续⼯工作，⽽而不是把⼏几个月的⼯工作成果全部丢失。
现在，我们回顾⼀一下readme.txt⽂文件⼀一共有⼏几个版本被提交到Git仓库⾥里了：
版本1：wrote a readme file
Git is a version control system. Git is free software.
版本2：add distributed
Git is a distributed version control system. Git is free software.
版本3：append GPL
Git is a distributed version control system. Git is free software distributed under the GPL.
当然了，在实际⼯工作中，我们脑⼦子⾥里怎么可能记得⼀一个⼏几千⾏行的⽂文件每次都改了什么内容， 不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git 中，我们⽤用git log命令查看：
$ git log commit 3628164fb26d48395383f8f31179f24e0882e1e0 Author: Michael Liao <askxuefeng@gmail.com> Date: Tue Aug 20 15:11:49 2013 +0800
append GPL
commit ea34578d5496d7dd233c827ed32a8cd576c5ee85 Author: Michael Liao <askxuefeng@gmail.com> Date: Tue Aug 20 14:53:12 2013 +0800
整理、排版：numbbbbb

add distributed

Git教程 By 廖雪峰

commit cb926e7ea50ad11b8f9e909c05226233bf755030 Author: Michael Liao <askxuefeng@gmail.com> Date: Mon Aug 19 17:51:55 2013 +0800

wrote a readme file

git log命令显⽰示从最近到最远的提交⽇日志，我们可以看到3次提交，最近的⼀一次 是“append GPL”，上⼀一次是“add distributed”，最早的⼀一次是“wrote a readme file”。 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上
--pretty=oneline参数：

$ git log --pretty=oneline 3628164fb26d48395383f8f31179f24e0882e1e0 append GPL ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file
需要友情提⽰示的是，你看到的⼀一⼤大串类似“ 3628164...882e1e0”的是commit id（版本 号），和SVN不⼀一样，Git的commit id不是1，2，3……递增的数字，⽽而是⼀一个SHA1计算 出来的⼀一个⾮非常⼤大的数字，⽤用⼗十六进制表⽰示，⽽而且你看到的commit id和我的肯定不⼀一样， 以你⾃自⼰己的为准。为什么commit id需要⽤用这么⼀一⼤大串数字表⽰示呢？因为Git是分布式的版 本控制系统，后⾯面我们还要研究多⼈人在同⼀一个版本库⾥里⼯工作，如果⼤大家都⽤用1，2，3……作 为版本 号，那肯定就冲突了。
每提交⼀一个新版本，实际上Git就会把它们⾃自动串成⼀一条时间线。如果使⽤用可视化⼯工具查看 Git历史，就可以更清楚地看到提交历史的时间线：

好了，现在我们启动时光穿梭机，准备把readme.txt回退到上⼀一个版本，也就是“add distributed”的那个版本，怎么做呢？
⾸首先，Git必须知道当前版本是哪个版本，在Git中，⽤用HEAD表⽰示当前版本，也就是最新的 提交“ 3628164...882e1e0”（注意我的提交ID和你的肯定不⼀一样），上⼀一个版本就是 HEAD^，上上⼀一个版本就是HEAD^^，当然往上100 个版本写100个^⽐比较容易数不过来， 所以写成HEAD~100。
现在，我们要把当前版本“append GPL”回退到上⼀一个版本“add distributed”，就可 以使⽤用git reset命令：

$ git reset --hard HEAD^

整理、排版：numbbbbb

Git教程 By 廖雪峰
HEAD is now at ea34578 add distributed
--hard参数有啥意义？这个后⾯面再讲，现在你先放⼼心使⽤用。
看看readme.txt的内容是不是版本“add distributed”：
$ cat readme.txt Git is a distributed version control system. Git is free software.
果然。
还可以继续回退到上⼀一个版本“wrote a readme file”，不过且慢，然我们⽤用git log再看 看现在版本库的状态：
$ git log commit ea34578d5496d7dd233c827ed32a8cd576c5ee85 Author: Michael Liao <askxuefeng@gmail.com> Date: Tue Aug 20 14:53:12 2013 +0800
add distributed
commit cb926e7ea50ad11b8f9e909c05226233bf755030 Author: Michael Liao <askxuefeng@gmail.com> Date: Mon Aug 19 17:51:55 2013 +0800
wrote a readme file
最新的那个版本“append GPL”已经看不到了！好⽐比你从21世纪坐时光穿梭机来到了19 世纪，想再回去已经回不去了，肿么办？ 办法其实还是有的，只要上⾯面的命令⾏行窗⼝口还没有被关掉，你就可以顺着往上找啊找啊，找 到那个“append GPL”的commit id是“3628164...”，于是就可以指定回到未来的某个 版本：
$ git reset --hard 3628164 HEAD is now at 3628164 append GPL
版本号没必要写全，前⼏几位就可以了，Git会⾃自动去找。当然也不能只写前⼀一两位，因为Git 可能会找到多个版本号，就⽆无法确定是哪⼀一个了。 再⼩小⼼心翼翼地看看readme.txt的内容：
$ cat readme.txt Git is a distributed version control system. Git is free software distributed under the GPL.
果然，我胡汉⼭山⼜又回来了。 Git的版本回退速度⾮非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本 的时候，Git仅仅是把HEAD从指向“append GPL”：
整理、排版：numbbbbb

Git教程 By 廖雪峰
改为指向“add distributed”：
然后顺便把⼯工作区的⽂文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在 哪。 现在，你回退到了某个版本，关掉了电脑，第⼆二天早上就后悔了，想恢复到新版本怎么办？ 找不到新版本的commit id怎么办？ 在Git中，总是有后悔药可以吃的。当你⽤用$ git reset --hard HEAD^回退到“add distributed”版本时，再想恢复到“append GPL”，就必须找到“append GPL”的 commit id。Git提供了⼀一个命令git reflog⽤用来记录你的每⼀一次命令： $ git reflog ea34578 HEAD@{0}: reset: moving to HEAD^ 3628164 HEAD@{1}: commit: append GPL ea34578 HEAD@{2}: commit: add distributed cb926e7 HEAD@{3}: commit (initial): wrote a readme file 终于舒了⼝口⽓气，第⼆二⾏行显⽰示“append GPL”的commit id是3628164，现在，你⼜又可以乘 坐时光机回到未来了。 ⼩小结 现在总结⼀一下：
• HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使⽤用命 令git reset --hard commit_id。
整理、排版：numbbbbb

Git教程 By 廖雪峰
• 穿梭前，⽤用git log可以查看提交历史，以便确定要回退到哪个版本。 • 要重返未来，⽤用git reflog查看命令历史，以便确定要回到未来的哪个版本。
整理、排版：numbbbbb

⼯工作区和暂存区

Git教程 By 廖雪峰

Git和其他版本控制系统如SVN的⼀一个不同之处就是有暂存区的概念。
先来看名词解释。
⼯工作区（Working Directory）：就是你在电脑⾥里能看到的⺫⽬目录，⽐比如我的learngit⽂文件夹 就是⼀一个⼯工作区：

版本库（Repository）：⼯工作区有⼀一个隐藏⺫⽬目录“.git”，这个不算⼯工作区，⽽而是Git的版本 库。 Git的版本库⾥里存了很多东⻄西，其中最重要的就是称为stage（或者叫index）的暂存区，还 有Git为我们⾃自动创建的第⼀一个分⽀支master，以及指向master的⼀一个指针叫HEAD。
整理、排版：numbbbbb

Git教程 By 廖雪峰

分⽀支和HEAD的概念我们以后再讲。 前⾯面讲了我们把⽂文件往Git版本库⾥里添加的时候，是分两步执⾏行的：

第⼀一步是⽤用“git add”把⽂文件添加进去，实际上就是把⽂文件修改添加到暂存区；

第⼆二步是⽤用“git commit”提交更改，实际上就是把暂存区的所有内容提交到当前分⽀支。
因为我们创建Git版本库时，Git⾃自动为我们创建了唯⼀一⼀一个master分⽀支，所以，现在， commit就是往master分⽀支上提交更改。
你可以简单理解为，需要提交的⽂文件修改通通放到暂存区，然后，⼀一次性提交暂存区的所有 修改。
俗话说，实践出真知。现在，我们再练习⼀一遍，先对readme.txt做个修改，⽐比如加上⼀一⾏行 内容：

Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage.
然后，在⼯工作区新增⼀一个LICENSE⽂文本⽂文件（内容随便写）。

先⽤用git status查看⼀一下状态：

$ git status

# On branch master

# Changes not staged for commit:

# (use "git add <file>..." to update what will be committed)

# (use "git checkout -- <file>..." to discard changes in working

directory)

#

#

modified: readme.txt

#

# Untracked files:

# (use "git add <file>..." to include in what will be committed)

整理、排版：numbbbbb

Git教程 By 廖雪峰

#

#

LICENSE

no changes added to commit (use "git add" and/or "git commit -a")

Git⾮非常清楚地告诉我们，readme.txt被修改了，⽽而LICENSE还从来没有被添加过，所以它 的状态是Untracked。

现在，使⽤用两次命令git add，把readme.txt和LICENSE都添加后，⽤用git status再查看⼀一 下：

$ git status

# On branch master

# Changes to be committed:

# (use "git reset HEAD <file>..." to unstage)

#

#

new file: LICENSE

#

modified: readme.txt

#

现在，暂存区的状态就变成这样了：

所以，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执⾏行git commit就可以⼀一次性把暂存区的所有修改提交到分⽀支。
$ git commit -m "understand how stage works" [master 27c9860] understand how stage works
2 files changed, 675 insertions(+) create mode 100644 LICENSE
⼀一旦提交后，如果你⼜又没有对⼯工作区做任何修改，那么⼯工作区就是“干净”的：
$ git status # On branch master nothing to commit (working directory clean)
整理、排版：numbbbbb

Git教程 By 廖雪峰
现在版本库变成了这样，暂存区就没有任何内容了：
⼩小结 暂存区是Git⾮非常重要的概念，弄明⽩白了暂存区，就弄明⽩白了Git的很多操作到底干了什么。 没弄明⽩白暂存区是怎么回事的童鞋，请向上滚动⻚页⾯面，再看⼀一次。
整理、排版：numbbbbb

管理修改

Git教程 By 廖雪峰

现在，假定你已经完全掌握了暂存区的概念。下⾯面，我们要讨论的就是，为什么Git⽐比其他 版本控制系统设计得优秀，因为Git跟踪并管理的是修改，⽽而⾮非⽂文件。
你会问，什么是修改？⽐比如你新增了⼀一⾏行，这就是⼀一个修改，删除了⼀一⾏行，也是⼀一个修改， 更改了某些字符，也是⼀一个修改，删了⼀一些⼜又加了⼀一些，也是⼀一个修改，甚⾄至创建⼀一个新⽂文 件，也算⼀一个修改。
为什么说Git管理的是修改，⽽而不是⽂文件呢？我们还是做实验。第⼀一步，对readme.txt做⼀一 个修改，⽐比如加⼀一⾏行内容：

$ cat readme.txt Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes.

然后，添加：

$ git add readme.txt

$ git status

# On branch master

# Changes to be committed:

# (use "git reset HEAD <file>..." to unstage)

#

#

modified: readme.txt

#

然后，再修改readme.txt：

$ cat readme.txt Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files.

提交：

$ git commit -m "git tracks changes" [master d4f25b6] git tracks changes
1 file changed, 1 insertion(+)

提交后，再看看状态：

$ git status

# On branch master

# Changes not staged for commit:

# (use "git add <file>..." to update what will be committed)

# (use "git checkout -- <file>..." to discard changes in working

directory)

#

#

modified: readme.txt

整理、排版：numbbbbb

Git教程 By 廖雪峰
# no changes added to commit (use "git add" and/or "git commit -a") 咦，怎么第⼆二次的修改没有被提交？ 别激动，我们回顾⼀一下操作过程： 第⼀一次修改 -> git add -> 第⼆二次修改 -> git commit 你看，我们前⾯面讲了，Git管理的是修改，当你⽤用“git add”命令后，在⼯工作区的第⼀一次修 改被放⼊入暂存区，准备提交，但是，在⼯工作区的第⼆二次修改并没有放⼊入暂存区，所 以，“git commit”只负责把暂存区的修改提交了，也就是第⼀一次的修改被提交了，第⼆二次 的修改不会被提交。 提交后，⽤用“git diff HEAD -- readme.txt”命令可以查看⼯工作区和版本库⾥里⾯面最新版本的区 别： $ git diff HEAD -- readme.txt diff --git a/readme.txt b/readme.txt index 76d770f..a9c5755 100644 --- a/readme.txt +++ b/readme.txt @@ -1,4 +1,4 @@
Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. -Git tracks changes. +Git tracks changes of files. 可⻅见，第⼆二次修改确实没有被提交。 那怎么提交第⼆二次修改呢？你可以继续add再commit，也可以别着急提交第⼀一次修改，先 add第⼆二次修改，再commit，就相当于把两次修改合并后⼀一块提交了： 第⼀一次修改 -> add -> 第⼆二次修改 -> add -> commit 好，现在，把第⼆二次修改提交了，然后开始⼩小结。 ⼩小结 现在，你⼜又理解了Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加⼊入 到commit中。
整理、排版：numbbbbb

撤销修改

Git教程 By 廖雪峰

⾃自然，你是不会犯错的。不过现在是凌晨两点，你正在赶⼀一份⼯工作报告，你在readme.txt 中添加了⼀一⾏行：

$ cat readme.txt Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. My stupid boss still prefers SVN.
在你准备提交前，⼀一杯咖啡起了作⽤用，你猛然发现了“stupid boss”可能会让你丢掉这个 月的奖⾦金！
既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后⼀一⾏行，⼿手动把⽂文件恢复到 上⼀一个版本的状态。如果⽤用git status查看⼀一下：

$ git status

# On branch master

# Changes not staged for commit:

# (use "git add <file>..." to update what will be committed)

# (use "git checkout -- <file>..." to discard changes in working

directory)

#

#

modified: readme.txt

#

no changes added to commit (use "git add" and/or "git commit -a")

你可以发现，Git会告诉你，git checkout -- file可以丢弃⼯工作区的修改：

$ git checkout -- readme.txt

命令git checkout -- readme.txt意思就是，把readme.txt⽂文件在⼯工作区的修改全部撤销，这 ⾥里有两种情况：
⼀一种是readme.txt⾃自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库⼀一模⼀一 样的状态；
⼀一种是readme.txt已经添加到暂存区后，⼜又作了修改，现在，撤销修改就回到添加到暂存 区后的状态。

总之，就是让这个⽂文件回到最近⼀一次git commit或git add时的状态。 现在，看看readme.txt的⽂文件内容：

$ cat readme.txt Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files.
⽂文件内容果然复原了。

整理、排版：numbbbbb

Git教程 By 廖雪峰
git checkout -- file命令中的“--”很重要，没有“--”，就变成了“创建⼀一个新分⽀支”的命 令，我们在后⾯面的分⽀支管理中会再次遇到git checkout命令。

现在假定是凌晨3点，你不但写了⼀一些胡话，还git add到暂存区了：

$ cat readme.txt Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. My stupid boss still prefers SVN.

$ git add readme.txt

庆幸的是，在commit之前，你发现了这个问题。⽤用git status查看⼀一下，修改只是添加到了 暂存区，还没有提交：

$ git status

# On branch master

# Changes to be committed:

# (use "git reset HEAD <file>..." to unstage)

#

#

modified: readme.txt

#

Git同样告诉我们，⽤用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重 新放回⼯工作区：

$ git reset HEAD readme.txt

Unstaged changes after reset:

M

readme.txt

git reset命令既可以回退版本，也可以把暂存区的修改回退到⼯工作区。当我们⽤用HEAD时， 表⽰示最新的版本。
再⽤用git status查看⼀一下，现在暂存区是干净的，⼯工作区有修改：

$ git status

# On branch master

# Changes not staged for commit:

# (use "git add <file>..." to update what will be committed)

# (use "git checkout -- <file>..." to discard changes in working

directory)

#

#

modified: readme.txt

#

no changes added to commit (use "git add" and/or "git commit -a")

还记得如何丢弃⼯工作区的修改吗？

$ git checkout -- readme.txt

整理、排版：numbbbbb

Git教程 By 廖雪峰
$ git status # On branch master nothing to commit (working directory clean) 整个世界终于清静了！ 现在，假设你不但改错了东⻄西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退⼀一 节吗？可以回退到上⼀一个版本。不过，这是有条件的，就是你还没有把⾃自⼰己的本地版本库推 送到远程。还记得Git是分布式版本控制系统吗？我们后⾯面会讲到远程版本库，⼀一旦你 把“stupid boss”提交推送到远程版本库，你就真的惨了…… ⼩小结 ⼜又到了⼩小结时间。 场景1：当你改乱了⼯工作区某个⽂文件的内容，想直接丢弃⼯工作区的修改时，⽤用命令git checkout -- file。 场景2：当你不但改乱了⼯工作区某个⽂文件的内容，还添加到了暂存区时，想丢弃修改，分两 步，第⼀一步⽤用命令git reset HEAD file，就回到了场景1，第⼆二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退⼀一节，不 过前提是没有推送到远程库。
整理、排版：numbbbbb

删除⽂文件

Git教程 By 廖雪峰

在Git中，删除也是⼀一个修改操作，我们实战⼀一下，先添加⼀一个新⽂文件test.txt到Git并且提 交：

$ git add test.txt $ git commit -m "add test.txt" [master 94cdc44] add test.txt
1 file changed, 1 insertion(+) create mode 100644 test.txt

⼀一般情况下，你通常直接在⽂文件管理器中把没⽤用的⽂文件删了，或者⽤用rm命令删了：

$ rm test.txt

这个时候，Git知道你删除了⽂文件，因此，⼯工作区和版本库就不⼀一致了，git status命令会⽴立 刻告诉你哪些⽂文件被删除了：

$ git status

# On branch master

# Changes not staged for commit:

# (use "git add/rm <file>..." to update what will be committed)

# (use "git checkout -- <file>..." to discard changes in working

directory)

#

#

deleted: test.txt

#

no changes added to commit (use "git add" and/or "git commit -a")

现在你有两个选择，⼀一是确实要从版本库中删除该⽂文件，那就⽤用命令git rm删掉，并且 commit：

$ git rm test.txt rm 'test.txt' $ git commit -m "remove test.txt" [master d17efd8] remove test.txt
1 file changed, 1 deletion(-) delete mode 100644 test.txt
现在，⽂文件就从版本库中被删除了。
另⼀一种情况是删错了，因为版本库⾥里还有呢，所以可以很轻松地把误删的⽂文件恢复到最新版 本：

$ git checkout -- test.txt

git checkout其实是⽤用版本库⾥里的版本替换⼯工作区的版本，⽆无论⼯工作区是修改还是删除，都 可以“⼀一键还原”。

小结

整理、排版：numbbbbb

Git教程 By 廖雪峰
命令git rm⽤用于删除⼀一个⽂文件。如果⼀一个⽂文件已经被提交到版本库，那么你永远不⽤用担⼼心误 删，但是要⼩小⼼心，你只能恢复⽂文件到最新版本，你会丢失最近⼀一次提交后你修改的内容。
整理、排版：numbbbbb

远程仓库

Git教程 By 廖雪峰

到⺫⽬目前为⽌止，我们已经掌握了如何在Git仓库⾥里对⼀一个⽂文件进⾏行时光穿梭，你再也不⽤用担⼼心 ⽂文件备份或者丢失的问题了。
可是有⽤用过集中式版本控制系统SVN的童鞋会站出来说，这些功能在SVN⾥里早就有了，没看 出Git有什么特别的地⽅方。
没错，如果只是在⼀一个仓库⾥里管理⽂文件历史，Git和SVN真没啥区别。为了保证你现在所学 的Git物超所值，将来绝对不会后悔，同时为了打击已经不幸学了SVN的童鞋，本章开始介 绍Git的杀⼿手级功能之⼀一（注意是之⼀一，也就是后⾯面还有之⼆二，之三……）：远程仓库。
Git是分布式版本控制系统，同⼀一个Git仓库，可以分布到不同的机器上。怎么分布呢？最 早，肯定只有⼀一台机器有⼀一个原始版本库，此后，别的机器可以“克隆”这个原始版本库， ⽽而且每台机器的版本库其实都是⼀一样的，并没有主次之分。
你肯定会想，⾄至少需要两台机器才能玩远程库不是？但是我只有⼀一台电脑，怎么玩？
其实⼀一台电脑上也是可以克隆多个版本库的，只要不在同⼀一个⺫⽬目录下。不过，现实⽣生活中是 不会有⼈人这么傻的在⼀一台电脑上搞⼏几个远程库玩，因为⼀一台电脑上搞⼏几个远程库完全没有意 义，⽽而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在⼀一台电脑上怎么克隆多个仓 库。
实际情况往往是这样，找⼀一台电脑充当服务器的⾓角⾊色，每天24⼩小时开机，其他每个⼈人都从这 个“服务器”仓库克隆⼀一份到⾃自⼰己的电脑上，并且各⾃自把各⾃自的提交推送到服务器仓库⾥里， 也从服务器仓库中拉取别⼈人的提交。
完全可以⾃自⼰己搭建⼀一台运⾏行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是⼩小题 ⼤大作。好在这个世界上有个叫GitHub的神奇的⺴⽹网站，从名字就可以看出，这个⺴⽹网站就是提 供Git仓库托管服务的，所以，只要注册⼀一个GitHub账号，就可以免费获得Git远程仓库。
在继续阅读后续内容前，请⾃自⾏行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之 间的传输是通过SSH加密的，所以，需要⼀一点设置：
第1步：创建SSH Key。在⽤用户主⺫⽬目录下，看看有没有.ssh⺫⽬目录，如果有，再看看这个⺫⽬目录下 有没有id_rsa和id_rsa.pub这两个⽂文件，如果已经有了，可直接 跳到下⼀一步。如果没有，打 开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你⾃自⼰己的邮件地址，然后⼀一路回⻋车，使⽤用默认值即可，由于这个Key 也不是⽤用于军事⺫⽬目的，所以也⽆无需设置密码。
如果⼀一切顺利的话，可以在⽤用户主⺫⽬目录⾥里找到.ssh⺫⽬目录，⾥里⾯面有id_rsa和id_rsa.pub两个⽂文 件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可 以放⼼心地告诉任何⼈人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”⻚页⾯面：
然后，点“Add SSH Key”，填上任意Title，在Key⽂文本框⾥里粘贴id_rsa.pub⽂文件的内容：

整理、排版：numbbbbb

Git教程 By 廖雪峰
点“Add Key”，你就应该看到已经添加的Key：
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，⽽而 不是别⼈人冒充的，⽽而Git⽀支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只 有你⾃自⼰己才能推送。 当然，GitHub允许你添加多个Key。假定你有若干电脑，你⼀一会⼉儿在公司提交，⼀一会⼉儿在 家⾥里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送 了。 最后友情提⽰示，在GitHub上免费托管的Git仓库，任何⼈人都可以看到喔（但只有你⾃自⼰己才能 改）。所以，不要把敏感信息放进去。 如果你不想让别⼈人看到Git库，有两个办法，⼀一个是交点保护费，让GitHub把公开的仓库变 成私有的，这样别⼈人就看不⻅见了（不可读更不可写）。另 ⼀一个办法是⾃自⼰己动⼿手，搭⼀一个Git
整理、排版：numbbbbb

Git教程 By 廖雪峰
服务器，因为是你⾃自⼰己的Git服务器，所以别⼈人也是看不⻅见的。这个⽅方法我们后⾯面会讲到 的，相当简单，公司内部开发必备。 确保你拥有⼀一个GitHub账号后，我们就即将开始远程仓库的学习。 ⼩小结 “有了远程仓库，妈妈再也不⽤用担⼼心我的硬盘了。”——Git点读机
整理、排版：numbbbbb

添加远程库

Git教程 By 廖雪峰

现在的情景是，你已经在本地创建了⼀一个Git仓库后，⼜又想在GitHub创建⼀一个Git仓库，并 且让这两个仓库进⾏行远程同步，这样，GitHub上的仓库既可以作为备份，⼜又可以让其他⼈人 通过该仓库来协作，真是⼀一举多得。
⾸首先，登陆GitHub，然后，在右上⾓角找到“Create a new repo”按钮，创建⼀一个新的仓 库：

在Repository name填⼊入learngit，其他保持默认设置，点击“Create repository”按 钮，就成功地创建了⼀一个新的Git仓库：

整理、排版：numbbbbb

Git教程 By 廖雪峰

⺫⽬目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆 出新的仓库，也可以把⼀一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub仓库。
现在，我们根据GitHub的提⽰示，在本地的learngit仓库下运⾏行命令：

$ git remote add origin git@github.com:michaelliao/learngit.git

请千万注意，把上⾯面的michaelliao替换成你⾃自⼰己的GitHub账户名，否则，你在本地关联的 就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不 在我的账户列表中。
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个 名字⼀一看就知道是远程库。
下⼀一步，就可以把本地库的所有内容推送到远程库上：

$ git push -u origin master

Counting objects: 19, done.

Delta compression using up to 4 threads.

Compressing objects: 100% (19/19), done.

Writing objects: 100% (19/19), 13.73 KiB, done.

Total 23 (delta 6), reused 0 (delta 0)

To git@github.com:michaelliao/learngit.git

* [new branch]

master -> master

Branch master set up to track remote branch master from origin.

把本地库的内容推送到远程，⽤用git push命令，实际上是把当前分⽀支master推送到远程。

整理、排版：numbbbbb

Git教程 By 廖雪峰
由于远程库是空的，我们第⼀一次推送master分⽀支时，加上了-u参数，Git不但会把本地的 master分⽀支内容推送的远程新的master分⽀支，还会把本地的master分⽀支和远程的master 分⽀支关联起来，在以后的推送或者拉取时就可以简化命令。 推送成功后，可以⽴立刻在GitHub⻚页⾯面中看到远程库的内容已经和本地⼀一模⼀一样：
从现在起，只要本地作了提交，就可以通过命令： $ git push origin master 把本地master分⽀支的最新修改推送⾄至GitHub，现在，你就拥有了真正的分布式版本库！ ⼩小结 要关联⼀一个远程库，使⽤用命令git remote add origin git@server-name:path/repo-name.git； 关联后，使⽤用命令git push -u origin master第⼀一次推送master分⽀支的所有内容； 此后，每次本地提交后，只要有必要，就可以使⽤用命令git push origin master推送最新修 改； 分布式版本系统的最⼤大好处之⼀一是在本地⼯工作完全不需要考虑远程库的存在，也就是有没有 联⺴⽹网都可以正常⼯工作，⽽而SVN在没有联⺴⽹网的时候是拒绝干活的！当有⺴⽹网络的时候，再把本地 提交推送⼀一下就完成了同步，真是太⽅方便了！
整理、排版：numbbbbb

Git教程 By 廖雪峰
从远程库克隆 上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。 现在，假设我们从零开发，那么最好的⽅方式是先创建远程库，然后，从远程库克隆。 ⾸首先，登陆GitHub，创建⼀一个新的仓库，名字叫gitskills：
我们勾选Initialize this repository with a README，这样GitHub会⾃自动为我们创建⼀一个 README.md⽂文件。创建完毕后，可以看到README.md⽂文件：
整理、排版：numbbbbb

Git教程 By 廖雪峰
现在，远程库已经准备好了，下⼀一步是⽤用命令git clone克隆⼀一个本地库： $ git clone git@github.com:michaelliao/gitskills.git Cloning into 'gitskills'... remote: Counting objects: 3, done. remote: Total 3 (delta 0), reused 0 (delta 0) Receiving objects: 100% (3/3), done. $ cd gitskills $ ls README.md 注意把Git库的地址换成你⾃自⼰己的，然后进⼊入gitskills⺫⽬目录看看，已经有README.md⽂文件 了。 如果有多个⼈人协作开发，那么每个⼈人各⾃自从远程克隆⼀一份就可以了。 你也许还注意到，GitHub给出的地址不⽌止⼀一个，还可以⽤用https://github.com/ michaelliao/gitskills.git这样的地址。实际上，Git⽀支持多种协议，默认的git://使⽤用ssh，但 也可以使⽤用https等其他协议。 使⽤用https除了速度慢以外，还有个最⼤大的⿇麻烦是每次推送都必须输⼊入⼝口令，但是在某些只 开放http端⼝口的公司内部就⽆无法使⽤用ssh协议⽽而只能⽤用https。 ⼩小结 要克隆⼀一个仓库，⾸首先必须知道仓库的地址，然后使⽤用git clone命令克隆。 Git⽀支持多种协议，包括https，但通过ssh⽀支持的原⽣生git协议速度最快。
整理、排版：numbbbbb

分⽀支管理

Git教程 By 廖雪峰

分⽀支就是科幻电影⾥里⾯面的平⾏行宇宙，当你正在电脑前努⼒力学习Git的时候，另⼀一个你正在另 ⼀一个平⾏行宇宙⾥里努⼒力学习SVN。
如果两个平⾏行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平⾏行宇 宙合并了，结果，你既学会了Git⼜又学会了SVN！

分⽀支在实际中有什么⽤用呢？假设你准备开发⼀一个新功能，但是需要两周才能完成，第⼀一周你 写了50%的代码，如果⽴立刻提交，由于代码还没写完，不完整的代码库会导致别⼈人不能干活 了。如果等代码全部写完再⼀一次提交，⼜又存在丢失每天进度的巨⼤大⻛风险。
现在有了分⽀支，就不⽤用怕了。你创建了⼀一个属于你⾃自⼰己的分⽀支，别⼈人看不到，还继续在原来 的分⽀支上正常⼯工作，⽽而你在⾃自⼰己的分⽀支上干活，想提交就提交，直到开发完毕后，再⼀一次性 合并到原来的分⽀支上，这样，既安全，⼜又不影响别⼈人⼯工作。
其他版本控制系统如SVN等都有分⽀支管理，但是⽤用过之后你会发现，这些版本控制系统创建 和切换分⽀支⽐比蜗⽜牛还慢，简直让⼈人⽆无法忍受，结果分⽀支功能成了摆设，⼤大家都不去⽤用。
但Git的分⽀支是与众不同的，⽆无论创建、切换和删除分⽀支，Git在1秒钟之内就能完成！⽆无论 你的版本库是1个⽂文件还是1万个⽂文件。

整理、排版：numbbbbb

创建与合并分⽀支

Git教程 By 廖雪峰

在版本回退⾥里， 你已经知道，每次提交，Git都把它们串成⼀一条时间线，这条时间线就是⼀一 个分⽀支。截⽌止到⺫⽬目前，只有⼀一条时间线，在Git⾥里，这个分⽀支叫主分⽀支，即 master分⽀支。 HEAD严格来说不是指向提交，⽽而是指向master，master才是指向提交的，所以，HEAD指 向的就是当前分⽀支。
⼀一开始的时候，master分⽀支是⼀一条线，Git⽤用master指向最新的提交，再⽤用HEAD指向 master，就能确定当前分⽀支，以及当前分⽀支的提交点：

每次提交，master分⽀支都会向前移动⼀一步，这样，随着你不断提交，master分⽀支的线也越 来越⻓长。
当我们创建新的分⽀支，例如dev时，Git新建了⼀一个指针叫dev，指向master相同的提交， 再把HEAD指向dev，就表⽰示当前分⽀支在dev上：

你看，Git创建⼀一个分⽀支很快，因为除了增加⼀一个dev指针，改改HEAD的指向，⼯工作区的⽂文 件都没有任何变化！ 不过，从现在开始，对⼯工作区的修改和提交就是针对dev分⽀支了，⽐比如新提交⼀一次后，dev 指针往前移动⼀一步，⽽而master指针不变：
整理、排版：numbbbbb

Git教程 By 廖雪峰
假如我们在dev上的⼯工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单 的⽅方法，就是直接把master指向dev的当前提交，就完成了合并：
所以Git合并分⽀支也很快！就改改指针，⼯工作区内容也不变！ 合并完分⽀支后，甚⾄至可以删除dev分⽀支。删除dev分⽀支就是把dev指针给删掉，删掉后，我 们就剩下了⼀一条master分⽀支：
整理、排版：numbbbbb

Git教程 By 廖雪峰
真是太神奇了，你看得出来有些提交是通过分⽀支完成的吗？ 下⾯面开始实战。 ⾸首先，我们创建dev分⽀支，然后切换到dev分⽀支： $ git checkout -b dev Switched to a new branch 'dev' git checkout命令加上-b参数表⽰示创建并切换，相当于以下两条命令： $ git branch dev $ git checkout dev Switched to branch 'dev' 然后，⽤用git branch命令查看当前分⽀支： $ git branch * dev
master git branch命令会列出所有分⽀支，当前分⽀支前⾯面会标⼀一个*号。 然后，我们就可以在dev分⽀支上正常提交，⽐比如对readme.txt做个修改，加上⼀一⾏行： Creating a new branch is quick. 然后提交： $ git add readme.txt $ git commit -m "branch test" [dev fec145a] branch test
1 file changed, 1 insertion(+) 现在，dev分⽀支的⼯工作完成，我们就可以切换回master分⽀支： $ git checkout master Switched to branch 'master' 切换回master分⽀支后，再查看⼀一个readme.txt⽂文件，刚才添加的内容不⻅见了！因为那个提 交是在dev分⽀支上，⽽而master分⽀支此刻的提交点并没有变：
整理、排版：numbbbbb

Git教程 By 廖雪峰

现在，我们把dev分⽀支的⼯工作成果合并到master分⽀支上：

$ git merge dev Updating d17efd8..fec145a Fast-forward
readme.txt | 1 + 1 file changed, 1 insertion(+)

git merge命令⽤用于合并指定分⽀支到当前分⽀支。合并后，再查看readme.txt的内容，就可以 看到，和dev分⽀支的最新提交是完全⼀一样的。
注意到上⾯面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把 master指向dev的当前提交，所以合并速度⾮非常快。
当然，也不是每次合并都能Fast-forward，我们后⾯面会将其他⽅方式的合并。
合并完成后，就可以放⼼心地删除dev分⽀支了：

$ git branch -d dev Deleted branch dev (was fec145a).

删除后，查看branch，就只剩下master分⽀支了：

$ git branch * master

因为创建、合并和删除分⽀支⾮非常快，所以Git⿎鼓励你使⽤用分⽀支完成某个任务，合并后再删掉 分⽀支，这和直接在master分⽀支上⼯工作效果是⼀一样的，但过程更安全。

⼩小结

Git⿎鼓励⼤大量使⽤用分⽀支： 查看分⽀支：git branch 创建分⽀支：git branch name 切换分⽀支：git checkout name

整理、排版：numbbbbb

Git教程 By 廖雪峰
创建+切换分⽀支：git checkout -b name 合并某分⽀支到当前分⽀支：git merge name 删除分⽀支：git branch -d name
整理、排版：numbbbbb

解决冲突

Git教程 By 廖雪峰

⼈人⽣生不如意之事⼗十之⼋八九，合并分⽀支往往也不是⼀一帆⻛风顺的。 准备新的feature1分⽀支，继续我们的新分⽀支开发：
$ git checkout -b feature1 Switched to a new branch 'feature1'
修改readme.txt最后⼀一⾏行，改为：
Creating a new branch is quick AND simple.
在feature1分⽀支上提交：
$ git add readme.txt $ git commit -m "AND simple" [feature1 75a857c] AND simple
1 file changed, 1 insertion(+), 1 deletion(-)
切换到master分⽀支：
$ git checkout master Switched to branch 'master' Your branch is ahead of 'origin/master' by 1 commit.
Git还会⾃自动提⽰示我们当前master分⽀支⽐比远程的master分⽀支要超前1个提交。 在master分⽀支上把readme.txt⽂文件的最后⼀一⾏行改为：
Creating a new branch is quick & simple.
提交：
$ git add readme.txt $ git commit -m "& simple" [master 400b400] & simple
1 file changed, 1 insertion(+), 1 deletion(-)
现在，master分⽀支和feature1分⽀支各⾃自都分别有新的提交，变成了这样：

整理、排版：numbbbbb

Git教程 By 廖雪峰

这种情况下，Git⽆无法执⾏行“快速合并”，只能试图把各⾃自的修改合并起来，但这种合并就 可能会有冲突，我们试试看：

$ git merge feature1 Auto-merging readme.txt CONFLICT (content): Merge conflict in readme.txt Automatic merge failed; fix conflicts and then commit the result.

果然冲突了！Git告诉我们，readme.txt⽂文件存在冲突，必须⼿手动解决冲突后再提交。git status也可以告诉我们冲突的⽂文件：

$ git status

# On branch master

# Your branch is ahead of 'origin/master' by 2 commits.

#

# Unmerged paths:

# (use "git add/rm <file>..." as appropriate to mark resolution)

#

#

both modified:

readme.txt

#

no changes added to commit (use "git add" and/or "git commit -a")

我们可以直接查看readme.txt的内容：

Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. <<<<<<< HEAD Creating a new branch is quick & simple. ======= Creating a new branch is quick AND simple.

整理、排版：numbbbbb

>>>>>>> feature1

Git教程 By 廖雪峰

Git⽤用<<<<<<<，=======，>>>>>>>标记出不同分⽀支的内容，我们修改如下后保存：

Creating a new branch is quick and simple.

再提交：

$ git add readme.txt $ git commit -m "conflict fixed" [master 59bc1cb] conflict fixed

现在，master分⽀支和feature1分⽀支变成了下图所⽰示：

⽤用带参数的git log也可以看到分⽀支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit * 59bc1cb conflict fixed |\ | * 75a857c AND simple * | 400b400 & simple |/ * fec145a branch test ...
现在，删除feature1分⽀支：
$ git branch -d feature1 Deleted branch feature1 (was 75a857c).
⼯工作完成。
⼩小结
当Git⽆无法⾃自动合并分⽀支时，就必须⾸首先解决冲突。解决冲突后，再提交，合并完成。
整理、排版：numbbbbb

Git教程 By 廖雪峰
⽤用git log --graph命令可以看到分⽀支合并图。
整理、排版：numbbbbb

分⽀支管理策略

Git教程 By 廖雪峰

通常，合并分⽀支时，如果可能，Git会⽤用“Fast forward”模式，但这种模式下，删除分⽀支 后，会丢掉分⽀支信息。
如果要强制禁⽤用“Fast forward”模式，Git就会在merge时⽣生成⼀一个新的commit，这 样，从分⽀支历史上就可以看出分⽀支信息。
下⾯面我们实战⼀一下--no-ff⽅方式的merge：
⾸首先，仍然创建并切换dev分⽀支：
$ git checkout -b dev Switched to a new branch 'dev'
修改readme.txt⽂文件，并提交⼀一个新的commit：
$ git add readme.txt $ git commit -m "add merge" [dev 6224937] add merge
1 file changed, 1 insertion(+)
现在，我们切换回master：
$ git checkout master Switched to branch 'master'
准备合并dev分⽀支，请注意--no-ff参数，表⽰示禁⽤用“Fast forward”：
$ git merge --no-ff -m "merge with no-ff" dev Merge made by the 'recursive' strategy.
readme.txt | 1 + 1 file changed, 1 insertion(+)
因为本次合并要创建⼀一个新的commit，所以加上-m参数，把commit描述写进去。
合并后，我们⽤用git log看看分⽀支历史：
$ git log --graph --pretty=oneline --abbrev-commit * 7825a50 merge with no-ff |\ | * 6224937 add merge |/ * 59bc1cb conflict fixed ...
可以看到，不使⽤用“Fast forward”模式，merge后就像这样：

整理、排版：numbbbbb

Git教程 By 廖雪峰
分⽀支策略 在实际开发中，我们应该按照⼏几个基本原则进⾏行分⽀支管理： ⾸首先，master分⽀支应该是⾮非常稳定的，也就是仅⽤用来发布新版本，平时不能在上⾯面干活； 那在哪干活呢？干活都在dev分⽀支上，也就是说，dev分⽀支是不稳定的，到某个时候，⽐比如 1.0版本发布时，再把dev分⽀支合并到master上，在master分⽀支发布1.0版本； 你和你的⼩小伙伴们每个⼈人都在dev分⽀支上干活，每个⼈人都有⾃自⼰己的分⽀支，时不时地往dev分 ⽀支上合并就可以了。 所以，团队合作的分⽀支看起来就像这样：
⼩小结 Git分⽀支⼗十分强⼤大，在团队开发中应该充分应⽤用。 合并分⽀支时，加上--no-ff参数就可以⽤用普通模式合并，合并后的历史有分⽀支，能看出来曾经 做过合并，⽽而fast forward合并就看不出来曾经做过合并。
整理、排版：numbbbbb

Bug分⽀支

Git教程 By 廖雪峰

软件开发中，bug就像家常便饭⼀一样。有了bug就需要修复，在Git中，由于分⽀支是如此的 强⼤大，所以，每个bug都可以通过⼀一个新的临时分⽀支来修复，修复后，合并分⽀支，然后将临 时分⽀支删除。
当你接到⼀一个修复⼀一个代号101的bug的任务时，很⾃自然地，你想创建⼀一个分⽀支issue -101来 修复它，但是，等等，当前正在dev上进⾏行的⼯工作还没有提交：

$ git status

# On branch dev

# Changes to be committed:

# (use "git reset HEAD <file>..." to unstage)

#

#

new file: hello.py

#

# Changes not staged for commit:

# (use "git add <file>..." to update what will be committed)

# (use "git checkout -- <file>..." to discard changes in working

directory)

#

#

modified: readme.txt

#

并不是你不想提交，⽽而是⼯工作只进⾏行到⼀一半，还没法提交，预计完成还需1天时间。但是， 必须在两个⼩小时内修复该bug，怎么办？
幸好，Git还提供了⼀一个stash功能，可以把当前⼯工作现场“储藏”起来，等以后恢复现场后 继续⼯工作：

$ git stash Saved working directory and index state WIP on dev: 6224937 add merge HEAD is now at 6224937 add merge

现在，⽤用git status查看⼯工作区，就是干净的（除⾮非有没有被Git管理的⽂文件），因此可以放 ⼼心地创建分⽀支来修复bug。
⾸首先确定要在哪个分⽀支上修复bug，假定需要在master分⽀支上修复，就从master创建临时 分⽀支：

$ git checkout master Switched to branch 'master' Your branch is ahead of 'origin/master' by 6 commits. $ git checkout -b issue-101 Switched to a new branch 'issue-101'

现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后 提交：

$ git add readme.txt $ git commit -m "fix bug 101" [issue-101 cc17032] fix bug 101

整理、排版：numbbbbb

Git教程 By 廖雪峰
1 file changed, 1 insertion(+), 1 deletion(-) 修复完成后，切换到master分⽀支，并完成合并，最后删除issue-101分⽀支：

$ git checkout master Switched to branch 'master' Your branch is ahead of 'origin/master' by 2 commits. $ git merge --no-ff -m "merged bug fix 101" issue-101 Merge made by the 'recursive' strategy.
readme.txt | 2 +1 file changed, 1 insertion(+), 1 deletion(-) $ git branch -d issue-101 Deleted branch issue-101 (was cc17032).
太棒了，原计划两个⼩小时的bug修复只花了5分钟！现在，是时候接着回到dev分⽀支干活 了！

$ git checkout dev Switched to branch 'dev' $ git status # On branch dev nothing to commit (working directory clean)
⼯工作区是干净的，刚才的⼯工作现场存到哪去了？⽤用git stash list命令看看：

$ git stash list stash@{0}: WIP on dev: 6224937 add merge
⼯工作现场还在，Git把stash内容存在某个地⽅方了，但是需要恢复⼀一下，有两个办法：

⼀一是⽤用git stash apply恢复，但是恢复后，stash内容并不删除，你需要⽤用git stash drop来删 除；

另⼀一种⽅方式是⽤用git stash pop，恢复的同时把stash内容也删了：

$ git stash pop

# On branch dev

# Changes to be committed:

# (use "git reset HEAD <file>..." to unstage)

#

#

new file: hello.py

#

# Changes not staged for commit:

# (use "git add <file>..." to update what will be committed)

# (use "git checkout -- <file>..." to discard changes in working

directory)

#

#

modified: readme.txt

#

Dropped refs/stash@{0} (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40)

再⽤用git stash list查看，就看不到任何stash内容了：

整理、排版：numbbbbb

$ git stash list

Git教程 By 廖雪峰

你可以多次stash，恢复的时候，先⽤用git stash list查看，然后恢复指定的stash，⽤用命令：

$ git stash apply stash@{0}

⼩小结

修复bug时，我们会通过创建新的bug分⽀支进⾏行修复，然后合并，最后删除；

当⼿手头⼯工作没有完成时，先把⼯工作现场git stash⼀一下，然后去修复bug，修复后，再git stash pop，回到⼯工作现场。

整理、排版：numbbbbb

Feature分⽀支

Git教程 By 廖雪峰

软件开发中，总有⽆无穷⽆无尽的新的功能要不断添加进来。
添加⼀一个新功能时，你肯定不希望因为⼀一些实验性质的代码，把主分⽀支搞乱了，所以，每添 加⼀一个新功能，最好新建⼀一个feature分⽀支，在上⾯面开发，完成后，合并，最后，删除该 feature分⽀支。
现在，你终于接到了⼀一个新任务：开发代号为Vulcan的新功能，该功能计划⽤用于下⼀一代星 际⻜飞船。
于是准备开发：

$ git checkout -b feature-vulcan Switched to a new branch 'feature-vulcan'

5分钟后，开发完毕：

$ git status

# On branch feature-vulcan

# Changes to be committed:

# (use "git reset HEAD <file>..." to unstage)

#

#

new file: vulcan.py

#

$ git add vulcan.py

$ git commit -m "add feature vulcan"

[feature-vulcan 756d4af] add feature vulcan

1 file changed, 2 insertions(+)

create mode 100644 vulcan.py

切回dev，准备合并：

$ git checkout dev

⼀一切顺利的话，feature分⽀支和bug分⽀支是类似的，合并，然后删除。 但是， 就在此时，接到上级命令，因经费不⾜足，新功能必须取消！ 虽然⽩白干了，但是这个分⽀支还是必须就地销毁：

$ git branch -d feature-vulcan error: The branch 'feature-vulcan' is not fully merged. If you are sure you want to delete it, run 'git branch -D featurevulcan'.

销毁失败。Git友情提醒，feature-vulcan分⽀支还没有被合并，如果删除，将丢失掉修改， 如果要强⾏行删除，需要使⽤用命令git branch -D feature-vulcan。

现在我们强⾏行删除：

$ git branch -D feature-vulcan

整理、排版：numbbbbb

Git教程 By 廖雪峰
Deleted branch feature-vulcan (was 756d4af). 终于删除成功！ ⼩小结 开发⼀一个新feature，最好新建⼀一个分⽀支； 如果要丢弃⼀一个没有被合并过的分⽀支，可以通过git branch -D name强⾏行删除。
整理、排版：numbbbbb

多⼈人协作

Git教程 By 廖雪峰

当你从远程仓库克隆时，实际上Git⾃自动把本地的master分⽀支和远程的master分⽀支对应起来 了，并且，远程仓库的默认名称是origin。
要查看远程库的信息，⽤用git remote：
$ git remote origin
或者，⽤用git remote -v显⽰示更详细的信息：
$ git remote -v origin git@github.com:michaelliao/learngit.git (fetch) origin git@github.com:michaelliao/learngit.git (push)
上⾯面显⽰示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。
推送分支
推送分⽀支，就是把该分⽀支上的所有本地提交推送到远程库。推送时，要指定本地分⽀支，这 样，Git就会把该分⽀支推送到远程库对应的远程分⽀支上：
$ git push origin master
如果要推送其他分⽀支，⽐比如dev，就改成：
$ git push origin dev
但是，并不是⼀一定要把本地分⽀支往远程推送，那么，哪些分⽀支需要推送，哪些不需要呢？ • master分⽀支是主分⽀支，因此要时刻与远程同步； • dev分⽀支是开发分⽀支，团队所有成员都需要在上⾯面⼯工作，所以也需要与远程同步； • bug分⽀支只⽤用于在本地修复bug，就没必要推到远程了，除⾮非⽼老板要看看你每周到底 修复了⼏几个bug； • feature分⽀支是否推到远程，取决于你是否和你的⼩小伙伴合作在上⾯面开发。
总之，就是在Git中，分⽀支完全可以在本地⾃自⼰己藏着玩，是否推送，视你的⼼心情⽽而定！
抓取分支
多⼈人协作时，⼤大家都会往master和dev分⽀支上推送各⾃自的修改。 现在，模拟⼀一个你的⼩小伙伴，可以在另⼀一台电脑（注意要把SSH Key添加到GitHub）或者同 ⼀一台电脑的另⼀一个⺫⽬目录下克隆：
$ git clone git@github.com:michaelliao/learngit.git Cloning into 'learngit'... remote: Counting objects: 46, done. remote: Compressing objects: 100% (26/26), done. remote: Total 46 (delta 16), reused 45 (delta 15)
整理、排版：numbbbbb

Git教程 By 廖雪峰
Receiving objects: 100% (46/46), 15.69 KiB | 6 KiB/s, done. Resolving deltas: 100% (16/16), done.
当你的⼩小伙伴从远程库clone时，默认情况下，你的⼩小伙伴只能看到本地的master分⽀支。不 信可以⽤用git branch命令看看：

$ git branch * master
现在，你的⼩小伙伴要在dev分⽀支上开发，就必须创建远程origin的dev分⽀支到本地，于是他 ⽤用这个命令创建本地dev分⽀支：

$ git checkout -b dev origin/dev 现在，他就可以在dev上继续修改，然后，时不时地把dev分⽀支push到远程：

$ git commit -m "add /usr/bin/env" [dev 291bea8] add /usr/bin/env
1 file changed, 1 insertion(+) $ git push origin dev Counting objects: 5, done. Delta compression using up to 4 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 349 bytes, done. Total 3 (delta 0), reused 0 (delta 0) To git@github.com:michaelliao/learngit.git
fc38031..291bea8 dev -> dev
你的⼩小伙伴已经向origin/dev分⽀支推送了他的提交，⽽而碰巧你也对同样的⽂文件作了修改，并 试图推送：

$ git add hello.py

$ git commit -m "add coding: utf-8"

[dev bd6ae48] add coding: utf-8

1 file changed, 1 insertion(+)

$ git push origin dev

To git@github.com:michaelliao/learngit.git

! [rejected]

dev -> dev (non-fast-forward)

error: failed to push some refs to 'git@github.com:michaelliao/

learngit.git'

hint: Updates were rejected because the tip of your current branch

is behind

hint: its remote counterpart. Merge the remote changes (e.g. 'git

pull')

hint: before pushing again.

hint: See the 'Note about fast-forwards' in 'git push --help' for

details.

推送失败，因为你的⼩小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单， Git已经提⽰示我们，先⽤用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解 决冲突，再推送：

$ git pull

整理、排版：numbbbbb

Git教程 By 廖雪峰

remote: Counting objects: 5, done.

remote: Compressing objects: 100% (2/2), done.

remote: Total 3 (delta 0), reused 3 (delta 0)

Unpacking objects: 100% (3/3), done.

From github.com:michaelliao/learngit

fc38031..291bea8 dev

-> origin/dev

There is no tracking information for the current branch.

Please specify which branch you want to merge with.

See git-pull(1) for details

git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

git branch --set-upstream dev origin/<branch>

git pull也失败了，原因是没有指定本地dev分⽀支与远程origin/dev分⽀支的链接，根据提⽰示， 设置dev和origin/dev的链接：

$ git branch --set-upstream dev origin/dev Branch dev set up to track remote branch dev from origin.
再pull：

$ git pull Auto-merging hello.py CONFLICT (content): Merge conflict in hello.py Automatic merge failed; fix conflicts and then commit the result.

这回git pull成功，但是合并有冲突，需要⼿手动解决，解决的⽅方法和分⽀支管理中的解决冲突完 全⼀一样。解决后，提交，再push：

$ git commit -m "merge & fix hello.py" [dev adca45d] merge & fix hello.py $ git push origin dev Counting objects: 10, done. Delta compression using up to 4 threads. Compressing objects: 100% (5/5), done. Writing objects: 100% (6/6), 747 bytes, done. Total 6 (delta 0), reused 0 (delta 0) To git@github.com:michaelliao/learngit.git
291bea8..adca45d dev -> dev
因此，多⼈人协作的⼯工作模式通常是这样：
1. ⾸首先，可以试图⽤用git push origin branch-name推送⾃自⼰己的修改；

2. 如果推送失败，则因为远程分⽀支⽐比你的本地更新，需要先⽤用git pull试图合并； 3. 如果合并有冲突，则解决冲突，并在本地提交；
4. 没有冲突或者解决掉冲突后，再⽤用git push origin branch-name推送就能成功！
整理、排版：numbbbbb

Git教程 By 廖雪峰
如果git pull提⽰示“no tracking information”，则说明本地分⽀支和远程分⽀支的链接关系没 有创建，⽤用命令git branch --set-upstream branch-name origin/branch-name。 这就是多⼈人协作的⼯工作模式，⼀一旦熟悉了，就⾮非常简单。 ⼩小结
• 查看远程库信息，使⽤用git remote -v； • 本地新建的分⽀支如果不推送到远程，对其他⼈人就是不可⻅见的； • 从本地推送分⽀支，使⽤用git push origin branch-name，如果推送失败，先⽤用git pull抓
取远程的新提交； • 在本地创建和远程分⽀支对应的分⽀支，使⽤用git checkout -b branch-name origin/branch-
name，本地和远程分⽀支的名称最好⼀一致； • 建⽴立本地分⽀支和远程分⽀支的关联，使⽤用git branch --set-upstream branch-name
origin/branch-name； • 从远程抓取分⽀支，使⽤用git pull，如果有冲突，要先处理冲突。
整理、排版：numbbbbb

标签管理

Git教程 By 廖雪峰

发布⼀一个版本时，我们通常先在版本库中打⼀一个标签，这样，就唯⼀一确定了打标签时刻的版 本。将来⽆无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。 所以，标签也是版本库的⼀一个快照。
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分⽀支很像对不 对？但是分⽀支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。

整理、排版：numbbbbb

创建标签

Git教程 By 廖雪峰

在Git中打标签⾮非常简单，⾸首先，切换到需要打标签的分⽀支上：

$ git branch * dev
master $ git checkout master Switched to branch 'master'

然后，敲命令git tag name就可以打⼀一个新标签：

$ git tag v1.0

可以⽤用命令git tag查看所有标签：

$ git tag v1.0
默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，⽐比如，现在已经是周 五了，但应该在周⼀一打的标签没有打，怎么办？
⽅方法是找到历史提交的commit id，然后打上就可以了：

$ git log --pretty=oneline --abbrev-commit 6a5819e merged bug fix 101 cc17032 fix bug 101 7825a50 merge with no-ff 6224937 add merge 59bc1cb conflict fixed 400b400 & simple 75a857c AND simple fec145a branch test d17efd8 remove test.txt ...
⽐比⽅方说要对“add merge”这次提交打标签，它对应的commit id是“6224937”，敲⼊入 命令：

$ git tag v0.9 6224937 再⽤用命令git tag查看标签：

$ git tag v0.9 v1.0

注意，标签不是按时间顺序列出，⽽而是按字⺟母排序的。可以⽤用git show tagname查看标签信 息：

$ git show v0.9 commit 622493706ab447b6bb37e4e2a2f276a20fed2ab4 Author: Michael Liao <askxuefeng@gmail.com>

整理、排版：numbbbbb

Date:

Git教程 By 廖雪峰
Thu Aug 22 11:22:08 2013 +0800

add merge ...
可以看到，“v0.9”确实打在“add merge”这次提交上。 还可以创建带有说明的标签，⽤用-a指定标签名，-m指定说明⽂文字：

$ git tag -a v0.1 -m "version 0.1 released" 3628164

⽤用命令git show tagname可以看到说明⽂文字：

$ git show v0.1 tag v0.1 Tagger: Michael Liao <askxuefeng@gmail.com> Date: Mon Aug 26 07:28:11 2013 +0800

version 0.1 released

commit 3628164fb26d48395383f8f31179f24e0882e1e0 Author: Michael Liao <askxuefeng@gmail.com> Date: Tue Aug 20 15:11:49 2013 +0800

append GPL ...
还可以通过-s⽤用私钥签名⼀一个标签：

$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
签名采⽤用PGP签名，因此，必须⾸首先安装gpg（GnuPG），如果没有找到gpg，或者没有 gpg密钥对，就会报错：

gpg: signing failed: secret key not available error: gpg failed to sign the data error: unable to sign the tag
如果报错，请参考GnuPG帮助⽂文档配置Key。
⽤用命令git show tagname可以看到PGP签名信息：

$ git show v0.2 tag v0.2 Tagger: Michael Liao <askxuefeng@gmail.com> Date: Mon Aug 26 07:28:33 2013 +0800

signed version 0.2 released -----BEGIN PGP SIGNATURE----Version: GnuPG v1.4.12 (Darwin)

iQEcBAABAgAGBQJSGpMhAAoJEPUxHyDAhBpT4QQIAKeHfR3bo... -----END PGP SIGNATURE-----
整理、排版：numbbbbb

Git教程 By 廖雪峰
commit fec145accd63cdc9ed95a2f557ea0658a2a6537f Author: Michael Liao <askxuefeng@gmail.com> Date: Thu Aug 22 10:37:30 2013 +0800
branch test ... ⽤用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的⽅方法⽐比较复杂，这⾥里 就不介绍了。 ⼩小结
• 命令git tag name⽤用于新建⼀一个标签，默认为HEAD，也可以指定⼀一个commit id； • -a tagname -m "blablabla..."可以指定标签信息； • -s tagname -m "blablabla..."可以⽤用PGP签名标签； • 命令git tag可以查看所有标签；
整理、排版：numbbbbb

操作标签

Git教程 By 廖雪峰

如果标签打错了，也可以删除：

$ git tag -d v0.1 Deleted tag 'v0.1' (was e078af9)

因为创建的标签都只存储在本地，不会⾃自动推送到远程。所以，打错的标签可以在本地安全 删除。

如果要推送某个标签到远程，使⽤用命令git push origin tagname：

$ git push origin v1.0

Total 0 (delta 0), reused 0 (delta 0)

To git@github.com:michaelliao/learngit.git

* [new tag]

v1.0 -> v1.0

或者，⼀一次性推送全部尚未推送到远程的本地标签：

$ git push origin --tags

Counting objects: 1, done.

Writing objects: 100% (1/1), 554 bytes, done.

Total 1 (delta 0), reused 0 (delta 0)

To git@github.com:michaelliao/learngit.git

* [new tag]

v0.2 -> v0.2

* [new tag]

v0.9 -> v0.9

如果标签已经推送到远程，要删除远程标签就⿇麻烦⼀一点，先从本地删除：

$ git tag -d v0.9 Deleted tag 'v0.9' (was 6224937)

然后，从远程删除。删除命令也是push，但是格式如下：

$ git push origin :refs/tags/v0.9

To git@github.com:michaelliao/learngit.git

- [deleted]

v0.9

要看看是否真的从远程库删除了标签，可以登陆GitHub查看。

⼩小结

• 命令git push origin tagname可以推送⼀一个本地标签；

• 命令git push origin --tags可以推送全部未推送过的本地标签；

• 命令git tag -d tagname可以删除⼀一个本地标签；

• 命令git push origin :refs/tags/tagname可以删除⼀一个远程标签。

整理、排版：numbbbbb

使⽤用GitHub

Git教程 By 廖雪峰

我们⼀一直⽤用GitHub作为免费的远程仓库，如果是个⼈人的开源项⺫⽬目，放到GitHub上是完全没 有问题的。其实GitHub还是⼀一个开源协作社区，通过GitHub，既可以让别⼈人参与你的开源 项⺫⽬目，也可以参与别⼈人的开源项⺫⽬目。
在GitHub出现以前，开源项⺫⽬目开源容易，但让⼲⼴广⼤大⼈人民群众参与进来⽐比较困难，因为要参 与，就要提交代码，⽽而给每个想提交代码的群众都开⼀一个账号那是不现实的，因此，群众也 仅限于报个bug，即使能改掉bug，也只能把diff⽂文件⽤用邮件发过去，很不⽅方便。
但是在GitHub上，利⽤用Git极其强⼤大的克隆和分⽀支功能，⼈人们群众真正可以第⼀一次⾃自由参与 各种开源项⺫⽬目了。
如何参与⼀一个开源项⺫⽬目呢？⽐比如⼈人⽓气极⾼高的bootstrap项⺫⽬目，这是⼀一个⾮非常强⼤大的CSS框 架，你可以访问它的项⺫⽬目主⻚页https://github.com/twbs/bootstrap，点“Fork”就在⾃自⼰己 的账号下克隆了⼀一个bootstrap仓库，然后，从⾃自⼰己的账号下clone：
git clone git@github.com:michaelliao/bootstrap.git ⼀一定要从⾃自⼰己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库 地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。
Bootstrap的官⽅方仓库twbs/bootstrap、你在GitHub上克隆的仓库my/bootstrap，以及你 ⾃自⼰己克隆到本地电脑的仓库，他们的关系就像下图显⽰示的那样：

如果你想修复bootstrap的⼀一个bug，或者新增⼀一个功能，⽴立刻就可以开始干活，干完后， 往⾃自⼰己的仓库推送。
如果你希望bootstrap的官⽅方库能接受你的修改，你就可以在GitHub上发起⼀一个pull request。当然，对⽅方是否接受你的pull request就不⼀一定了。
如果你没能⼒力修改bootstrap，但⼜又想要试⼀一把pull request，那就Fork⼀一下我的仓库： https://github.com/michaelliao/learngit，创建⼀一个your-github-id.txt的⽂文本⽂文件，写 点⾃自⼰己学习Git的⼼心得，然后推送⼀一个pull request给我，我会视⼼心情⽽而定是否接受。
⼩小结
• 在GitHub上，可以任意Fork开源仓库；
• ⾃自⼰己拥有Fork后的仓库的读写权限；
• 可以推送pull request给官⽅方仓库来贡献代码。
整理、排版：numbbbbb

⾃自定义Git

Git教程 By 廖雪峰

在安装Git⼀一节中，我们已经配置了user.name和user.email，实际上，Git还有很多可配置 项。 ⽐比如，让Git显⽰示颜⾊色，会让命令输出看起来更醒⺫⽬目：
$ git config --global color.ui true
这样，Git会适当地显⽰示不同的颜⾊色，⽐比如git status命令：

⽂文件名就会标上颜⾊色。 我们在后⾯面还会介绍如何更好地配置Git，以便让你的⼯工作更⾼高效。
整理、排版：numbbbbb

忽略特殊⽂文件

Git教程 By 廖雪峰

有些时候，你必须把某些⽂文件放到Git⼯工作⺫⽬目录中，但⼜又不能提交它们，⽐比如保存了数据库 密码的配置⽂文件啦，等等，每次git status都会显⽰示“Untracked files ...”，有强迫症的童 鞋⼼心⾥里肯定不爽。
好在Git考虑到了⼤大家的感受，这个问题解决起来也很简单，在Git⼯工作区的根⺫⽬目录下创建⼀一 个特殊的.gitignore⽂文件，然后把要忽略的⽂文件名填进去，Git就会⾃自动忽略这些⽂文件。
不需要从头写.gitignore⽂文件，GitHub已经为我们准备了各种配置⽂文件，只需要组合⼀一下就 可以使⽤用了。所有配置⽂文件可以直接在线浏览：https://github.com/github/gitignore
忽略⽂文件的原则是：
1. 忽略操作系统⾃自动⽣生成的⽂文件，⽐比如缩略图等； 2. 忽略编译⽣生成的中间⽂文件、可执⾏行⽂文件等，也就是如果⼀一个⽂文件是通过另⼀一个⽂文件⾃自
动⽣生成的，那⾃自动⽣生成的⽂文件就没必要放进版本库，⽐比如Java编译产⽣生的.class⽂文 件； 3. 忽略你⾃自⼰己的带有敏感信息的配置⽂文件，⽐比如存放⼝口令的配置⽂文件。 举个例⼦子：
假设你在Windows下进⾏行Python开发，Windows会⾃自动在有图⽚片的⺫⽬目录下⽣生成隐藏的缩略 图⽂文件，如果有⾃自定义⺫⽬目录，⺫⽬目录下就会有Desktop.ini⽂文件，因此你需要忽略Windows⾃自 动⽣生成的垃圾⽂文件：
# Windows: Thumbs.db ehthumbs.db Desktop.ini
然后，继续忽略Python编译产⽣生的.pyc、.pyo、dist等⽂文件或⺫⽬目录：
# Python: *.py[cod] *.so *.egg *.egg-info dist build
加上你⾃自⼰己定义的⽂文件，最终得到⼀一个完整的.gitignore⽂文件，内容如下：
# Windows: Thumbs.db ehthumbs.db Desktop.ini
# Python: *.py[cod] *.so *.egg *.egg-info dist build
整理、排版：numbbbbb

Git教程 By 廖雪峰
# My configurations: db.ini deploy_key_rsa 最后⼀一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status 命令是不是说“working directory clean”。 使⽤用Windows的童鞋注意了，如果你在资源管理器⾥里新建⼀一个.gitignore⽂文件，它会⾮非常弱 智地提⽰示你必须输⼊入⽂文件名，但是在⽂文本编辑器⾥里“保存”或者“另存为”就可以把⽂文件保 存为.gitignore了。 ⼩小结
1. 忽略某些⽂文件时，需要编写.gitignore。 2. .gitignore⽂文件本⾝身要放到版本库⾥里，并且可以对.gitignore做版本管理！
整理、排版：numbbbbb

配置别名

Git教程 By 廖雪峰

有没有经常敲错命令？⽐比如git status？status这个单词真⼼心不好记。 如果敲git st就表⽰示git status那就简单多了，当然这种偷懒的办法我们是极⼒力赞成的。 我们只需要敲⼀一⾏行命令，告诉Git，以后st就表⽰示status：
$ git config --global alias.st status
好了，现在敲git st看看效果。 当然还有别的命令可以简写，很多⼈人都⽤用co表⽰示checkout，ci表⽰示commit，br表⽰示 branch：
$ git config --global alias.co checkout $ git config --global alias.ci commit $ git config --global alias.br branch 以后提交就可以简写成：
$ git ci -m "bala bala bala..."
--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有⽤用。
在撤销修改⼀一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉 （unstage），重新放回⼯工作区。既然是⼀一个unstage操作，就可以配置⼀一个unstage别 名：
$ git config --global alias.unstage 'reset HEAD' 当你敲⼊入命令：
$ git unstage test.py 实际上Git执⾏行的是：
$ git reset HEAD test.py
配置⼀一个git last，让其显⽰示最后⼀一次提交信息：
$ git config --global alias.last 'log -1'
这样，⽤用git last就能显⽰示最近⼀一次的提交：
$ git last commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2 Merge: bd6ae48 291bea8 Author: Michael Liao <askxuefeng@gmail.com> Date: Thu Aug 22 22:49:22 2013 +0800
merge & fix hello.py
整理、排版：numbbbbb

Git教程 By 廖雪峰
甚⾄至还有⼈人丧⼼心病狂地把lg配置成了： $ git config --global alias.lg "log --color --graph -pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit" 来看看git lg的效果：
为什么不早点告诉我？别激动，咱不是为了多记⼏几个英⽂文单词嘛！ ⼩小结 给Git配置好别名，就可以输⼊入命令时偷个懒。我们⿎鼓励偷懒。
整理、排版：numbbbbb

搭建Git服务器

Git教程 By 廖雪峰

在远程仓库⼀一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24⼩小时开 机并交换⼤大家的修改。 GitHub就是⼀一个免费托管开源代码的远程仓库。但是对于某些视源代码如⽣生命的商业公司 来说，既不想公开源代码，⼜又舍不得给GitHub交保护费，那就只能⾃自⼰己搭建⼀一台Git服务器 作为私有仓库使⽤用。 搭建Git服务器需要准备⼀一台运⾏行Linux的机器，强烈推荐⽤用Ubuntu或Debian，这样，通过 ⼏几条简单的apt命令就可以完成安装。 假设你已经有sudo权限的⽤用户账号，下⾯面，正式开始安装。 第⼀一步，安装git：
$ sudo apt-get install git
第⼆二步，创建⼀一个git⽤用户，⽤用来运⾏行git服务：
$ sudo adduser git
第三步，创建证书登录： 收集所有需要登录的⽤用户的公钥，就是他们⾃自⼰己的id_rsa.pub⽂文件，把所有公钥导⼊入到/ home/git/.ssh/authorized_keys⽂文件⾥里，⼀一⾏行⼀一个。 第四步，初始化Git仓库： 先选定⼀一个⺫⽬目录作为Git仓库，假定是/srv/sample.git，在/srv⺫⽬目录下输⼊入命令：
$ sudo git init --bare sample.git
Git就会创建⼀一个裸仓库，裸仓库没有⼯工作区，因为服务器上的Git仓库纯粹是为了共享，所 以不让⽤用户直接登录到服务器上去改⼯工作区，并且服务器上的Git仓库通常都以.git结尾。然 后，把owner改为git：
$ sudo chown -R git:git sample.git
第五步，禁⽤用shell登录： 出于安全考虑，第⼆二步创建的git⽤用户不允许登录shell，这可以通过编辑/etc/passwd⽂文件 完成。找到类似下⾯面的⼀一⾏行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git⽤用户可以正常通过ssh使⽤用git，但⽆无法登录shell，因为我们为git⽤用户指定的gitshell每次⼀一登录就⾃自动退出。 第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各⾃自的电脑上运⾏行：
整理、排版：numbbbbb

Git教程 By 廖雪峰
$ git clone git@server:/srv/sample.git Cloning into 'sample'... warning: You appear to have cloned an empty repository. 剩下的推送就简单了。
管理公钥
如果团队很⼩小，把每个⼈人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys ⽂文件⾥里就是可⾏行的。如果团队有⼏几百号⼈人，就没法这么玩了，这时，可以⽤用Gitosis来管理公 钥。 这⾥里我们不介绍怎么玩Gitosis了，⼏几百号⼈人的团队基本都在500强了，相信找个⾼高⽔水平的 Linux管理员问题不⼤大。
管理权限
有很多不但视源代码如⽣生命，⽽而且视员⼯工为窃贼的公司，会在版本控制系统⾥里设置⼀一套完善 的权限控制，每个⼈人是否有读写权限会精确到每个分⽀支甚⾄至每个⺫⽬目 录下。因为Git是为Linux 源代码托管⽽而开发的，所以Git也继承了开源社区的精神，不⽀支持权限控制。不过，因为Git ⽀支持钩⼦子（hook），所以， 可以在服务器端编写⼀一系列脚本来控制提交等操作，达到权限 控制的⺫⽬目的。Gitolite就是这个⼯工具。 这⾥里我们也不介绍Gitolite了，不要把有限的⽣生命浪费到权限⽃斗争中。
⼩小结
搭建Git服务器⾮非常简单，通常10分钟即可完成； 要⽅方便管理公钥，⽤用Gitosis； 要像SVN那样变态地控制权限，⽤用Gitolite。
整理、排版：numbbbbb

期末总结

Git教程 By 廖雪峰

终于到了期末总结的时刻了！
经过⼏几天的学习，相信你对Git已经初步掌握。⼀一开始，可能觉得Git上⼿手⽐比较困难，尤其是 已经熟悉SVN的童鞋，没关系，多操练⼏几次，就会越⽤用越顺⼿手。
Git虽然极其强⼤大，命令繁多，但常⽤用的就那么⼗十来个，掌握好这⼗十⼏几个常⽤用命令，你已经 可以得⼼心应⼿手地使⽤用Git了。
友情附赠国外⺴⽹网友制作的Git Cheat Sheet，建议打印出来备⽤用：
Git Cheat Sheet
现在告诉你Git的官⽅方⺴⽹网站：http://git-scm.com，英⽂文⾃自我感觉不错的童鞋，可以经常去 官⺴⽹网看看。什么，打不开⺴⽹网站？相信我，我给出的绝对是官⺴⽹网地址，⽽而且，Git官⺴⽹网决没有 那么容易宕机，可能是你的⼈人品问题，赶紧⾯面壁思过，好好想想原因。
如果你学了Git后，⼯工作效率⼤大增，有更多的空闲时间健⾝身看电影，那我的教学⺫⽬目标就达到 了。
谢谢观看！

整理、排版：numbbbbb

