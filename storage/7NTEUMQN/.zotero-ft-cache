Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence (AAAI-16)

Return of Frustratingly Easy Domain Adaptation

Baochen Sun
Department of Computer Science University of Massachusetts Lowell
Lowell, MA 01854, USA bsun@cs.uml.edu

Jiashi Feng
Department of EECS, UC Berkeley, USA & Department of ECE, National
University of Singapore, Singapore elefjia@nus.edu.sg

Kate Saenko
Department of Computer Science University of Massachusetts Lowell
Lowell, MA 01854, USA saenko@cs.uml.edu

Abstract
Unlike human learning, machine learning often fails to handle changes between training (source) and test (target) input distributions. Such domain shifts, common in practical scenarios, severely damage the performance of conventional machine learning methods. Supervised domain adaptation methods have been proposed for the case when the target data have labels, including some that perform very well despite being ‚Äúfrustratingly easy‚Äù to implement. However, in practice, the target domain is often unlabeled, requiring unsupervised adaptation. We propose a simple, effective, and efÔ¨Åcient method for unsupervised domain adaptation called CORrelation ALignment (CORAL). CORAL minimizes domain shift by aligning the second-order statistics of source and target distributions, without requiring any target labels. Even though it is extraordinarily simple‚Äìit can be implemented in four lines of Matlab code‚ÄìCORAL performs remarkably well in extensive evaluations on standard benchmark datasets.
‚ÄúEverything should be made as simple as possible, but not simpler.‚Äù
Albert Einstein
1 Introduction
Machine learning is very different from human learning. Humans are able to learn from very few labeled examples and apply the learned knowledge to new examples in novel conditions. In contrast, supervised machine learning methods only perform well when the given extensive labeled data are from the same distribution as the test distribution. Both theoretical (Ben-David et al. 2007; Blitzer, Dredze, and Pereira 2007) and practical results (Saenko et al. 2010; Torralba and Efros 2011) have shown that the test error of supervised methods generally increases in proportion to the ‚Äúdifference‚Äù between the distributions of training and test examples. For example, Donahue et al. (2014) showed that even state-of-the-art Deep Convolutional Neural Network features learned on a dataset of 1.2M images are susceptible to domain shift. Addressing domain shift is undoubtedly critical for successfully applying machine learning methods in real world applications.
Copyright c 2016, Association for the Advancement of ArtiÔ¨Åcial Intelligence (www.aaai.org). All rights reserved.


   
 
   
   
 

   
 
 
                  
       

        
        



     

Figure 1: Two Domain Shift Scenarios: object recognition across visual domains (left) and sentiment prediction across text domains (right). When data distributions differ across domains, applying classiÔ¨Åers trained on one domain directly to another domain is likely to cause a signiÔ¨Åcant performance drop.

To compensate for the degradation in performance due to domain shift, many domain adaptation algorithms have been developed, most of which assume that some labeled examples in the target domain are provided to learn the proper model adaptation. Daume III (2007) proposed a supervised domain adaptation approach notable for its extreme simplicity: it merely changes the features by making domainspeciÔ¨Åc and common copies, then trains a supervised classiÔ¨Åer on the new features from both domains. The method performs very well, yet is ‚Äúfrustratingly easy‚Äù to implement. However, it cannot be applied in the situations where the target domain is unlabeled, which unfortunately are quite common in practice.
In this work, we present a ‚Äúfrustratingly easy‚Äù unsupervised domain adaptation method called CORrelation ALignment (CORAL). CORAL aligns the input feature distributions of the source and target domains by exploring their second-order statistics. More concretely, CORAL aligns the distributions by re-coloring whitened source features with the covariance of the target distribution. CORAL is simple and efÔ¨Åcient, as the only computations it needs are (1) computing covariance statistics in each domain and (2) applying the whitening and re-coloring linear transformation to the source features. Then, supervised learning proceeds as usual‚Äìtraining a classiÔ¨Åer on the transformed source features.

2058

Despite being ‚Äúfrustratingly easy‚Äù, CORAL offers surprisingly good performance on standard adaptation tasks. We apply it to two tasks: object recognition and sentiment prediction (Figure 1), and show that it outperforms many existing methods. For object recognition, we demonstrate that it works well with both standard ‚ÄúÔ¨Çat‚Äù bag-ofwords features and with state-of-the-art deep CNN features (Krizhevsky, Sutskever, and Hinton 2012), outperforming existing methods, including recent deep CNN adaptation approaches (Tzeng et al. 2014; Ganin and Lempitsky 2015; Long et al. 2015). The latter approaches are quite complex and expensive, requiring re-training of the network and tuning of many hyperparameters such as the structure of the hidden adaptation layers. In contrast, CORAL only needs to compute the covariance of the source and target features.
2 Related Work
Domain shift is a fundamental problem in machine learning, and has also attracted a lot of attention in the speech, natural language and vision communities (Blitzer, Dredze, and Pereira 2007; Gopalan, Li, and Chellappa 2011; Sun and Saenko 2014). For supervised adaptation, a variety of techniques have been proposed. Some consider the source domain as a prior that regularizes the learning problem in the sparsely labeled target domain, e.g., (Yang, Yan, and Hauptmann 2007). Others minimize the distance between the target and source domains, either by re-weighting the domains or by changing the feature representation according to some explicit distribution distance metric (Borgwardt et al. 2006). Some learn a transformation on features using a contrastive loss (Saenko et al. 2010). Arguably the simplest and most prominent supervised approach is the ‚Äúfrustratingly easy‚Äù feature replication (Daume III 2007). Given a feature vector x, it deÔ¨Ånes the augmented feature vector xÀú = (x; x; 0) for data points in the source and xÀú = (x; 0; x) for data points in the target. A classiÔ¨Åer is then trained on augmented features. This approach is simple, however, it requires labeled target examples, which are often not available in real world applications.
Early techniques for unsupervised adaptation consisted of re-weighting the training point losses to more closely reÔ¨Çect those in the test distribution (Jiang and Zhai 2007; Huang et al. 2006). Dictionary learning methods (Shekhar et al. 2013; Huang and Wang 2013) try to learn a dictionary where the difference between the source and target domain is minimized in the new representation. Recent state-of-the-art unsupervised approaches (Gopalan, Li, and Chellappa 2011; Gong et al. 2012; Long et al. 2014; Caseiro et al. 2015) have pursued adaptation by projecting the source and target distributions into a lower-dimensional manifold, and Ô¨Ånding a transformation that brings the subspaces closer together. Geodesic methods Ô¨Ånd a path along the subspace manifold, and either project source and target onto points along that path (Gopalan, Li, and Chellappa 2011), or Ô¨Ånd a closedform linear map that projects source points to target (Gong et al. 2012). Alternatively, the subspaces can be aligned by computing the linear map that minimizes the Frobenius norm of the difference between them (Harel and Mannor 2011; Fernando et al. 2013). However, these approaches



 
Figure 2: (a-c) Illustration of CORrelation ALignment (CORAL) for Domain Adaptation: (a) The original source and target domains have different distribution covariances, despite the features being normalized to zero mean and unit standard deviation. This presents a problem for transferring classiÔ¨Åers trained on source to target. (b) The same two domains after source decorrelation, i.e. removing the feature correlations of the source domain. (c) Target re-correlation, adding the correlation of the target domain to the source features. After this step, the source and target distributions are well aligned and the classiÔ¨Åer trained on the adjusted source domain is expected to work well in the target domain. (d) One might instead attempt to align the distributions by whitening both source and target. However, this will fail since the source and target data are likely to lie on different subspaces due to domain shift. (Best viewed in color)
only align the bases of the subspaces, not the distribution of the projected points. They also require expensive subspace projection and hyperparameter selection.
Adaptive deep neural networks have recently been explored for unsupervised adaptation. DLID (Chopra, Balakrishnan, and Gopalan 2013) trains a joint source and target CNN architecture, but is limited to two adaptation layers. ReverseGrad (Ganin and Lempitsky 2015), DAN (Long et al. 2015), and DDC (Tzeng et al. 2014) directly optimize the deep representation for domain invariance, using additional loss layers designed for this purpose. Training with this additional loss is costly and can be sensitive to initialization, network structure, and other optimization settings. Our approach, applied to deep features (top layer activations), achieves better or comparable performance to these more complex methods, and can be incorporated directly into the network structure.
3 Correlation Alignment for Unsupervised Domain Adaptation
We present an extremely simple domain adaptation method‚Äì CORrelation ALignment (CORAL)‚Äìwhich works by align-

2059

ing the distributions of the source and target features in an unsupervised manner. We propose to match the distributions by aligning the second-order statistics, namely, the covariance.

3.1 Formulation and Derivation

We describe our method by taking a multi-class classiÔ¨Åca-
tion problem as the running example. Suppose we are given source-domain training examples DS = {xi}, x ‚àà RD with labels LS = {yi}, y ‚àà {1, ..., L}, and target data DT = {ui}, u ‚àà RD. Here both x and u are the Ddimensional feature representations œÜ(I) of input I. Sup-
pose Œºs, Œºt and CS, CT are the feature vector means and covariance matrices. As illustrated in Figure 2, Œºt = Œºs = 0 after feature normalization while CS = CT .
To minimize the distance between the second-order statis-
tics (covariance) of the source and target features, we apply
a linear transformation A to the original source features and
use the Frobenius norm as the matrix distance metric:

min
A

CSÀÜ ‚àí CT

2 F

= min A
A

CSA ‚àí CT

2 F

(1)

where CSÀÜ is covariance of the transformed source features

DsA and

¬∑

2 F

denotes

the

matrix

Frobenius

norm.

If rank(CS) ‚â• rank(CT ), then an analytical solution can

be obtained by choosing A such that CSÀÜ = CT . However,

the data typically lie on a lower dimensional manifold (Harel

and Mannor 2011; Gong et al. 2012; Fernando et al. 2013),

and so the covariance matrices are likely to be low rank (Har-

iharan, Malik, and Ramanan 2012). We derive a solution for

this general case, using the following lemma.

Lemma 1. (Cai, Cande`s, and Shen 2010) Let Y be a real

matrix of rank rY and X a real matrix of rank at most r,

where r rY ; let Y = UY Œ£Y VY be the SVD of Y , and

Œ£Y [1:r], UY [1:r], VY [1:r] be the largest r singular values and

the corresponding left and right singular vectors of Y re-

spectively. Then, X‚àó = UY [1:r]Œ£Y [1:r]VY [1:r] is the opti-

mal solution to the problem of min X ‚àí Y
X

2 F

.

Theorem 1. Let Œ£+ be the Moore-Penrose pseudoinverse

of Œ£, rCS and rCT denote the rank of CS and CT respec-

tively.

Then,

A‚àó

=

US

Œ£+S

1 2

US

UT

[1:r]

Œ£T

[1:r]

1 2

UT

[1:r]

is

the optimal solution to the problem in Equation (1) with

r = min(rCS , rCT ).

Proof. Since A is a linear transformation, A CSA does not

increase the rank CT are symmetric

of CS. Thus, rCSÀÜ matrices, conducting

rCS . SVD

Since on CS

CS and

and CT

gives CS = USŒ£SUS and CT = UT Œ£T UT respectively. We Ô¨Årst Ô¨Ånd the optimal value of CSÀÜ through considering the following two cases:

Case 1. rCS > rCT . The optimal solution is CSÀÜ = CT . Thus, CSÀÜ = UT Œ£T UT = UT [1:r]Œ£T [1:r]UT [1:r] is the optimal solution to Equation (1) where r = rCT .

Case 2. rCS rCT . Then, according to Lemma 1, CSÀÜ = UT [1:r]Œ£T [1:r]UT [1:r] is the optimal solution to Equation (1) where r = rCS .
Combining the results in the above two cases yields that CSÀÜ = UT [1:r]Œ£T [1:r]UT [1:r] is the optimal solution to Equation (1) with r = min(rCS , rCT ). We then proceed to solve for A based on the above result. Let CSÀÜ = A CSA, and we get:
A CS A = UT [1:r]Œ£T [1:r]UT [1:r] .
Since CS = USŒ£SUS , we have A US Œ£S US A = UT [1:r]Œ£T [1:r]UT [1:r] .
This gives:

(US A) Œ£S (US A) = UT [1:r]Œ£T [1:r]UT [1:r] .

Let E

=

Œ£+S

1 2

US

UT

[1:r]

Œ£T

[1:r]

1 2

UT

[1:r]

, then the right

hand side of the above equation can be re-written as

E Œ£SE. This gives

(US A) Œ£S(US A) = E Œ£SE

By setting US A to E, we get the optimal solution of A as

A‚àó = USE

=

(US Œ£+S

1 2

US

)(UT

[1:r]

Œ£T

[1:r]

1 2

UT

[1:r]

).

(2)

3.2 Algorithm

We can think of transformation A in this way intuitively: the

Ô¨Årst

part

US

Œ£+S

1 2

US

whitens the source data while the sec-

ond

part

UT

[1:r]Œ£T

[1:r]

1 2

UT [1:r]

re-colors it with the target

covariance. This is illustrated in Figure 2(b) and Figure 2(c)

respectively. The traditional whitening is adding a small reg-

ularization parameter Œª to the diagonal elements of the co-

variance matrix to explicitly make it full rank and then mul-

tiply the original feature by the inverse square root (or square

root for coloring) of it. The whitening and re-coloring here

are slightly different from them since the data are likely to

lie on a lower dimensional space and the covariance matrices

could be low rank.

In practice, for the sake of efÔ¨Åciency and stability, we can

perform the classical whitening and coloring. This is advan-

tageous because: (1) it is faster (e.g., the whole CORAL

transformation takes less than one minute on a regular laptop for DS ‚àà R795√ó4096 and DT ‚àà R2817√ó4096) and more sta-
ble, as SVD on the original covariance matrices might not be

stable and might slow to converge; (2) as illustrated in Fig-

ure 3, the performance is similar to the analytical solution in

Equation (2) and very stable with respect to Œª. In this paper,

we set Œª to 1. The Ô¨Ånal algorithm can be written in four lines

of MATLAB code as illustrated in Algorithm 1.

One might instead attempt to align the distributions by

whitening both source and target. As shown in Figure 2(d),

this will fail as the source and target data are likely to lie on

2060

Accuracy (%)

100 90 80 70 60 50 400

D‚àí>A(FT6) D‚àí>W(FT7)

0.001

0.01

0.1

1

Œª

Figure 3: Sensitivity of Covariance Regularization Parameter Œª with Œª ‚àà {0, 0.001, 0.01, 0.1, 1}. When Œª = 0, there is no regularization and we use the analytical solution in Equation (2). Please refer to Section 4.1 for details of tasks.

Algorithm 1 CORAL for Unsupervised Domain Adaptation

Input: Source Data DS, Target Data DT Output: Adjusted Source Data Ds‚àó

CS = cov(DS) + eye(size(DS, 2))

CT = cov(DT ) + eye(size(DT , 2))

‚àí1

DS = DS ‚àó CS2

DS‚àó

=

DS

1
‚àó CT2

% whitening source % re-coloring with target covariance

different subspaces due to domain shift. An alternative approach would be whitening the target and then re-coloring it with the source covariance. However, as demonstrated in (Harel and Mannor 2011; Fernando et al. 2013) and our experiments, transforming data from source to target space gives better performance. This might be due to the fact that by transforming the source to target space the classiÔ¨Åer was trained using both the label information from the source and the unlabelled structure from the target.
After CORAL transforms the source features to the target space, a classiÔ¨Åer fw parametrized by w can be trained on the adjusted source features and directly applied to target features. For a linear classiÔ¨Åer fw(I) = wT œÜ(I), we can apply an equivalent transformation to the parameter vector w instead of the features u. This results in added efÔ¨Åciency when the number of classiÔ¨Åers is small but the number and dimensionality of target examples is very high.
Since correlation alignment changes the features only, it can be applied to any base classiÔ¨Åer. Due to its efÔ¨Åciency, it can also be especially advantageous when the target domains are changing rapidly, e.g., due to scene changes over the course of a long video stream.
3.3 Relationship to Existing Methods
Relationship to Feature Normalization It has long been known that input feature normalization improves many machine learning methods, e.g., (Ioffe and Szegedy 2015). However, CORAL does not simply perform feature normalization, but rather aligns two different distributions. Standard feature normalization (zero mean and unit variance) does not address this issue, as illustrated in Figure 2(a). In this example, although the features are normalized to have zero mean and unit variance in each dimension, the differences in correlations present in the source and target domains cause the distributions to be different.

Relationship to Manifold Methods Recent state-of-theart unsupervised approaches project the source and target distributions into a lower-dimensional manifold and Ô¨Ånd a transformation that brings the subspaces closer together (Gopalan, Li, and Chellappa 2011; Gong et al. 2012; Fernando et al. 2013; Harel and Mannor 2011). CORAL avoids subspace projection, which can be costly and requires selecting the hyper-parameter that controls the dimensionality of the subspace. We note that subspace-mapping approaches (Harel and Mannor 2011; Fernando et al. 2013) only align the top k (subspace dimensionality) eigenvectors of the source and target covariance matrices. On the contrary, CORAL aligns the covariance matrices, which can only be re-constructed using all eigenvectors and eigenvalues. Even though the eigenvectors can be aligned well, the distributions can still differ a lot due to the difference of eigenvalues between the corresponding eigenvectors of the source and target data. CORAL is a more general and much simpler method than the above two as it takes into account both eigenvectors and eigenvalues of the covariance matrix without the burden of subspace dimensionality selection.
Relationship to MMD methods Maximum Mean Discrepancy (MMD) based methods (e.g.,TCA (Pan et al. 2009), DAN (Long et al. 2015)) for domain adaptation can be interpreted as ‚Äúmoment matching‚Äù and can express arbitrary statistics of the data. Minimizing MMD with polynomial kernel (k(x, y) = (1 + x y)d with d = 2) is similar to the CORAL objective, however, no previous work has used this kernel for domain adaptation nor proposed a closed form solution to the best of our knowledge. The other difference is that MMD based approaches usually apply the same transformation to both the source and target domain. As demonstrated in (Kulis, Saenko, and Darrell 2011; Harel and Mannor 2011; Fernando et al. 2013), asymmetric transformations are more Ô¨Çexible and often yield better performance for domain adaptation tasks. Intuitively, symmetric transformations Ô¨Ånd a space that ‚Äúignores‚Äù the differences between the source and target domain while asymmetric transformations try to ‚Äúbridge‚Äù the two domains.
3.4 Application to Deep Neural Networks
Suppose œÜ(I) was computed by a multilayer neural network, then the inputs to each layer œÜk can suffer from covariate shift as well. Batch Normalization (Ioffe and Szegedy 2015) tries to compensate for internal covariate shift by normalizing each mini-batch to be zero-mean and unitvariance. However, as illustrated in Figure 2, such normalization might not be enough. Even if used with full whitening, Batch Normalization may not compensate for external covariate shift: the layer activations will be decorrelated for a source point but not for a target point. What‚Äôs more, as mentioned in Section 3.2, whitening both domains still does not work. Our method can be easily integrated into a deep architecture by treating layers as features (e.g., fc6 or fc7 of AlexNet (Krizhevsky, Sutskever, and Hinton 2012)). Although we experiment only with CORAL applied to one hid-

2061

den layer at each time, multilayer CORAL could be used by implementing the transformations Al as extra layers which follow each original layer l.
4 Experiments
We evaluate our method on object recognition (Saenko et al. 2010) and sentiment analysis (Blitzer, Dredze, and Pereira 2007) with both shallow and deep features, using standard benchmarks and protocols. In all experiments we assume the target domain is unlabeled.
We follow the standard procedure (Fernando et al. 2013; Donahue et al. 2014) and use a linear SVM as the base classiÔ¨Åer. The model selection approach of (Fernando et al. 2013) is used to set the C parameter for the SVM by doing cross-validation on the source domain. Since there are no other hyperparameters (except the common regularization parameter Œª for whitening and coloring, which we discussed in Section 3.2 and Figure 3) required for our method, the results in this paper can be easily reproduced. To compare to published methods, we use the accuracies reported by their authors or conduct experiments using the source code provided by the authors.
4.1 Object Recognition
In this set of experiments, domain adaptation is used to improve the accuracy of an object classiÔ¨Åer on novel image domains. Both the standard OfÔ¨Åce (Saenko et al. 2010) and extended OfÔ¨Åce-Caltech10 (Gong et al. 2012) datasets are used as benchmarks in this paper. OfÔ¨Åce-Caltech10 contains 10 object categories from an ofÔ¨Åce environment (e.g., keyboard, laptop, etc.) in 4 image domains: W ebcam, DSLR, Amazon, and Caltech256. The standard OfÔ¨Åce dataset contains 31 (the same 10 categories from OfÔ¨ÅceCaltech10 plus 21 additional ones) object categories in 3 domains: W ebcam, DSLR, and Amazon. Later, we also conduct a larger (more data and categories) scale evaluation on OfÔ¨Åce-Caltech10 and the Cross-Dataset Testbed (Tommasi and Tuytelaars 2014) dataset.
Object Recognition with Shallow Features We follow the standard protocol of (Gong et al. 2012; Fernando et al. 2013; Gopalan, Li, and Chellappa 2011; Kulis, Saenko, and Darrell 2011; Saenko et al. 2010) and conduct experiments on the OfÔ¨Åce-Caltech10 dataset with shallow features (SURF). The SURF features were encoded with 800-bin bag-of-words histograms and normalized to have zero mean and unit standard deviation in each dimension. Since there are four domains, there are 12 experiment settings, namely, A‚ÜíC (train classiÔ¨Åer on (A)mazon, test on (C)altech), A‚ÜíD (train on (A)mazon, test on (D)SLR), A‚ÜíW, and so on. We follow the standard protocol and conduct experiments in 20 randomized trials for each domain shift and average the accuracy over the trials. In each trial, we use the standard setting (Gong et al. 2012; Fernando et al. 2013; Gopalan, Li, and Chellappa 2011; Kulis, Saenko, and Darrell 2011; Saenko et al. 2010) and randomly sample the same number (20 for Amazon, Caltech, and W ebcam; 8 for DSLR as there are only 8 images per category in the DSLR domain) of labelled images in the source domain as training

set, and use all the unlabelled data in the target domain as the test set.
In Table 1, we compare our method to Ô¨Åve recent published methods: SVMA (Duan, Tsang, and Xu 2012), DAM (Duan et al. 2009), GFK (Gong et al. 2012), SA (Fernando et al. 2013), and TCA (Pan et al. 2009) as well as the no adaptation baseline (NA). GFK, SA, and TCA are manifold based methods that project the source and target distributions into a lower-dimensional manifold. GFK integrates over an inÔ¨Ånite number of subspaces along the subspace manifold using the kernel trick. SA aligns the source and target subspaces by computing a linear map that minimizes the Frobenius norm of their difference. TCA performs domain adaptation via a new parametric kernel using feature extraction methods by projecting data onto the learned transfer components. DAM introduces smoothness assumption to enforce the target classiÔ¨Åer share similar decision values with the source classiÔ¨Åers. Even though these methods are far more complicated than ours and require tuning of hyperparameters (e.g., subspace dimensionality), our method achieves the best average performance across all the 12 domain shifts. Our method also improves on the no adaptation baseline (NA), in some cases increasing accuracy signiÔ¨Åcantly (from 56% to 86% for D‚ÜíW).
Object Recognition with Deep Features We follow the standard protocol of (Donahue et al. 2014; Tzeng et al. 2014; Long et al. 2015; Ganin and Lempitsky 2015) and conduct experiments on the standard OfÔ¨Åce dataset with deep features. DLID (Chopra, Balakrishnan, and Gopalan 2013) trains a joint source and target CNN architecture with an ‚Äúinterpolating path‚Äù between the source and target domain. DANN (Ghifary, Kleijn, and Zhang 2014) incorporates the Maximum Mean Discrepancy (MMD) measure as a regularization to reduce the distribution mismatch. DA-NBNN (Tommasi and Caputo 2013) presents an NBNN-based domain adaptation algorithm that iteratively learns a class metric while inducing a large margin separation among classes. DECAF (Donahue et al. 2014) uses AlexNet (Krizhevsky, Sutskever, and Hinton 2012) pretrained on ImageNet (Deng et al. 2009) and extracts the fc6 or fc7 layers in the source domains as features to train a classiÔ¨Åer. It then applies the classiÔ¨Åer to the target domain directly. DDC (Tzeng et al. 2014) adds a domain confusion loss to AlexNet (Krizhevsky, Sutskever, and Hinton 2012) and Ô¨Åne-tunes it on both the source and target domain.
DAN (Long et al. 2015) and ReverseGrad (Ganin and Lempitsky 2015) are the two most recent domain adaptation approaches based on deep architectures. DAN is similar to DDC but utilizes a multi-kernel selection method for better mean embedding matching and adapts in multiple layers. ReverseGrad introduces a gradient reversal layer to allow direct optimization through back-propagation. Both DDC and ReverseGrad add a new binary classiÔ¨Åcation task by treating the source and target domain as two classes. They maximize the binary classiÔ¨Åcation loss to obtain invariant features.
To have a fair comparison, we apply CORAL to both the pre-trained AlexNet (CORAL-fc6 and CORAL-fc7) and to AlexNet Ô¨Åne-tuned on the source (CORAL-FT6

2062

NA SVMA DAM GFK TCA SA CORAL

A‚ÜíC 35.8 34.8 34.9 38.3 40.0 39.9 40.3

A‚ÜíD 33.1 34.1 34.3 37.9 39.1 38.8 38.3

A‚ÜíW 24.9 32.5 32.5 39.8 40.1 39.6 38.7

C‚ÜíA 43.7 39.1 39.2 44.8 46.7 46.1 47.2

C‚ÜíD 39.4 34.5 34.7 36.1 41.4 39.4 40.7

C‚ÜíW 30.0 32.9 33.1 34.9 36.2 38.9 39.2

D‚ÜíA 26.4 33.4 33.5 37.9 39.6 42.0 38.1

D‚ÜíC 27.1 31.4 31.5 31.4 34.0 35.0 34.2

D‚ÜíW 56.4 74.4 74.7 79.1 80.4 82.3 85.9

W‚ÜíA 32.3 36.6 34.7 37.1 40.2 39.3 37.8

W‚ÜíC 25.7 33.5 31.2 29.1 33.7 31.8 34.6

W‚ÜíD 78.9 75.0 68.3 74.6 77.5 77.9 84.9

AVG 37.8 41.0 40.2 43.4 45.7 45.9 46.7

Table 1: Object recognition accuracies of all 12 domain shifts on the OfÔ¨Åce-Caltech10 dataset (Gong et al. 2012) with SURF features, following the protocol of (Gong et al. 2012; Fernando et al. 2013; Gopalan, Li, and Chellappa 2011; Kulis, Saenko, and Darrell 2011; Saenko et al. 2010).

NA-fc6 NA-fc7 NA-FT6 NA-FT7
SA-fc6 SA-fc7 SA-FT6 SA-FT7
GFK-fc6 GFK-fc7 GFK-FT6 GFK-FT7 TCA-fc6 TCA-fc7 TCA-FT6 TCA-FT7
DLID DANN DA-NBNN DECAF-fc6 DECAF-fc7 DDC DAN ReverseGrad
CORAL-fc6 CORAL-fc7 CORAL-FT6 CORAL-FT7

A‚ÜíD 53.2 55.7 54.5 58.5
41.3 46.2 40.5 50.5
44.8 52 48.8 56.4 40.6 45.4 40.8 47.3
34.0
-
53.7 57.1 61.2 62.2

A‚ÜíW 48.6 50.6 48.0 53.0
35 42.5 41.1 47.2
37.8 48.2 45.6 52.3 36.8 40.5 37.2 45.2
26.1 34.1 23.3 52.2 53.9 59.4 66.0 67.3
48.4 53.1 59.8 61.9

D‚ÜíA 40.5 46.5 38.9 43.8
32.3 39.3 33.8 39.6
34.8 41.8 40.5 43.2 32.9 36.5 30.6 36.4
20.1
-
44.4 51.1 47.4 48.4

D‚ÜíW 92.9 93.1 91.2 94.8
74.5 78.9 85.4 89
81 86.5 90.4 92.2 82.3 78.2 79.5 80.9
68.9 62.0 67.2 91.5 89.2 92.5 93.5 94.0
96.5 94.6 97.1 96.2

W‚ÜíA 39.0 43.0 40.7 43.7
30.1 36.3 33.4 37.3
31.4 38.6 36.7 41.5 28.9 34.1 36.7 39.2
21.2
-
41.9 47.3 45.8 48.2

W‚ÜíD 98.8 97.4 98.9 99.1
81.5 80.6 88.2 93
86.9 87.5 96.3 96.6 84.1 84 91.8 92
84.9 64.4 67.4
91.7 95.3 93.7
99.2 98.2 99.5 99.5

AVG 62.2 64.4 62.0 65.5
49.1 54.0 53.7 59.4
49.1 59.1 59.7 63.7 50.9 53.1 52.8 56.8
39.3
-
64.0 66.9 68.5 69.4

Table 2: Object recognition accuracies of all 6 domain shifts on the standard OfÔ¨Åce dataset (Saenko et al. 2010) with deep features, following the protocol of (Donahue et al. 2014; Tzeng et al. 2014; Ganin and Lempitsky 2015).

and CORAL-FT7). However, the Ô¨Åne-tuning procedures of DDC, DAN, and ReverseGrad are very complicated as there is more than one loss and hyper-parameters are needed to combine them. They also require adding new layers and data from both source and target domains. We use standard Ô¨Åne-tuning on the source domain only to get the baseline NA results (NA-FT6 and NA-FT7). Since there are three domains, there are 6 experiment settings. We follow the protocol of (Donahue et al. 2014; Tzeng et al. 2014; Ganin and Lempitsky 2015) and conduct experiments on 5 random training/test splits and get the mean accuracy for each domain shift.
In Table 2 we compare our method to the 11 baseline methods discussed before. Again, our method outperforms all of these techniques in almost all cases, sometimes by a very large margin. Note that most of the deep structures based methods report results only on some settings. We Ô¨Ånd that the higher level fc7/FT7 features lead to better

performance than fc6/FT6. What‚Äôs more, the NA baselines also achieve very good performance, even better than all the manifold methods and some deep methods. However, CORAL outperforms it consistently and is the only method achieves better AVG performance across all the 6 shifts. It also achieves better peformance than the two latest deep methods (DAN and ReverseGrad) in 2 out of the 3 shifts they reported.
One interesting Ô¨Ånding is that, although Ô¨Åne-tuning on the source domain only (NA-FT6 and NA-FT7) does not achieve better performance on the target domain compared to the pre-trained network (NA-fc6 and NA-fc7), applying CORAL to the Ô¨Åne-tuned network (CORAL-FT6 and CORAL-FT7) achieves much better performance than applying CORAL to the pre-trained network (CORAL-fc6 and CORAL-fc7). One possible explanation is that the pretrained network might be underÔ¨Åtting while the Ô¨Åne-tuned network is overÔ¨Åtting. Since CORAL aligns the source feature distribution to target distribution, overÔ¨Åtting becomes less of a problem.
A Larger Scale Evaluation In this section, we repeat the evaluation on a larger scale. We conduct two sets of experiments to investigate how the dataset size and number of classes will affect the performance of domain adaptation methods. In both sets of experiments, we use the ‚Äúfull training‚Äù protocol, where all the source data are used for training, compared to the standard subsampling protocol in the previous two sections. Since all the target data are used in the previous two sections, the only difference between these two settings is the training dataset size of the source domain. To have a direct comparison to Table 1, we conduct the Ô¨Årst set of experiments on the OfÔ¨Åce-Caltech10 dataset with SURF features. To investigate the effect of the number of classes, we conduct the second set of experiments on the Cross-Dataset Testbed (Tommasi and Tuytelaars 2014) dataset, with 3847 images for Caltech256 (Gregory, Alex, and Pietro 2007), 4000 images for ImageNet (Deng et al. 2009), and 2626 images for SUN (Xiao et al. 2010) over 40 classes, using the only publicly available deep features (DECAF-fc7).
In Tables 3 and 4, we compare CORAL to SA, GFK, TCA which have available source code as well as the NA baseline. Table 3 shows the result of the OfÔ¨Åce-Caltech10 dataset and Table 4 shows the result on the Cross-Dataset Testbed dataset. In both experiments, CORAL outperforms all the baseline methods and again the margin on deep features is

2063

NA SA GFK TCA CORAL

A‚ÜíC 41.7 37.4 41.9 35.2 45.1

A‚ÜíD 44.6 36.3 41.4 39.5 39.5

A‚ÜíW 31.9 39.0 41.4 29.5 44.4

C‚ÜíA 53.1 44.9 56.0 46.8 52.1

C‚ÜíD 47.8 39.5 42.7 52.2 45.9

C‚ÜíW 41.7 41.0 45.1 38.6 46.4

D‚ÜíA 26.2 32.9 38.7 36.2 37.7

D‚ÜíC 26.4 34.3 36.5 30.1 33.8

D‚ÜíW 52.5 65.1 74.6 71.2 84.7

W‚ÜíA 27.6 34.4 31.9 32.2 36.0

W‚ÜíC 21.2 31.0 27.5 27.9 33.7

W‚ÜíD 78.3 62.4 79.6 74.5 86.6

AVG 41.1 41.5 46.4 42.8 48.8

Table 3: Object recognition accuracies of all 12 domain shifts on the OfÔ¨Åce-Caltech10 dataset (Gong et al. 2012) with SURF features, using the ‚Äúfull training‚Äù protocol.

NA SA GFK TCA CORAL

C‚ÜíI C‚ÜíS I‚ÜíC I‚ÜíS S‚ÜíC S‚ÜíI AVG 66.1 21.9 73.8 22.4 24.6 22.4 38.5 43.7 13.9 52.0 15.1 15.8 14.3 25.8 52 18.6 58.5 20.1 21.1 17.4 31.3 48.6 15.6 54.0 14.8 14.6 12.0 26.6 66.2 22.9 74.7 25.4 26.9 25.2 40.2

Table 4: Object recognition accuracies of all 6 domain shifts on the Testbed Cross-Dataset (Tommasi and Tuytelaars 2014) dataset with DECAF-fc7 features, using the ‚Äúfull training‚Äù protocol.

NA TCA SA GFS GFK SCL KMM CORAL

K‚ÜíD 72.2 60.4 78.4 67.9 69.0 72.8 72.2 73.9

D‚ÜíB 76.9 61.4 74.7 68.6 71.3 76.2 78.6 78.3

B‚ÜíE 74.7 61.3 75.6 66.9 68.4 75.0 76.9 76.3

E‚ÜíK 82.8 68.7 79.3 75.1 78.2 82.9 83.5 83.6

AVG 76.7 63.0 77.0 69.6 71.7 76.7 77.8 78.0

Table 5: Review classiÔ¨Åcation accuracies of the 4 standard domain shifts (Gong, Grauman, and Sha 2013) on the Amazon dataset (Blitzer, Dredze, and Pereira 2007) with bag-ofwords features.

much larger than on shallow features. Comparing Table 3 to Table 1, we can say that the performance difference between NA and other methods is smaller as more source data is used. This may be due to the fact that as more training data is used, the classiÔ¨Åer is stronger and can generalize better to other domains.
4.2 Sentiment Analysis
We also evaluate our method on sentiment analysis using the standard Amazon review dataset (Blitzer, Dredze, and Pereira 2007; Gong, Grauman, and Sha 2013). We use the processed data from (Gong, Grauman, and Sha 2013), in which the dimensionality of the bag-of-words features was reduced to keep the top 400 words without losing performance. This dataset contains Amazon reviews on 4 domains: Kitchen appliances, DVD, Books, and Electronics. For each domain, there are 1000 positive and 1000 negative reviews. We follow the standard protocol of (Gong, Grauman, and Sha 2013) and conduct experiments on 20 random training/test splits and report the mean accuracy for each domain shift.
In Table 5, we compare our method to Ô¨Åve published methods: TCA (Pan et al. 2009), GFS (Gopalan, Li, and Chellappa 2011), GFK (Gong et al. 2012), SCL (Blitzer, McDonald, and Pereira 2006), and KMM (Huang et al.

2006) as well as the no adaptation baseline (NA). GFS is a precursor of GFK and interpolates features using a Ô¨Ånite number of subspaces. SCL introduces structural correspondence learning to automatically induce correspondences among features from different domains. KMM presents a nonparametric method to directly produce re-sampling weights without distribution estimation. One interesting observation is that, for this sentiment analysis task, three stateof-the-art methods (TCA, GFS, and GFK) actually perform worse than the no adaptation baseline (NA). Despite the difÔ¨Åculty of this task, CORAL still performs well and achieves the best average classiÔ¨Åcation accuracy across the 4 standard domain shifts.
5 Discussion
One interesting result is that the margin between CORAL and other published methods is much larger on deep features (e.g. 64.0 of CORAL-fc6 compared to 49.1 of SAfc6 in Table 2) than on bag-of-words features. This could be because deep features are more strongly correlated than bag-of-words features (e.g. the largest singular value of the covariance matrix of Amazon-fc6 is 354 compared to 27 of Amazon-SURF). Similarly, the improvement on images (Tables 1-4) is much larger than text (Table 5), possibly because bag-of-words text features are extremely sparse and less correlated than image features. As demonstrated in (Mahendran and Vedaldi 2015), high level deep features are more ‚Äúparts‚Äù or ‚Äúobjects‚Äô. Intuitively, ‚Äúparts‚Äù or ‚Äúobjects‚Äù should be more strongly correlated than ‚Äúedges‚Äù (e.g., arm and head of a person are more likely to appear jointly).
These Ô¨Åndings suggest that CORAL is extremely valuable in the era of deep learning. Applying CORAL to deep text features is part of future work.
6 Conclusion
In this article, we proposed an simple, efÔ¨Åcient and effective method for domain adaptation. The method is ‚Äúfrustratingly easy‚Äù to implement: the only computation involved is recoloring the whitened source features with the covariance of the target domain.
Extensive experiments on standard benchmarks demonstrate the superiority of our method over many existing state-of-the-art methods. These results conÔ¨Årm that CORAL is applicable to multiple features types, including highlyperforming deep features, and to different tasks, including computer vision and natural language processing.

2064

7 Acknowledgments
The authors would like to thank Mingsheng Long, Judy Hoffman, and Trevor Darrell for helpful discussions and suggestions; the reviewers for their valuable comments. The Tesla K40 used for this research was donated by the NVIDIA Corporation. This research was supported by NSF Awards IIS-1451244 and IIS-1212928.
References
Ben-David, S.; Blitzer, J.; Crammer, K.; and Pereira, F. 2007. Analysis of representations for domain adaptation. In NIPS.
Blitzer, J.; Dredze, M.; and Pereira, F. 2007. Biographies, Bollywood, Boom-boxes and Blenders: Domain Adaptation for Sentiment ClassiÔ¨Åcation. In ACL.
Blitzer, J.; McDonald, R.; and Pereira, F. 2006. Domain adaptation with structural correspondence learning. In EMNLP.
Borgwardt, K. M.; Gretton, A.; Rasch, M. J.; Kriegel, H.-P.; Scho¬®lkopf, B.; and Smola, A. J. 2006. Integrating structured biological data by kernel maximum mean discrepancy. In Bioinformatics.
Cai, J.-F.; Cande`s, E. J.; and Shen, Z. 2010. A singular value thresholding algorithm for matrix completion. SIAM J. on Optimization 20(4):1956‚Äì1982.
Caseiro, R.; Henriques, J. F.; Martins, P.; and Batista, J. 2015. Beyond the shortest path : Unsupervised domain adaptation by sampling subspaces along the spline Ô¨Çow. In CVPR.
Chopra, S.; Balakrishnan, S.; and Gopalan, R. 2013. Dlid: Deep learning for domain adaptation by interpolating between domains. In ICML Workshop.
Daume III, H. 2007. Frustratingly easy domain adaptation. In ACL.
Deng, J.; Dong, W.; Socher, R.; Li, L.-J.; Li, K.; and Fei-Fei, L. 2009. Imagenet: A large-scale hierarchical image database. In CVPR.
Donahue, J.; Jia, Y.; Vinyals, O.; Hoffman, J.; Zhang, N.; Tzeng, E.; and Darrell, T. 2014. Decaf: A deep convolutional activation feature for generic visual recognition. In ICML.
Duan, L.; Tsang, I. W.; Xu, D.; and Chua, T. 2009. Domain adaptation from multiple sources via auxiliary classiÔ¨Åers. In ICML.
Duan, L.; Tsang, I. W.; and Xu, D. 2012. Domain transfer multiple kernel learning. TPAMI 34(3):465‚Äì479.
Fernando, B.; Habrard, A.; Sebban, M.; and Tuytelaars, T. 2013. Unsupervised visual domain adaptation using subspace alignment. In ICCV.
Ganin, Y., and Lempitsky, V. 2015. Unsupervised domain adaptation by backpropagation. In ICML.
Ghifary, M.; Kleijn, W. B.; and Zhang, M. 2014. Domain adaptive neural networks for object recognition. In PRICAI.
Gong, B.; Shi, Y.; Sha, F.; and Grauman, K. 2012. Geodesic Ô¨Çow kernel for unsupervised domain adaptation. In CVPR.
Gong, B.; Grauman, K.; and Sha, F. 2013. Connecting the dots with landmarks: Discriminatively learning domain-invariant features for unsupervised domain adaptation. In ICML.
Gopalan, R.; Li, R.; and Chellappa, R. 2011. Domain adaptation for object recognition: An unsupervised approach. In ICCV.

Gregory, G.; Alex, H.; and Pietro, P. 2007. Caltech 256 object category dataset. In Tech. Rep. UCB/CSD-04-1366, California Institue of Technology.
Harel, M., and Mannor, S. 2011. Learning from multiple outlooks. In ICML.
Hariharan, B.; Malik, J.; and Ramanan, D. 2012. Discriminative decorrelation for clustering and classiÔ¨Åcation. In ECCV.
Huang, D.-A., and Wang, Y.-C. 2013. Coupled dictionary and feature space learning with applications to cross-domain image synthesis and recognition. In ICCV.
Huang, J.; Smola, A. J.; Gretton, A.; Borgwardt, K. M.; and Scho¬®lkopf, B. 2006. Correcting sample selection bias by unlabeled data. In NIPS.
Ioffe, S., and Szegedy, C. 2015. Batch normalization: Accelerating deep network training by reducing internal covariate shift. In ICML.
Jiang, J., and Zhai, C. 2007. Instance Weighting for Domain Adaptation in NLP. In ACL.
Krizhevsky, A.; Sutskever, I.; and Hinton, G. E. 2012. Imagenet classiÔ¨Åcation with deep convolutional neural networks. In NIPS.
Kulis, B.; Saenko, K.; and Darrell, T. 2011. What you saw is not what you get: Domain adaptation using asymmetric kernel transforms. In CVPR.
Long, M.; Wang, J.; Ding, G.; Sun, J.; and Yu, P. 2014. Transfer joint matching for unsupervised domain adaptation. In CVPR.
Long, M.; Cao, Y.; Wang, J.; and Jordan, M. I. 2015. Learning transferable features with deep adaptation networks. In ICML.
Mahendran, A., and Vedaldi, A. 2015. Understanding deep image representations by inverting them. In CVPR.
Pan, S. J.; Tsang, I. W.; Kwok, J. T.; and Yang, Q. 2009. Domain adaptation via transfer component analysis. In IJCAI.
Saenko, K.; Kulis, B.; Fritz, M.; and Darrell, T. 2010. Adapting visual category models to new domains. In ECCV.
Shekhar, S.; Patel, V. M.; Nguyen, H. V.; and Chellappa, R. 2013. Generalized domain-adaptive dictionaries. In CVPR.
Sun, B., and Saenko, K. 2014. From virtual to reality: Fast adaptation of virtual object detectors to real domains. In BMVC.
Tommasi, T., and Caputo, B. 2013. Frustratingly easy NBNN domain adaptation. In ICCV.
Tommasi, T., and Tuytelaars, T. 2014. A testbed for crossdataset analysis. In ECCV TASK-CV Workshop.
Torralba, A., and Efros, A. A. 2011. Unbiased look at dataset bias. In CVPR.
Tzeng, E.; Hoffman, J.; Zhang, N.; Saenko, K.; and Darrell, T. 2014. Deep domain confusion: Maximizing for domain invariance. CoRR abs/1412.3474.
Xiao, J.; Hays, J.; Ehinger, K. A.; Oliva, A.; and Torralba, A. 2010. Sun database: Large-scale scene recognition from abbey to zoo. In CVPR.
Yang, J.; Yan, R.; and Hauptmann, A. 2007. Adapting SVM classiÔ¨Åers to data with shifted distributions. In ICDM Workshop.

2065

