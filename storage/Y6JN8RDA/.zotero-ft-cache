AFLGuard: Byzantine-robust Asynchronous Federated Learning

arXiv:2212.06325v1 [cs.CR] 13 Dec 2022

Minghong Fang
The Ohio State University and Duke University
Neil Zhenqiang Gong
Duke University
ABSTRACT
Federated learning (FL) is an emerging machine learning paradigm, in which clients jointly learn a model with the help of a cloud server. A fundamental challenge of FL is that the clients are often heterogeneous, e.g., they have different computing powers, and thus the clients may send model updates to the server with substantially different delays. Asynchronous FL aims to address this challenge by enabling the server to update the model once any client‚Äôs model update reaches it without waiting for other clients‚Äô model updates. However, like synchronous FL, asynchronous FL is also vulnerable to poisoning attacks, in which malicious clients manipulate the model via poisoning their local data and/or model updates sent to the server. Byzantine-robust FL aims to defend against poisoning attacks. In particular, Byzantine-robust FL can learn an accurate model even if some clients are malicious and have Byzantine behaviors. However, most existing studies on Byzantine-robust FL focused on synchronous FL, leaving asynchronous FL largely unexplored. In this work, we bridge this gap by proposing AFLGuard, a Byzantine-robust asynchronous FL method. We show that, both theoretically and empirically, AFLGuard is robust against various existing and adaptive poisoning attacks (both untargeted and targeted). Moreover, AFLGuard outperforms existing Byzantine-robust asynchronous FL methods.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Systems security.
KEYWORDS
Federated Learning, Poisoning Attacks, Byzantine Robustness
ACM Reference Format: Minghong Fang, Jia Liu, Neil Zhenqiang Gong, and Elizabeth S. Bentley. 2022. AFLGuard: Byzantine-robust Asynchronous Federated Learning. In Annual Computer Security Applications Conference (ACSAC ‚Äô22), December 5‚Äì9, 2022, Austin, TX, USA. ACM, New York, NY, USA, 15 pages. https: //doi.org/10.1145/3564625.3567991
1 INTRODUCTION
Background and Motivation: Federated learning (FL) [27, 32] is an emerging distributed learning framework, which enables clients
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA ¬© 2022 Association for Computing Machinery. ACM ISBN 978-1-4503-9759-9/22/12. . . $15.00 https://doi.org/10.1145/3564625.3567991

Jia Liu
The Ohio State University
Elizabeth S. Bentley
Air Force Research Laboratory
(e.g., smartphone, IoT device, edge device) to jointly train a global model under the coordination of a cloud server. Specifically, the server maintains the global model and each client maintains a local model. In each iteration, the server sends the current global model to the clients; a client trains its local model via fine-tuning the global model using its local data, and the client sends the model update (i.e., the difference between global model and local model) to the server; and the server aggregates the clients‚Äô model updates and uses them to update the global model.
Most existing FL methods are synchronous [7, 9, 22, 33, 35, 56]. Specifically, in each iteration of a synchronous FL, the server waits for the model updates from a large number of clients before aggregating them to update the global model. However, synchronous FL faces two key challenges. The first challenge is the so-called straggler problem. Specifically, due to clients‚Äô unpredictable communication latency and/or heterogeneous computing capabilities, some clients (i.e., stragglers) send their model updates to the server much later than others in each iteration, which substantially delays the update of the global model. Simply ignoring the stragglers‚Äô model updates would waste clients‚Äô computing resources and hurt accuracy of the global model [44]. The second challenge is that synchronous FL is difficult to implement due to the high complexity in maintaining a perfectly synchronized global common clock.
Asynchronous FL aims to address the challenges of synchronous FL. Specifically, in asynchronous FL, the server updates the global model immediately upon receiving a client‚Äôs model update without waiting for other clients‚Äô model updates. Due to the advantages of asynchronous FL, it has been widely incorporated in deep learning frameworks such as TensorFlow [3] and PyTorch [38], as well as deployed by industries, e.g., Meta [26, 36]. However, like synchronous FL, asynchronous FL is also vulnerable to poisoning attacks [17, 53, 55], in which malicious clients poison their local data and/or model updates to guide the training process to converge to a bad global model. Specifically, in untargeted poisoning attacks [6, 7, 18, 41], the bad global model simply has a large error rate for indiscriminate testing inputs. In targeted poisoning attacks [5, 14, 40, 43], the bad global model predicts attacker-chosen label for attacker-chosen testing inputs, but its predictions for other testing inputs are unaffected. For instance, in backdoor attacks (one type of targeted poisoning attacks) [5, 37, 43, 49, 51], the attackerchosen testing inputs are inputs embedded with a backdoor trigger.
Byzantine-robust asynchronous FL aims to defend against poisoning attacks. However, it is highly challenging to design Byzantine-robust asynchronous FL. To date, most existing Byzantine-robust FL methods (e.g., [7, 9, 12, 33, 35, 56]) are designed for synchronous FL. Compared to synchronous FL, the key challenge in designing Byzantine-robust asynchronous FL stems from the fact that noisy model updates are inevitable. Specifically,

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

Minghong Fang, Jia Liu, Neil Zhenqiang Gong, and Elizabeth S. Bentley

ùúÉ0
Server Client 1 Download

Compute

Upload

ùúÉ1
Time Idle

ùúÉ0
Server Client 1 Download

ùúÉ1

ùúÉ2

Compute

Upload

ùúÉ3
Time

Client 2 Download

Compute

Upload

Client 2 Download

Compute

Upload

Client 3 Download Compute Upload

Idle

(a) Synchronous FL

Client 3 Download Compute Upload (b) Asynchronous FL

Figure 1: Synchronous vs. asynchronous FL. ‚ÄúDownload‚Äù means downloading the global model from the server. ‚ÄúCompute‚Äù means training a local model. ‚ÄúUpload‚Äù means sending the model update to the server.

when a client sends its model update calculated based on a global model to the server, other clients may have already sent their model updates calculated based on the same global model to the server and thus the global model could have already been updated several times. As a result, delayed model updates are inevitably noisy with respect to the current global model. This asynchrony makes it difficult to distinguish between poisoned model updates from malicious clients and the ‚Äúnoisy‚Äù model updates from benign clients.
Our Work: In this work, we propose AFLGuard, a Byzantine-robust asynchronous FL framework that addresses the aforementioned challenges. In AFLGuard, our key idea to handle the asynchrony complications is to equip the server with a small but clean training dataset, which we call trusted dataset. The server (e.g., Meta, Google) can manually collect the trusted dataset for the learning task. When receiving a model update from a client, the server computes a model update (called server model update) based on its trusted dataset and the current global model. The server accepts the client‚Äôs model update only if it does not deviate far from the server model update with respect to both direction and magnitude. In particular, if the magnitude of the difference vector between the client and server model updates is less than a certain fraction of the magnitude of the server model update, then the server uses the client‚Äôs model update to update the global model. The updated global model is then sent to the client.
Interestingly, we show that this simple intuitive idea of AFLGuard enjoys strong theoretical guarantees. Specifically, under mild assumptions widely adopted by the Byzantine-robust FL community, we prove that the difference between the optimal global model parameters under no malicious clients and the global model parameters learnt by AFLGuard under an arbitrary number of malicious clients can be bounded. We also empirically evaluate AFLGuard and compare it with state-of-the-art Byzantine-robust asynchronous FL methods on a synthetic dataset and five real-world datasets. Our experimental results show that AFLGuard can defend against various existing and adaptive poisoning attacks when a large fraction of clients are malicious. Moreover, AFLGuard substantially outperforms existing Byzantine-robust asynchronous FL methods.
We summarize our main contributions as follows:
‚Ä¢ We propose a Byzantine-robust asynchronous FL framework called AFLGuard to defend against poisoning attacks in asynchronous FL.

‚Ä¢ We theoretically show that AFLGuard is robust against an arbitrary number of malicious clients under mild assumptions commonly adopted by the Byzantine-robust FL community.
‚Ä¢ We conduct extensive experiments to evaluate AFLGuard and compare it with state-of-the-art Byzantine-robust asynchronous FL methods on one synthetic and five real-world datasets.

2 PRELIMINARIES AND RELATED WORK

2.1 Background on Federated Learning

Notations: We use ‚à•¬∑‚à• to denote ‚Ñì2-norm. For any natural number ùëõ, we use [ùëõ] to denote the set {1, 2, ¬∑ ¬∑ ¬∑ , ùëõ}.

Setup of Federated Learning (FL): Suppose we have ùëõ clients.

Client ùëñ has a local training dataset ùëãùëñ , where ùëñ = 1, 2, ¬∑ ¬∑ ¬∑ , ùëõ. For

simplicity, we denote by ùëã =

ùëõ
ùëñ=1 ùëãùëñ the joint training dataset

of the ùëõ clients. An FL algorithm aims to solve an optimization

problem, whose objective function is to find an optimal global model ùúΩ ‚àó that minimizes the expected loss ùêπ (ùúΩ ) as follows:

ùúΩ ‚àó = arg min ùêπ (ùúΩ ) ‚âú arg min Eùë•‚àºD [ùëì (ùúΩ, ùë•)] ,

(1)

ùúΩ ‚ààŒò

ùúΩ ‚ààŒò

where Œò ‚äÜ Rùëë is the model-parameter space, ùëë is the dimension

of the model-parameter space, ùëì is a loss function that evaluates

the discrepancy between an output of a global model and the cor-

responding ground truth, the expectation E is taken with respect to the distribution of a training example ùë• (including both feature vector and label), and D is the training data distribution. In practice, the expectation is often approximated as the average

loss of the training examples in the joint training dataset ùëã , i.e.,

Eùë• ‚àº D

[ùëì (ùúΩ, ùë•)]

‚âà

1 |ùëã |

ùë• ‚ààùëã ùëì (ùúΩ, ùë•).

In FL, the clients iteratively learn a global model with the coordi-

nation of a cloud server. In each iteration, synchronous FL waits for

the information from multiple clients before using them to update

the global model, while asynchronous FL updates the global model

once the information from any client reaches it. Fig. 1 illustrates the difference between synchronous FL and asynchronous FL [2].

Synchronous FL: Synchronous FL performs three steps in each iteration. In the first step, the server sends the current global model

to the clients or a selected subset of them. In the second step, a

client trains its local model via fine-tuning the global model using its local training data, and it sends the model update (i.e., the differ-

ence between the global model and the local model) to the server.

AFLGuard: Byzantine-robust Asynchronous Federated Learning
Algorithm 1 AsyncSGD.
Server: 1: Initializes global model ùúΩ 0 ‚àà Œò and sends it to all clients. 2: for ùë° = 0, 1, 2, ¬∑ ¬∑ ¬∑ ,ùëá ‚àí 1 do 3: Upon receiving a model update ùíàùë°‚àíùúèùëñ from client ùëñ, updates
ùëñ
ùúΩùë°+1 = ùúΩùë° ‚àí ùúÇùíàùë°‚àíùúèùëñ .
ùëñ
4: Sends ùúΩùë°+1 to client ùëñ. 5: end for
Client ùëñ, ùëñ ‚àà [ùëõ]: 6: repeat 7: Receives a global model ùúΩùë° from the server. 8: Computes stochastic gradient ùíàùë° based on ùúΩùë° and a random
ùëñ
mini-batch of its local training data. 9: Sends ùíàùë° to the server.
ùëñ
10: until Convergence

When all the selected clients have sent their model updates to the

server, the server aggregates them and uses the aggregated model

update to update the global model in the third step. For instance,

in FedAvg [32], the server computes the weighted average of the

clients‚Äô model updates and uses it to update the global model in the

third step.

Asynchronous FL: Synchronous FL requires the server to wait

for the model updates from multiple clients before updating the

global model, which is vulnerable to the straggler problem and

delays the training process. In contrast, asynchronous FL updates

the global model upon receiving a model update from any client [13,

15, 26, 36, 46, 52, 54]. Specifically, the server initializes the global

model and sends it to all clients. Each client trains its local model

via fine-tuning the global model based on its local training data,

and sends the model update to the server. Upon receiving a model

update, the server immediately updates the global model and sends

the updated global model back to the client.
Formally, we denote by ùúΩùë° the global model in the ùë°th iteration. Moreover, we denote by ùíàùë° the model update from client ùëñ that
ùëñ
is calculated based on the global model ùúΩùë° . Suppose in the ùë°th iteration, the server receives a model update ùíàùë°‚àíùúèùëñ from client ùëñ that
ùëñ
is calculated based on an earlier global model ùúΩùë°‚àíùúèùëñ in an earlier iteration ùë° ‚àí ùúèùëñ , where ùúèùëñ is the delay for the model update. The
server updates the global model as follows:

ùúΩùë°+1 = ùúΩùë° ‚àí ùúÇùíàùë°‚àíùúèùëñ ,

(2)

ùëñ

where ùúÇ is the global learning rate. Asynchronous stochastic gradient descent (AsyncSGD) [58] is the
most popular asynchronous FL method in non-adversarial settings.

In AsyncSGD, a client simply fine-tunes the global model using

one mini-batch of its local training data to obtain a local model. In

other words, a client computes the gradient of the global model with

respect to a random mini-batch of its local training data as the model

update. Formally, ùíàùë°
ùëñ

=

1 |ùêµ |

ùë• ‚ààùêµ ‚ñΩùëì (ùúΩùë° , ùë•), where ùêµ is a mini-batch

randomly sampled from ùëãùëñ . Algorithm 1 shows AsyncSGD, where

ùëá is the number of iterations. Note that for simplicity, we assume in

all the compared FL methods and our AFLGuard, a client uses such

gradient with respect to a random mini-batch of its local training

data as the model update.

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA
2.2 Byzantine-robust FL
Poisoning Attacks to FL: Poisoning attacks have been intensively studied in traditional ML systems, such as recommender systems [19, 21, 31], crowdsourcing systems [20, 34] and anomaly detectors [39]. Due to its distributed nature, FL is also vulnerable to poisoning attacks [5, 6, 10, 18], in which malicious clients poison the global model via carefully manipulating their local training data and/or model updates. The malicious clients can be fake clients injected into the FL system by an attacker or genuine clients compromised by an attacker. Depending on the attack goal, poisoning attacks can be categorized into untargeted and targeted. In untargeted attacks, a poisoned global model has a large error rate for indiscriminate testing examples, leading to denial-of-service. In targeted attacks, a poisoned global model predicts attacker-chosen labels for attacker-chosen testing inputs, but its predictions for other testing inputs are unaffected.
For instance, label flipping attack [56], Gaussian attack [7], and gradient deviation attack [18] are examples of untargeted attacks. In particular, in the label flipping attack, the malicious clients flip the label ùë¶ of a local training example to ùê∂ ‚àí 1 ‚àí ùë¶, where ùê∂ is the total number of labels and the labels are 0, 1, ¬∑ ¬∑ ¬∑ , ùê∂ ‚àí 1. In the Gaussian attack, the malicious clients draw their model updates from a Gaussian distribution with mean zero and a large standard deviation instead of computing them based on their local training data. In the gradient deviation attack, the model updates from the malicious clients are manipulated such that the global model update follows the reverse of the gradient direction (i.e., the direction where the global model should move without attacks).
Backdoor attack [5, 51] is a popular targeted attack. For instance, in the backdoor attack in [5], each malicious client replicates some of its local training examples; embeds a trigger (e.g., a patch on the right bottom corner of an image) into each replicated training input; and changes their labels to an attacker-chosen one. A malicious client calculates its model update based on its original local training data and the replicated ones. Moreover, the malicious client scales up the model update by a scaling factor before sending it to the server. The poisoned global model would predict the attackerchosen label for any input embedded with the same trigger, but the predictions for inputs without the trigger are not affected.
Byzantine-Robust Synchronous FL: Byzantine-robust FL aims to defend against poisoning attacks. Most existing Byzantine-robust FL methods focus on synchronous FL [7, 9, 56]. Recall that a synchronous FL method has three steps in each iteration. These Byzantinerobust synchronous FL methods adopt robust aggregation rules in the third step. Roughly speaking, the key idea of a robust aggregation rule is to filter out ‚Äúoutlier‚Äù model updates before aggregating them to update the global model. For example, the Krum aggregation rule [7] outputs the model update with the minimal sum of distances to its ùëõ ‚àíùëö ‚àí 2 neighbors, where ùëõ and ùëö are the numbers of total and malicious clients, respectively. Since these methods are designed to aggregate model updates from multiple clients, they are not applicable to asynchronous FL, which updates the global model using one model update. Other defenses for synchronous FL include provably secure defenses to prevent poisoning attacks [11] and methods to detect malicious clients [57].

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA
Byzantine-Robust Asynchronous FL: To the best of our knowledge, the works most related to ours are [17, 53, 55]. Specifically, Kardam [17] maintains a Lipschitz coefficient for each client based on its latest model update sent to the server. The server uses a model update from a client to update the global model only if its Lipschitz coefficient is smaller than the median Lipschitz coefficient of all clients. BASGD [55] is a non-conventional asynchronous FL method that uses multiple clients‚Äô model updates to update the global model. Specifically, the server holds several buffers and maps each client‚Äôs model update into one of them. When all buffers are non-empty, the server computes the average of the model updates in each buffer, takes the median or trimmed-mean of the average model updates, and uses it to update the global model. In Zeno++ [53], the server filters clients‚Äô model updates based on a trusted dataset. The server computes a server model update based on the trusted dataset. After receiving a model update from any client, the server computes the cosine similarity between the client model update and server model update. If the cosine similarity is positive, then the server normalizes the client model update. Note that FLTrust [9], a synchronous FL method, uses the similar technique as in Zeno++ to filter out malicious information.
Differences between AFLGuard and Zeno++: Both our AFLGuard and Zeno++ use a trusted dataset on the server. However, they use it in different ways. Zeno++ simply treats a client‚Äôs model update as benign if it is positively correlated with the server model update. Due to delays on both client and server sides and the distribution shift between the trusted and clients‚Äô training data, the server‚Äôs and benign clients‚Äô model updates may not be positively correlated. In AFLGuard, a client‚Äôs model update is considered benign if it does not deviate substantially from the server‚Äôs model update in both direction and magnitude.
3 PROBLEM FORMULATION
Threat Model: The attacker controls some malicious clients, which could be genuine clients compromised by the attacker or fake clients injected by the attacker. The attacker does not compromise the server. The malicious clients could send arbitrary model updates to the server. The attacker could have different degree of knowledge about the FL system [9, 18], i.e., partial knowledge and full knowledge. In the partial-knowledge setting, the attacker knows the local training data and model updates on the malicious clients. In the full-knowledge scenario, the attacker has full knowledge of the FL system. In particular, the attacker knows the local training data and model updates on all clients, as well as the FL method and its parameter settings. Note that the attacker in the full-knowledge setting is much stronger than that of partial-knowledge setting [18]. Following [9], we use the full-knowledge attack setting to evaluate the security of our defense in the worst case. In other words, our defense is more secure against weaker attacks.
Defense Goals: We aim to design an asynchronous FL method that achieves the following two goals: i) the method should be as accurate as AsyncSGD in non-adversarial settings. In other words, when all clients are benign, our method should learn as an accurate global model as AsyncSGD; and ii) the method should be robust against both existing and adaptive poisoning attacks in adversarial

Minghong Fang, Jia Liu, Neil Zhenqiang Gong, and Elizabeth S. Bentley

(a)

(b)

Figure 2: Illustration of our acceptance criteria. ùíàùë°‚àíùúèùëñ and

ùëñ

ùíàùë†ùë°‚àíùúèùë† are client model update and server model update, re-

spectively. (a) the direction of ùíàùë°‚àíùúèùëñ deviates substantially

ùëñ

from

that

of

ùíàùë†ùë°‚àíùúèùë† .

(b)

the

magnitude

of

ùíàùë° ‚àíùúèùëñ
ùëñ

deviates

sub-

stantially from that of ùíàùë†ùë°‚àíùúèùë† . The server rejects the client

model update in both cases.

settings. Adaptive poisoning attacks refer to attacks that are tailored to the proposed method. Server‚Äôs Capability and Knowledge: We assume the server holds a small clean dataset, which we call trusted dataset. This assumption is reasonable in practice because it is quite affordable for a service provider to collect and verify a small trusted dataset for the learning task. For instance, Google uses FL for the next word prediction in a virtual keyboard application called Gboard [1]; and Google can collect a trusted dataset from its employees. The trusted dataset does not need to follow the same distribution as the joint training dataset ùëã . As our experimental results will show, once the trusted dataset distribution does not deviate substantially from the joint training data distribution, our method is effective. We acknowledge that the trusted dataset should be clean, and our method may not be robust when the trusted dataset is poisoned.

4 AFLGUARD

Intuitions: The key of our AFLGuard is a criteria to decide whether the server should accept a client‚Äôs model update to update the global

model or not. Ideally, if a model update is from a malicious client

performing poisoning attacks, then the server should not use it to

update the global model. Our key observation is that, in poisoning

attacks, malicious clients often manipulate the directions and/or

the magnitudes of their model updates. Therefore, we consider

both the direction and magnitude of a client‚Äôs model update when

deciding whether it should be accepted to update the global model

or not. Specifically, the server computes a model update (called server model update) based on its own trusted dataset. When a

client‚Äôs model update deviates substantially from the server model

update with respect to direction and/or magnitude, it is rejected.

Acceptance Criteria: Suppose in the ùë°th iteration, the server re-

ceives

a

model

update ùíàùë°‚àíùúèùëñ
ùëñ

from

a

client ùëñ

‚àà

[ùëõ],

where ùúèùëñ

is

the

delay. Client ùëñ calculated the model update ùíàùë°‚àíùúèùëñ based on the global

ùëñ

model ùúΩùë°‚àíùúèùëñ , i.e., the server previously sent the global model ùúΩùë°‚àíùúèùëñ

to client ùëñ in the (ùë° ‚àí ùúèùëñ )th iteration. Moreover, in the ùë°th iteration, the server has a model update ùíàùë†ùë°‚àíùúèùë† based on its trusted dataset,
where ùúèùë† is the delay (called server delay) for the server model up-

date. Specifically, the server trains a local model via fine-tuning the global model ùúΩùë°‚àíùúèùë† using its trusted dataset, and the model update ùíàùë†ùë°‚àíùúèùë† is the difference between the global model ùúΩùë°‚àíùúèùë† and the local

model. We note that we assume the server model update can have

a delay ùúèùë† , i.e., the server is not required to compute the model

AFLGuard: Byzantine-robust Asynchronous Federated Learning

Algorithm 2 Our AFLGuard.

Server:

1: Initializes global model ùúΩ 0 ‚àà Œò and sends it to all clients.

2: for ùë° = 0, 1, 2, ¬∑ ¬∑ ¬∑ ,ùëá ‚àí 1 do

3: Upon receiving a model update ùíàùë°‚àíùúèùëñ from a client ùëñ, re-
ùëñ
trieves the server model update ùíàùë†ùë°‚àíùúèùë† .

4:

if

ùíàùë° ‚àíùúèùëñ
ùëñ

‚àí

ùíàùë†ùë° ‚àíùúèùë†

‚â§ ùúÜ ùíàùë†ùë°‚àíùúèùë†

then

5:

Updates the global model ùúΩùë°+1 = ùúΩùë° ‚àí ùúÇùíàùë°‚àíùúèùëñ .

ùëñ

6: else

7:

Does not update the global model, i.e., ùúΩùë°+1 = ùúΩùë° .

8: end if 9: Sends the global model ùúΩùë°+1 to client ùëñ.

10: end for

update using the global model ùúΩùë° in the ùë°th iteration. Instead, the

server can compute a model update in every ùúèùë† iterations.

The server accepts ùíàùë°‚àíùúèùëñ if i) the direction of ùíàùë°‚àíùúèùëñ does not

ùëñ

ùëñ

deviate dramatically from that of ùíàùë†ùë°‚àíùúèùë† and ii) the magnitude of

ùíàùë° ‚àíùúèùëñ
ùëñ

is

similar

to

that

of

ùíàùë†ùë°‚àíùúèùë† .

Formally,

the

server

accepts

ùíàùë° ‚àíùúèùëñ
ùëñ

if the following inequality is satisfied:

ùíàùë° ‚àíùúèùëñ
ùëñ

‚àí

ùíàùë†ùë° ‚àíùúèùë†

‚â§ ùúÜ ùíàùë†ùë°‚àíùúèùë† ,

(3)

where the parameter ùúÜ > 0 can be viewed as a control knob: if ùúÜ is too small, the server could potentially reject some model updates from benign clients; on the other hand, if ùúÜ is too large, the server could falsely accept some model updates from malicious clients. Fig. 2 illustrates our acceptance criteria. Once a client‚Äôs model update is accepted, the server uses it to update the global model based on Eq. (2).
Algorithm of AFLGuard: We summarize our AFLGuard algorithm in Algorithm 2. Note that Algorithm 2 only shows the learning procedure of AFLGuard on the server side. The learning procedure on the client side is the same as that of Algorithm 1 and thus we omit it for brevity. In the ùë°th iteration, the server decides whether to accept a client‚Äôs model update or not based on Eq. (3). If yes, the server uses it to update the global model and sends the updated global model back to the client. Otherwise the server does not update the global model and sends the current global model back to the client.

5 THEORETICAL SECURITY ANALYSIS

We theoretically analyze the security/robustness of AFLGuard. In

particular, we show that the difference between the optimal global model ùúΩ ‚àó under no malicious clients and the global model learnt

by AFLGuard with malicious clients can be bounded under some

assumptions. We note that simple models like regression can satisfy

these assumptions, while more complex models like neural net-

works may not. Therefore, in the next section, we will empirically

evaluate our method on complex neural networks.

For convenience, we define ùëΩ as the ùëë-dimensional unit vector

space ùëΩ

d=ef {v ‚àà Rùëë : ‚à•v‚à• = 1}, ‚àáùëì (ùúΩ, ùëã )

=

1 |ùëã |

ùë• ‚ààùëã ‚àáùëì (ùúΩ, ùë•),

and ùëû(ùúΩ, ùëã ) d=ef ‚àáùëì (ùúΩ, ùëã ) ‚àí ‚àáùëì (ùúΩ ‚àó, ùëã ). We use ùëãùë† to denote the

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

trusted dataset at the server. Next, we first state the assumptions in our theoretical analysis and then describe our theoretical results.

Assumption 1. The expected loss ùêπ (ùúΩ ) has ùêø-Lipschitz continuous gradients and is ùúá-strongly convex, i.e., ‚àÄùúΩ, ùúΩ ‚Ä≤ ‚àà Œò, the following inequalities hold:
‚àáùêπ (ùúΩ ) ‚àí ‚àáùêπ (ùúΩ ‚Ä≤) ‚â§ ùêø ùúΩ ‚àí ùúΩ ‚Ä≤ ,

ùêπ (ùúΩ) +

‚àáùêπ (ùúΩ ), ùúΩ ‚Ä≤ ‚àí ùúΩ

ùúá +

ùúΩ‚Ä≤ ‚àíùúΩ

2 ‚â§ ùêπ (ùúΩ ‚Ä≤).

2

Assumption 2. There exist constants ùõº1 > 0 and ùúå1 > 0 such that for any v ‚àà ùëΩ , ‚ü®‚àáùëì (ùúΩ ‚àó, ùëã ), v‚ü© is sub-exponential. That is, ‚àÄ |ùúë | ‚â§
1/ùúå1, we have:

sup E

exp ùúë

‚àá

ùëì

(ùúΩ

‚àó
,

ùëã

),

v

‚â§

ùõº 2ùúë 2 /2
ùëí1 .

v‚ààùëΩ

Assumption 3. There exist constants ùõº2 > 0, ùúå2 > 0 such that for any v ‚àà ùëΩ , ùúΩ ‚àà Œò and ùúΩ ‚â† ùúΩ ‚àó. ‚ü®ùëû(ùúΩ, ùëã ) ‚àí E [ùëû(ùúΩ, ùëã )] , v‚ü© /‚à•ùúΩ ‚àí ùúΩ ‚àó ‚à•
is sub-exponential. That is, ‚àÄ |ùúë | ‚â§ 1/ùúå2, we have:

sup E exp ùúë ‚ü®ùëû(ùúΩ, ùëã ) ‚àíE [ùëû(ùúΩ, ùëã )] , v‚ü©/ ùúΩ ‚àí ùúΩ ‚àó

‚â§

ùõº 2ùúë 2 /2
ùëí2 .

ùúΩ ‚ààŒò,v‚ààV

Assumption 4. For any ùõΩ ‚àà (0, 1), there exists a constant ùêª > 0 such that the following inequality holds:

Ô£±

Ô£¥ Ô£¥Ô£≤
P sup Ô£¥Ô£¥ùúΩ,ùúΩ ‚Ä≤ ‚ààŒò:ùúΩ ‚â†ùúΩ ‚Ä≤

1

‚àëÔ∏Å

‚àáùëì

(ùúΩ,

ùë•)

‚àí‚àáùëì

(ùúΩ

‚Ä≤
,

ùë•

)

|ùëãùë†

|
ùë•

‚ààùëãùë†

Ô£≥

‚â• 1 ‚àí ùõΩ/3.

Ô£º

‚â§ùêª

ùúΩ ‚àíùúΩ ‚Ä≤

Ô£¥ Ô£¥Ô£Ω

Ô£¥ Ô£¥ Ô£æ

Assumption 5. Clients‚Äô local training data are independent and identically distributed (i.i.d.). The trusted dataset held by the server and the overall training data are drawn from the same distribution, and the server delay ùúèùë† = 0.

Remark. Assumption 1 is satisfied in many learning models (e.g., linear regression and quadratically regularized models). Note that we only assume that the expected loss is strongly-convex, while the empirical loss could still be non-convex. Assumptions 2-3 characterize sub-exponential properties on the gradient vectors. Assumption 2 is a standard assumption in the literature on convergence analysis, while Assumptions 2 and 3 are also widely used in Byzantine-robust FL community (see, e.g., [16, 42, 56]). Assumption 4 is satisfied if the model/loss function is Lipschitz-smooth (e.g., regressions, neural networks). Assumption 5 is a sufficient condition only needed in our theoretical analysis, which characterizes the statistical relations between the server‚Äôs trusted dataset and the overall training data. Note that we only need these assumptions to provide theoretical analysis of our proposed AFLGuard, and these assumptions are commonly used in the machine learning and security communities in order to establish the convergence of the FL methods [9, 16, 56]. In practice, some of these assumptions may not hold, e.g., clients‚Äô local training data could be non-i.i.d., trusted data held by the server and the overall training data may come from different distributions. In Section 6, we will first use a synthetic dataset that satisfies all assumptions to evaluate the performance of our AFLGuard. Then, we will show that AFLGuard can still effectively defend against poisoning attacks in real-world datasets and complex models when some assumptions are violated. As a concrete example, the following lemma shows that linear regression

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

Minghong Fang, Jia Liu, Neil Zhenqiang Gong, and Elizabeth S. Bentley

models satisfy Assumptions 1-4 with appropriate parameters, and the proof is shown in Appendix A.1.

Lemma 5.1. Let ùë•ùëñ = (ùíñùëñ, ùë¶ùëñ ) be the input data and define the loss

function as

ùëì (ùúΩ, ùë•ùëñ )

=

(

‚ü®ùíñùëñ

,ùúΩ ‚ü©‚àíùë¶ùëñ 2

)2

.

Suppose

that

ùë¶ùëñ

is

generated by

a linear regression model ùë¶ùëñ = ‚ü®ùíñùëñ, ùúΩ ‚àó‚ü© + ùëíùëñ, where ùúΩ ‚àó is the unknown

true model, ùíñùëñ ‚àº ùëÅ (0, ùë∞ ), ùëíùëñ ‚àº ùëÅ (0, 1) and ùëíùëñ is independent of

ùíñùëñ . The linear regression model satisfies Assumptions 1-4 with the

following parameters: i) Assumption 1‚àöis satisfi‚àöed with ùêø = 1, ùúá = 1; ii) Assumption 2 is satis‚àöfied with ùõº1 = 2, ùúå1 = 2; iii) Assumption 3 is satisfied with ùõº2 = 8, ùúå2 = 8; and iv) Assumption 4 is satisfied

with

ùêª

=

2log ( 4/ùõΩ )

+

‚àöÔ∏Å 2ùëë

log(4/ùõΩ

)

+ ùëë.

The following theorem shows the security of AFLGuard:

Theorem 1. Suppose Assumptions 1-5 are satisfied. If the global

learning rate in Algorithm 2 satisfies ùúÇ

‚â§

2 ùúá+ùêø

and each client uses

one mini-batch to calculate the model update, then for any number

of malicious clients, with probability at least 1 ‚àí ùõΩ, we have:

ùúΩùë° ‚àí ùúΩ ‚àó ‚â§ (1 ‚àí ùëû)ùë° ùúΩ 0 ‚àí ùúΩ ‚àó + 4ùúÇŒì(ùúÜ + 1)/ùëû,

(4)

‚àöÔ∏É

where ùëû = 1‚àí (

1

‚àí

2ùúÇ ùúá ùêø ùúá+ùêø

+ùúÇùêøùúÜ + 8ùúÇ Œõ (ùúÜ + 1) ) ,

Œì

=

ùõº

‚àöÔ∏Å 1 2ùêæ1

/|ùëãùë†

|,

Œõ

=

ùõº2‚àöÔ∏Å2(ùêæ2 + ùêæ3)/|ùëãùë† |, ùêæ1 = ùëë log‚àö6 + log(3/ùõΩ), ùêæ2 = ùëë log(18ùëÖ/ùõº2),

ùêæ3

=

1 2

ùëë

log(

|ùëãùë†

|/ùëë

)

+ log

6ùõº

2
ùúñ

2

|ùëãùë† |

ùúå2ùõº1ùõΩ

, ùëÖ = max {ùêø, ùêª }, ùúñ > 0 is a

constant, ùëë is the dimension of ùúΩ , and |ùëãùë† | is the trusted dataset size.

Proof. Please see Appendix A.2.

‚ñ°

Remark. Our Theorem 1 shows that the convergence of AFLGuard does not require the trusted dataset size to depend on the number of model parameters, the client dataset sizes, and the number of malicious clients. The trusted dataset size affects the convergence neighborhood size (the second term on the right-hand-side of Eq. (4)). The larger the trusted dataset size, the smaller the convergence neighborhood.

6 EMPIRICAL EVALUATION 6.1 Experimental Setup
6.1.1 Compared Methods. We compare our AFLGuard with the following asynchronous methods: 1) AsyncSGD [58]: In AsyncSGD, the server updates the global model according to Algorithm 1 upon receiving a model update from any client. 2) Kardam [17]: In Kardam, the server keeps an empirical Lipschitz coefficient for each client, and filters out potentially malicious model updates based on the Lipschitz filter. 3) BASGD [55]: In BASGD, the server holds several buffers. Upon receiving a model update from any client, the server stores it into one of these buffers according to a mapping table. When all buffers are non-empty, the server computes the average of model updates in each buffer, takes the median of all buffers, and uses it to update the global model. 4) Zeno++ [53]: In Zeno++, the server has a trusted dataset. Upon receiving a client‚Äôs model update, the server computes a server model update based on the trusted dataset. If the cosine similarity between the server model update and the client‚Äôs model update is

positive, then the server normalizes the client‚Äôs model update to have the same magnitude as the server model update and uses the normalized model update to update the global model.

6.1.2 Datasets. We evaluate AFLGuard and the compared methods using one synthetic dataset and five real-world datasets (MNIST, Fashion-MNIST, Human Activity Recognition (HAR), Colorectal Histology MNIST, CIFAR-10). The synthetic dataset is for linear regression, which satisfies the Assumptions 1-4 in Section 5 and is used to validate our theoretical results. Other datasets are used to train complex models, which aim to show the effectiveness of AFLGuard even if the Assumptions 1-4 are not satisfied. The details of these datasets are shown in Appendix A.3 due to limited space.

6.1.3 Poisoning Attacks. We use the following poisoning attacks in our experiments. 1) Label flipping (LF) attack [56]: In the LF attack, the label ùë¶ of each training example in the malicious clients is replaced by ùê∂ ‚àí 1 ‚àí ùë¶, where ùê∂ is the total number of classes. For instance, for the MNIST dataset, digit ‚Äú1‚Äù is replaced by digit ‚Äú8‚Äù. 2) Gaussian (Gauss) attack [7]: In the Gauss attack, each model update from malicious clients is drawn from a zero-mean Gaussian distribution (we set the standard deviation to 200). 3) Gradient derivation (GD) attack [18]: In the GD attack adapted from [18], a malicious client computes a model update based on its local training data and then scales it by a negative constant (‚àí10 in our experiments) before sending it to the server. 4) Backdoor (BD) attack [5, 9, 23]: BD attack is a targeted poisoning attack. We use the same strategy in [23] to embed the trigger in MNIST, Fashion-MNIST and Colorectal Histology MNIST datasets. Following [9], the target label is set to ‚ÄúWALKING UPSTAIRS‚Äù and the trigger is generated by setting every 20th feature to 0 for the HAR dataset. For the CIFAR-10 dataset, the target label is set to ‚Äúbird‚Äù and we use the same pattern trigger as suggested in [5]. 5) Adaptive (Adapt) attack: In [18], a general adaptive attack framework is proposed to attack FL with any aggregation rule. We apply this attack framework to construct an adaptive attack to our AFLGuard. In particular, the attack framework is designed for synchronized FL, in which the server aggregates model updates from multiple clients to update the global model. The key idea is to craft model updates at the malicious clients such that the aggregated model update deviates substantially from the beforeattack one. To apply this general attack framework to AFLGuard, we assume that the server accepts or rejects a client‚Äôs model update based on AFLGuard and computes the average of the accepted model updates. Then, we craft the model updates on the malicious clients based on the attack framework.

6.1.4 Evaluation Metrics. For the synthetic dataset, we use the

following two evaluation metrics since it is a regression prob-

lem: i) Mean Squared Error (MSE): MSE is computed as MSE =

1 ùëÅùë°

ùëÅùë° ùëñ =1

(ùë¶ÀÜùëñ

‚àí ùë¶ùëñ )2,

where

ùë¶ÀÜùëñ

is

the

predicted

value,

ùë¶ùëñ

is

the

true

value, and ùëÅùë° is the number of testing examples; ii) Model Estima-

tion Error (MEE): MEE is computed as MEE = ‚à•ùúΩÀÜ ‚àí ùúΩ ‚àó ‚à•2, where ùúΩÀÜ is

the learnt model and ùúΩ ‚àó is the true model. MEE is commonly used

in measuring the performance of linear regression [24, 45]. The five

real-world datasets represent classification tasks, and we consider

AFLGuard: Byzantine-robust Asynchronous Federated Learning

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

Table 1: MSE and MEE of different defenses under different attacks on synthetic dataset. The results are in the form of ‚ÄúMSE / MEE‚Äù. ‚Äú> 1000‚Äù means the value is larger than 1000.

No attack LF attack Gauss attack GD attack Adapt attack

AsyncSGD 0.03 / 0.18 21.05 / 25.75 0.78 / 4.82 ‚Äú> 1000‚Äù / ‚Äú> 1000‚Äù ‚Äú> 1000‚Äù / ‚Äú> 1000‚Äù

Kardam 0.03 / 0.18 0.04 / 0.60 0.03 / 0.36 30.14 / 30.65 ‚Äú> 1000‚Äù / ‚Äú> 1000‚Äù

BASGD 0.09 / 1.43 16.71 / 22.70 0.85 / 5.32 ‚Äú> 1000‚Äù / ‚Äú> 1000‚Äù ‚Äú> 1000‚Äù / ‚Äú> 1000‚Äù

Zeno++ 0.03 / 0.40 0.03 / 0.40 0.03 / 0.40 0.03 / 0.40 0.03 / 0.42

AFLGuard 0.03 / 0.18 0.03 / 0.18 0.03 / 0.18 0.03 / 0.18 0.03 / 0.18

Table 2: Test error rates and attack success rates of different defenses under different attacks on real-world datasets. The results of BD attack are in the form of ‚Äútest error rate / attack success rate‚Äù.

(a) MNIST

AsyncSGD Kardam BASGD Zeno++ AFLGuard

No attack 0.05

0.12

0.19

0.08

0.06

LF attack 0.09

0.15

0.26

0.09

0.07

Gauss attack 0.91

0.39

0.27

0.09

0.07

GD attack 0.90

0.90

0.89

0.09

0.07

BD attack 0.90 / 1.00 0.91 / 1.00 0.91 / 1.00 0.09 / 0.01 0.07 / 0.01

Adapt attack 0.91

0.91

0.90

0.10

0.07

(b) Fashion-MNIST

AsyncSGD Kardam BASGD Zeno++ AFLGuard

No attack 0.15

0.29

0.24

0.26

0.17

LF attack 0.19

0.29

0.24

0.29

0.21

Gauss attack 0.90

0.29

0.35

0.28

0.19

GD attack 0.90

0.90

0.90

0.29

0.21

BD attack 0.90 / 1.00 0.90 / 1.00 0.90 / 1.00 0.29 / 0.05 0.20 / 0.04

Adapt attack 0.90

0.90

0.90

0.29

0.21

(c) HAR

AsyncSGD Kardam BASGD Zeno++ AFLGuard

No attack 0.05

0.06

0.07

0.06

0.05

LF attack 0.19

0.22

0.08

0.08

0.05

Gauss attack 0.30

0.23

0.24

0.07

0.05

GD attack 0.83

0.48

0.67

0.08

0.05

BD attack 0.18 / 0.47 0.17 / 0.02 0.41 / 0.28 0.07 / 0.01 0.05 / 0.01

Adapt attack 0.93

0.52

0.90

0.08

0.05

(d) Colorectal Histology MNIST

AsyncSGD Kardam BASGD Zeno++ AFLGuard

No attack 0.21

0.28

0.29

0.31

0.22

LF attack 0.29

0.37

0.40

0.39

0.23

Gauss attack 0.65

0.44

0.61

0.43

0.22

GD attack 0.87

0.68

0.87

0.39

0.32

BD attack 0.75 / 0.84 0.67 / 0.02 0.85 / 0.84 0.44 / 0.02 0.27 / 0.02

Adapt attack 0.88

0.88

0.88

0.64

0.33

(e) CIFAR-10

AsyncSGD Kardam BASGD Zeno++ AFLGuard

No attack 0.26

0.29

0.47

0.41

0.26

LF attack 0.40

0.52

0.54

0.53

0.34

Gauss attack 0.88

0.63

0.81

0.52

0.33

GD attack 0.90

0.90

0.90

0.60

0.30

BD attack 0.76 / 0.99 0.82 / 1.00 0.74 / 0.98 0.49 / 0.06 0.29 / 0.01

Adapt attack 0.90

0.90

0.90

0.82

0.36

the following two evaluation metrics: 1) test error rate, which is the fraction of clean testing examples that are misclassified; and 2) attack success rate, which is the fraction of trigger-embedded testing inputs that are predicted as the attacker-chosen target label. Note that attack success rate is only applicable for targeted poisoning attack (i.e., BD attack in our experiments). The smaller the error (MSE, MEE, or test error rate) and attack success rate, the better the defense. Note that we do not consider targeted poisoning attacks on synthetic dataset since there are no such attacks designed for linear regression.
6.1.5 Parameter Setting. We assume 100 clients (ùëõ = 100) for synthetic, MNIST, and Fashion-MNIST datasets, and 40 clients (ùëõ = 40) for Colorectal Histology MNIST and CIFAR-10 datasets. The HAR dataset is collected from smartphones of 30 real-world users, and each user is considered as a client. Thus, there are 30 clients (ùëõ = 30) in total for HAR. By default, we assume 20% of the clients are malicious. We train a convolutional neural network (CNN) on MNIST and Fashion-MNIST datasets, and its architecture is shown in Table 4 in Appendix. We train a logistic regression classifier on HAR dataset. We train a ResNet-20 [25] model for Colorectal Histology MNIST and CIFAR-10 datasets. We set 2,000, 2,000, 6,000, 1,000, 20,000 and 20,000 iterations for synthetic, MNIST, Fashion-MNIST, HAR, Colorectal Histology MNIST and CIFAR-10 datasets, respectively. The batch sizes for the six datasets are 16, 32, 64, 32, 32 and 64, respectively. The learning rates are set to 1/1600, 1/320 for synthetic and HAR datasets, respectively; and are set to 1/3200 for the other four datasets. We use different parameters for different datasets because they have different data statistics. In the synthetic dataset, we assume the clients‚Äô local training data are i.i.d. However, the local training data non-i.i.d. across clients in the five real-world datasets. In particular, we use the approach in [18] to simulate the non-i.i.d. setting. The non-i.i.d. degree is set to 0.5 for MNIST, Fashion-MNIST, Colorectal Histology MNIST, and CIFAR-10 datasets. Note that each user is a client in HAR dataset, and thus the clients‚Äô local training data are already heterogeneous for HAR.
In AFLGuard, the trusted dataset size is set to 100 for all six datasets. By default, for the synthetic data, we assume that the trusted dataset held by the server and the overall training data are generated from the same distribution. For the real-world datasets, we do not make this assumption. We will empirically show that our method works well even if the distribution of trusted data deviates from that of the overall training data, i.e., there exists a distribution shift (DS) between these two datasets. The larger the DS, the larger the deviation between the trusted and overall training datasets. In our experiments, we simulate DS in the following way: a fraction of samples in the trusted dataset are drawn from one particular

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

Minghong Fang, Jia Liu, Neil Zhenqiang Gong, and Elizabeth S. Bentley

Test error rate

AsyncSGD w/o attacks

AsyncSGD

Kardam

BASGD

Zeno++

AFLGuard

1.0

1.0

1.0

Test error rate

Attack success rate Test error rate

0.8

0.8

0.8

0.6

0.6

0.6

0.4

0.4

0.4

0.2

0.2

0.2

0.0F0ractio1n0 of m20alicio3u0s clie4n0ts (%45) 0.0F0ractio1n0 of m20alicio3u0s clie4n0ts (%45) 0.0F0ractio1n0 of m20alicio3u0s clie4n0ts (%45)

(a) LF attack

(b) Gauss attack

(c) GD attack

1.0

1.0

1.0

Test error rate

0.8

0.8

0.8

0.6

0.6

0.6

0.4

0.4

0.4

0.2

0.2

0.2

0.0F0ractio1n0 of m20alicio3u0s clie4n0ts (%45) 0.0F0ractio1n0 of m20alicio3u0s clie4n0ts (%45) 0.0F0ractio1n0 of m20alicio3u0s clie4n0ts (%45)

(d) BD attack

(e) BD attack

(f) Adapt attack

Test error rate

Figure 3: Test error rates and attack success rates of different defenses under different attacks with different fraction of malicious clients on MNIST dataset.

class (the first class in our experiments) of the overall training data, and the remaining samples in the trusted dataset are drawn from the remaining classes of the overall training data uniformly at random. We use this fraction value as a proxy for DS. Note that when the trusted and overall training datasets are drawn from the same distribution, DS is equal to 1/ùê∂, where ùê∂ is the total number of classes. By default, we set DS to 0.5 for the five real-world datasets.
In our experiments, we use a separate validation dataset to tune the parameter ùúÜ in AFLGuard. Note that this validation dataset is different from the trusted dataset held by the server. We use the validation dataset to tune the hyperparameter of AFLGuard, while the server in AFLGuard uses the trusted dataset to filter out potential malicious information. The size of the validation dataset is 200. The validation data and the overall training data (the union of the local training data of all clients) are from the same distribution. For example, there are 10 classes in MNIST dataset. We sample 20 training examples from each class of the overall training data uniformly at random. After fine tuning the parameter, we set ùúÜ = 1.5 for synthetic, MNIST, and HAR datasets, and ùúÜ = 1.8 for the other three datasets. The server updates ùíàùë†ùë°‚àíùúèùë† every 10 (ùúèùë† = 10) iterations by default. We use the approach in [53] to simulate asynchrony. We sample client delay from the interval [0, ùúèmax] uniformly at random, where ùúèmax is the maximum client delay. We set ùúèmax = 10 by default.
6.2 Experimental Results
AFLGuard is Effective: We first show results on the linear regression model for synthetic dataset, which satisfies Assumptions 1-4 in Section 5 to support our theoretical results. The MSE and MEE of different methods under different attacks on synthetic dataset are shown in Table 1. We observe that AFLGuard is robust in both non-adversarial and adversarial settings. In particular, the MSE and MEE of AFLGuard under various attacks are the same as those of AsyncSGD without attacks. Moreover, we also observe that AFLGuard outperforms the compared methods. For instance, the MSE and MEE of BASGD are both larger than 1,000 under the GD and Adapt attacks.

Next, we show results on the five real-world datasets. The test error rates and attack success rates of different methods under different attacks are shown in Table 2. ‚ÄúNo attack‚Äù in Table 2 represents the test error rate without any attacks. For the untargeted poisoning attacks (LF attack, Gauss attack, GD attack, and Adapt attack), the results are the test error rates; and for the targeted poisoning attacks (BD attack), the results are in the form of ‚Äútest error rate / attack success rate‚Äù. We note that only using the trusted data held by the server to update the global model can not achieve satisfactory accuracy. For instance, the test error rate is 0.21 when we only use the trusted data of the server to update the global model on the MNIST dataset. We also remark that our asynchronous AFLGuard algorithm achieves a performance similar to its synchronous counterpart. For instance, on MNIST, the test error rates of synchronous AFLGuard under LF, Gauss, and GD attacks are all 0.05.
First, we observe that AFLGuard is effective in non-adversarial settings. When there are no malicious clients, AFLGuard has similar test error rate as AsyncSGD. For instance, on MNIST, the test error rates without attacks are respectively 0.05 and 0.06 for AsyncSGD and AFLGuard, while the test error rates are respectively 0.12 and 0.19 for Kardam and BASGD. Second, AFLGuard is robust against various poisoning attacks and outperforms all baselines. For instance, the test error rate of Kardam increases to 0.90 under the GD attack on the MNIST and Fashion-MNIST datasets, while the test error rates are 0.07 and 0.21 for AFLGuard under the same setting. Likewise, the attack success rates of AFLGuard are at most 0.04 for all real-world datasets, while the attack success rates of AsyncSGD, Kardam, and BASGD are high. Note that in Table 1, we use synthetic data that satisfies Lemma 5.1 to evaluate the performance of our AFLGuard. Since the variance of the synthetic data is small, Zeno++ and AFLGuard have similar MSE and MEE. However, Table 2 shows that, for real-world datasets, AFLGuard significantly outperforms Zeno++.
Impact of the Fraction of Malicious Clients: Fig. 3 illustrates the test error rates and attack success rates of different methods

AFLGuard: Byzantine-robust Asynchronous Federated Learning

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

Test error rate

AsyncSGD w/o attacks 1.0 0.8 0.6 0.4 0.2 0.05 10 1C5lien2t0dela2y5 30
(a) LF attack 1.0 0.8 0.6 0.4 0.2 0.05 10 1C5lien2t0dela2y5 30
(d) BD attack

Attack success rate Test error rate

AsyncSGD 1.0 0.8 0.6 0.4 0.2
50 0.05 1.0 0.8 0.6 0.4 0.2
50 0.05

Kardam

BASGD

1.0

Test error rate

0.8

0.6

0.4

0.2

10 1C5lien2t0dela2y5 30 50 0.05

(b) Gauss attack

1.0

Test error rate

0.8

0.6

0.4

0.2

10 1C5lien2t0dela2y5 30 50 0.05

(e) BD attack

Zeno++

AFLGuard

10 1C5lien2t0dela2y5 30 50 (c) GD attack

10 1C5lien2t0dela2y5 30 50 (f) Adapt attack

Test error rate

Figure 4: Test error rates and attack success rates of different defenses under different attacks with different client delays on

MNIST dataset.

Test error rate

AsyncSGD w/o attacks

Zeno++

1.0

1.0

Attack success rate Test error rate

0.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0.010 20 (S3ae0)rLvFe5r0adtetal8ac0yk 100 200 0.010 20(b)S3Ge0ravue5sr0sdaelt8at0ayck100 200

1.0

1.0

0.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0.010 20 (S3de0)rBvDe5r0adtetla8ac0yk 100 200 0.010 20 (S3ee0)rBvDe5r0adtetla8ac0yk 100 200

Test error rate

Test error rate

AFLGuard 1.0 0.8 0.6 0.4 0.2 0.010 20 (S3c)e0rGvDe5r0adtetla8ac0yk 100 200 1.0 0.8 0.6 0.4 0.2 0.010 20 (f)S3Ae0drvae5pr0tdaetl8taa0yck100 200

Test error rate

Figure 5: Test error rates and attack success rates of Zeno++ and AFLGuard under different attacks with different server delays

on MNIST dataset.

Test error rate

1.0 0.8 0.6

AsyncSGD w/o attacks LF attack Gauss attack

0.4 0.2

GD attack BD attack Adapt attack

0.00.5 1.0 1.2 1.5 2.0 3.0 5.0

(a) Test error rate

Attack success rate

1.0 0.8 0.6

AsyncSGD w/o attacks BD attack

0.4

0.2

0.00.5 1.0 1.2 1.5 2.0 3.0 5.0

(b) Attack success rate

Test error rate Attack success rate

1.0 0.8 0.6

AsyncSGD w/o attacks LF attack Gauss attack

0.4 0.2

GD attack BD attack Adapt attack

0.050 S1i(z0ae0)oTf1et5srut0setre2rd0o0rdarat3at0se0et 400

1.0 0.8 0.6

AsyncSGD w/o attacks BD attack

0.4

0.2

0.050 (bS1)iz0Ae0totaf1ct5rku0sstue2cd0c0edasst3a0rsa0ette400

Figure 6: Test error rates and attack success rates of AFLGuard under different attacks with different ùúÜ on MNIST dataset.
under different attacks on the MNIST dataset, when the fraction of malicious clients increases from 0 to 45%. Note that Fig. 3(e) shows the attack success rates of different defenses under BD attack, while other figures are the test error rates of different defenses under untargeted and targeted poisoning attacks. We observe that

Figure 7: Test error rates and attack success rates of AFLGuard under different attacks with different size of trusted dataset on MNIST dataset.
AFLGuard achieves a test error rate similar to that of AsyncSGD without attacks, when 45% of clients are malicious. This shows that AFLGuard is robust against a large fraction of malicious clients. Impact of the Number of Clients: Fig. 8 in Appendix shows the results of different defenses under different attacks, when the total

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

Minghong Fang, Jia Liu, Neil Zhenqiang Gong, and Elizabeth S. Bentley

Table 3: Test error rates and attack success rates of Zeno++ and AFLGuard under different attacks with different distribution shifts (DSs) between the trusted data and overall training data on MNIST dataset. The results of BD attack are in the form of ‚Äútest error rate / attack success rate‚Äù.

DS Attack No attack LF attack Gauss attack GD attack BD attack Adapt attack

0.1

Zeno++ AFLGuard

0.05

0.05

0.07

0.05

0.07

0.05

0.07

0.06

0.06 / 0.01 0.05 / 0.01

0.07

0.06

0.5

Zeno++ AFLGuard

0.08

0.06

0.09

0.07

0.09

0.07

0.09

0.07

0.09 / 0.01 0.07 / 0.01

0.10

0.07

0.6

Zeno++ AFLGuard

0.10

0.06

0.12

0.07

0.12

0.07

0.12

0.07

0.11 / 0.01 0.07 / 0.01

0.12

0.08

0.8

Zeno++ AFLGuard

0.55

0.06

0.86

0.07

0.59

0.07

0.78

0.08

0.55 / 0.03 0.08 / 0.01

0.88

0.10

1.0

Zeno++ AFLGuard

0.88

0.11

0.89

0.11

0.89

0.12

0.89

0.12

0.90 / 0.01 0.11 / 0.01

0.90

0.12

number of clients ùëõ varies from 50 to 500. The fraction of malicious clients is set to 20%. We observe that our AFLGuard can effectively defend against various poisoning attacks for different number of clients. In particular, AFLGuard under attacks achieves test error rates similar to AsyncSGD without attack.
Impact of the Client Delay: A challenge and key feature in asynchronous FL is the delayed client model updates. In this experiment, we investigate the impact of the maximum client delays ùúèmax on the test error rate of different defenses under different attacks on the MNIST dataset, where the server delay is set to 10. The results are shown in Fig. 4. We observe that AFLGuard is insensitive to the delays on the client side, and the test error rates remain almost unchanged when the client delay varies from 5 to 50. However, Kardam and BASGD are highly sensitive to client delays. For example, under the Gauss attack, the test error rate of Kardam increases from 0.14 to 0.39 when the client delay increases from 5 to 10. Moreover, under the GD and Adapt attacks, the test error rates of Kardam and BASGD are both 0.90 when the client delay is only 5.
Impact of the Server Delay: In both Zeno++ and our AFLGuard, the server uses server model update. In this experiment, we investigate the impact of server delays on the performance of Zeno++ and AFLGuard under different attacks, where the maximum client delay is set to 10. The results are shown in Fig. 5. We observe that AFLGuard can effectively defend against various poisoning attacks with different server delays. AFLGuard under attacks has test error rates similar to those of AsyncSGD under no attacks when the server delay ranges from 10 to 200. However, Zeno++ is highly sensitive to server delays. For instance, Zeno++ can only resist the Adapt attack up to 80 server delays.
Impact of ùúÜ: Fig. 6 shows the test error rates and attack success rates of AFLGuard under different attacks with different ùúÜ values on the MNIST dataset. We observe that if ùúÜ is too small (e.g., ùúÜ = 0.5), the test error rate of AFLGuard is large since the server rejects many benign model updates. When ùúÜ is large (e.g., ùúÜ = 5.0), the test error rates of AFLGuard under the GD and Adapt attacks are large. This is because the server falsely accepts some model updates from malicious clients.
Impact of the Trusted Dataset: The trusted dataset can be characterized by its size and distribution. Therefore, we explore the impact of both its size and distribution. Fig. 7 shows the results of AFLGuard under different attacks on the MNIST dataset, when the size of the trusted dataset increases from 50 to 400 (other parameters are set to their default values). We find that AFLGuard

only requires a small trusted dataset (e.g., 100 examples) to defend against different attacks.
Table 3 shows the results of Zeno++ and AFLGuard under different attacks when the DS value between the trusted data and overall training data varies on the MNIST dataset. The results on the other four real-world datasets are shown in Table 5 in Appendix. Note that, for the synthetic data, we assume that the trusted data and the overall training data are generated from the same distribution. Thus, there is no need to study the impact of DS on synthetic data. First, we observe that AFLGuard outperforms Zeno++ across different DS values in most cases, especially when DS is large. This is because Zeno++ classifies a client‚Äôs model update as benign if it is not negatively correlated with the (delayed) server model update. However, when the trusted dataset deviates substantially from the overall training dataset, it is very likely that the server model update and the model updates from benign clients are not positively correlated. Second, AFLGuard outperforms Zeno++ even if the trusted data has the same distribution as that of overall training data (corresponding to DS being 0.1 for MNIST, Fashion-MNIST and CIFAR-10 datasets, 0.167 for HAR dataset, and 0.125 for Colorectal Histology MNIST dataset). Third, AFLGuard can tolerate a large DS value, which means that AFLGuard does not require the trusted dataset to have similar distribution with the overall training data.
7 CONCLUSION AND FUTURE WORK
In this paper, we propose a Byzantine-robust asynchronous FL framework called AFLGuard to defend against poisoning attacks in asynchronous FL. In AFLGuard, the server holds a small and clean trusted dataset to assist the filtering of model updates from malicious clients. We theoretically analyze the security guarantees of AFLGuard. We extensively evaluate AFLGuard against state-ofthe-art and adaptive poisoning attacks on one synthetic and five real-world datasets. Our results show that AFLGuard effectively mitigates poisoning attacks and outperforms existing Byzantinerobust asynchronous FL methods. One interesting future work is to investigate the cases where the server has no knowledge of the training data domain.
ACKNOWLEDGMENTS
We thank the anonymous reviewers and shepherd Briland Hitaj for their constructive comments. This work was supported by NSF grant CAREER CNS-2110259, CNS-2112471, CNS-2102233, CNS2131859, CNS-2112562, CNS-2125977 and CCF-2110252, as well as ARO grant No. W911NF2110182.

AFLGuard: Byzantine-robust Asynchronous Federated Learning
REFERENCES
[1] [n.d.]. Federated Learning: Collaborative Machine Learning without Centralized Training Data. https://ai.googleblog.com/2017/04/federated-learningcollaborative.html
[2] [n.d.]. Making federated learning faster and more scalable: A new asynchronous method. https://ai.facebook.com/blog/asynchronous-federated-learning/
[3] Mart√≠n Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen,
Craig Citro, Greg S Corrado, Andy Davis, Jeffrey Dean, Matthieu Devin, et al.
2016. Tensorflow: Large-scale machine learning on heterogeneous distributed systems. arXiv preprint arXiv:1603.04467 (2016). [4] Davide Anguita, Alessandro Ghio, Luca Oneto, Xavier Parra Perez, and Jorge Luis
Reyes Ortiz. 2013. A public domain dataset for human activity recognition using smartphones. In ESANN. [5] Eugene Bagdasaryan, Andreas Veit, Yiqing Hua, Deborah Estrin, and Vitaly Shmatikov. 2020. How to backdoor federated learning. In AISTATS. [6] Arjun Nitin Bhagoji, Supriyo Chakraborty, Prateek Mittal, and Seraphin Calo. 2019. Analyzing federated learning through an adversarial lens. In ICML. [7] Peva Blanchard, El Mahdi El Mhamdi, Rachid Guerraoui, and Julien Stainer.
2017. Machine learning with adversaries: Byzantine tolerant gradient descent. In NeurIPS. [8] S√©bastien Bubeck. 2014. Convex optimization: Algorithms and complexity. arXiv preprint arXiv:1405.4980 (2014). [9] Xiaoyu Cao, Minghong Fang, Jia Liu, and Neil Zhenqiang Gong. 2021. FLTrust: Byzantine-robust Federated Learning via Trust Bootstrapping. In NDSS. [10] Xiaoyu Cao and Neil Zhenqiang Gong. 2022. MPAF: Model Poisoning Attacks to Federated Learning based on Fake Clients. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. 3396‚Äì3404. [11] Xiaoyu Cao, Jinyuan Jia, and Neil Zhenqiang Gong. 2021. Provably Secure Federated Learning against Malicious Clients. In AAAI. [12] Xinyang Cao and Lifeng Lai. 2019. Distributed gradient descent algorithm robust to an arbitrary number of byzantine attackers. In IEEE Transactions on Signal Processing. [13] Tianyi Chen, Xiao Jin, Yuejiao Sun, and Wotao Yin. 2020. Vafl: a method of vertical asynchronous federated learning. arXiv preprint arXiv:2007.06081 (2020). [14] Xinyun Chen, Chang Liu, Bo Li, Kimberly Lu, and Dawn Song. 2017. Targeted backdoor attacks on deep learning systems using data poisoning. arXiv preprint arXiv:1712.05526 (2017). [15] Yujing Chen, Yue Ning, Martin Slawski, and Huzefa Rangwala. 2020. Asynchronous online federated learning for edge devices with non-iid data. In Big Data. [16] Yudong Chen, Lili Su, and Jiaming Xu. 2017. Distributed Statistical Machine Learning in Adversarial Settings: Byzantine Gradient Descent. In POMACS. [17] Georgios Damaskinos, Rachid Guerraoui, Rhicheek Patra, Mahsa Taziki, et al. 2018. Asynchronous Byzantine machine learning (the case of SGD). In ICML. [18] Minghong Fang, Xiaoyu Cao, Jinyuan Jia, and Neil Gong. 2020. Local model poisoning attacks to Byzantine-robust federated learning. In 29th {USENIX} Security Symposium ({USENIX} Security 20). 1605‚Äì1622. [19] Minghong Fang, Neil Zhenqiang Gong, and Jia Liu. 2020. Influence function based data poisoning attacks to top-n recommender systems. In Proceedings of The Web Conference. [20] Minghong Fang, Minghao Sun, Qi Li, Neil Zhenqiang Gong, Jin Tian, and Jia
Liu. 2021. Data poisoning attacks and defenses to crowdsourcing systems. In Proceedings of The Web Conference. [21] Minghong Fang, Guolei Yang, Neil Zhenqiang Gong, and Jia Liu. 2018. Poisoning attacks to graph-based recommender systems. In ACSAC. [22] Clement Fung, Chris JM Yoon, and Ivan Beschastnikh. 2020. The limitations of federated learning in sybil settings. In 23rd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2020). 301‚Äì316. [23] Tianyu Gu, Brendan Dolan-Gavitt, and Siddharth Garg. 2017. Badnets: Identifying vulnerabilities in the machine learning model supply chain. arXiv preprint arXiv:1708.06733 (2017). [24] Nirupam Gupta and Nitin H Vaidya. 2019. Byzantine fault tolerant distributed linear regression. arXiv preprint arXiv:1903.08752 (2019). [25] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep residual learning for image recognition. In CVPR. [26] Dzmitry Huba, John Nguyen, Kshitiz Malik, Ruiyu Zhu, Mike Rabbat, Ashkan
Yousefpour, Carole-Jean Wu, Hongyuan Zhan, Pavel Ustinov, Harish Srinivas, et al. 2022. Papaya: Practical, private, and scalable federated learning. Proceedings of Machine Learning and Systems 4 (2022), 814‚Äì832. [27] Peter Kairouz, H Brendan McMahan, Brendan Avent, Aur√©lien Bellet, Mehdi Ben-
nis, Arjun Nitin Bhagoji, Kallista Bonawitz, Zachary Charles, Graham Cormode,
Rachel Cummings, et al. 2019. Advances and open problems in federated learning. arXiv preprint arXiv:1912.04977 (2019). [28] Jakob Nikolas Kather, Cleo-Aron Weis, Francesco Bianconi, Susanne M Melchers,
Lothar R Schad, Timo Gaiser, Alexander Marx, and Frank Gerrit Z√∂llner. 2016. Multi-class texture analysis in colorectal cancer histology. Scientific reports 6 (2016), 27988.

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA
[29] Alex Krizhevsky, Geoffrey Hinton, et al. 2009. Learning multiple layers of features
from tiny images. (2009).
[30] Yann LeCun, Corinna Cortes, and CJ Burges. 1998. MNIST handwritten digit database. Available: http://yann. lecun. com/exdb/mnist (1998).
[31] Bo Li, Yining Wang, Aarti Singh, and Yevgeniy Vorobeychik. 2016. Data poisoning attacks on factorization-based collaborative filtering. In NeurIPS.
[32] Brendan McMahan, Eider Moore, Daniel Ramage, Seth Hampson, and
Blaise Aguera y Arcas. 2017. Communication-efficient learning of deep networks from decentralized data. In AISTATS. [33] El Mahdi El Mhamdi, Rachid Guerraoui, and S√©bastien Rouault. 2018. The hidden vulnerability of distributed learning in byzantium. In ICML. [34] Chenglin Miao, Qi Li, Lu Su, Mengdi Huai, Wenjun Jiang, and Jing Gao. 2018.
Attack under disguise: An intelligent data poisoning attack mechanism in crowdsourcing. In Proceedings of The Web Conference. [35] Luis Mu√±oz-Gonz√°lez, Kenneth T Co, and Emil C Lupu. 2019. Byzantine-robust federated machine learning through adaptive model averaging. arXiv preprint arXiv:1909.05125 (2019). [36] John Nguyen, Kshitiz Malik, Hongyuan Zhan, Ashkan Yousefpour, Mike Rab-
bat, Mani Malek, and Dzmitry Huba. 2022. Federated learning with buffered asynchronous aggregation. In AISTATS. [37] Thien Duc Nguyen, Phillip Rieger, Huili Chen, Hossein Yalame, Helen M√∂llering,
Hossein Fereidooni, Samuel Marchal, Markus Miettinen, Azalia Mirhoseini, Shaza Zeitouni, et al. 2022. FLAME: Taming Backdoors in Federated Learning. In USENIX Security Symposium. [38] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory
Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. 2019. Pytorch: An imperative style, high-performance deep learning library. In NeurIPS. [39] Benjamin IP Rubinstein, Blaine Nelson, Ling Huang, Anthony D Joseph, Shing-
hon Lau, Satish Rao, Nina Taft, and J Doug Tygar. 2009. Antidote: understanding and defending against poisoning of anomaly detectors. In IMC. [40] Ali Shafahi, W Ronny Huang, Mahyar Najibi, Octavian Suciu, Christoph Studer,
Tudor Dumitras, and Tom Goldstein. 2018. Poison frogs! targeted clean-label poisoning attacks on neural networks. In NeurIPS. [41] Virat Shejwalkar and Amir Houmansadr. 2021. Manipulating the Byzantine:
Optimizing Model Poisoning Attacks and Defenses for Federated Learning. In NDSS. [42] Lili Su and Jiaming Xu. 2019. Securing distributed gradient descent in high dimensional statistical learning. In POMACS. [43] Ziteng Sun, Peter Kairouz, Ananda Theertha Suresh, and H Brendan McMahan. 2019. Can you really backdoor federated learning? arXiv preprint arXiv:1911.07963 (2019).
[44] Rashish Tandon, Qi Lei, Alexandros G Dimakis, and Nikos Karampatziakis. 2017. Gradient coding: Avoiding stragglers in distributed learning. In ICML.
[45] Berkay Turan, Cesar A Uribe, Hoi-To Wai, and Mahnoosh Alizadeh. 2021. Robust Distributed Optimization With Randomly Corrupted Gradients. arXiv preprint arXiv:2106.14956 (2021).
[46] Marten van Dijk, Nhuong V Nguyen, Toan N Nguyen, Lam M Nguyen, Quoc Tran-
Dinh, and Phuong Ha Nguyen. 2020. Asynchronous Federated Learning with
Reduced Number of Rounds and with Differential Privacy from Less Aggregated Gaussian Noise. arXiv preprint arXiv:2007.09208 (2020). [47] Roman Vershynin. 2010. Introduction to the non-asymptotic analysis of random matrices. arXiv preprint arXiv:1011.3027 (2010). [48] Martin J Wainwright. 2019. High-dimensional statistics: A non-asymptotic view-
point, Vol. 48. Cambridge University Press.
[49] Hongyi Wang, Kartik Sreenivasan, Shashank Rajput, Harit Vishwakarma, Saurabh
Agarwal, Jy-yong Sohn, Kangwook Lee, and Dimitris Papailiopoulos. 2020. Attack of the tails: Yes, you really can backdoor federated learning. In NeurIPS. [50] Han Xiao, Kashif Rasul, and Roland Vollgraf. 2017. Fashion-MNIST:
a Novel Image Dataset for Benchmarking Machine Learning Algorithms.
arXiv:cs.LG/cs.LG/1708.07747
[51] Chulin Xie, Keli Huang, Pin-Yu Chen, and Bo Li. 2019. Dba: Distributed backdoor attacks against federated learning. In ICLR.
[52] Cong Xie, Sanmi Koyejo, and Indranil Gupta. 2019. Asynchronous federated optimization. arXiv preprint arXiv:1903.03934 (2019).
[53] Cong Xie, Sanmi Koyejo, and Indranil Gupta. 2020. Zeno++: Robust fully asynchronous SGD. In ICML.
[54] Chenhao Xu, Youyang Qu, Yong Xiang, and Longxiang Gao. 2021. Asynchronous federated learning on heterogeneous devices: A survey. arXiv preprint arXiv:2109.04269 (2021).
[55] Yi-Rui Yang and Wu-Jun Li. 2021. BASGD: Buffered Asynchronous SGD for Byzantine Learning. In ICML.
[56] Dong Yin, Yudong Chen, Ramchandran Kannan, and Peter Bartlett. 2018. Byzantine-robust distributed learning: Towards optimal statistical rates. In ICML.
[57] Zaixi Zhang, Xiaoyu Cao, Jinayuan Jia, and Neil Zhenqiang Gong. 2022. FLDe-
tector: Defending Federated Learning Against Model Poisoning Attacks via Detecting Malicious Clients. In KDD. [58] Shuxin Zheng, Qi Meng, Taifeng Wang, Wei Chen, Nenghai Yu, Zhi-Ming Ma,
and Tie-Yan Liu. 2017. Asynchronous stochastic gradient descent with delay compensation. In ICML.

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

A APPENDIX

A.1 Proof of Lemma 5.1

The proof of Lemma 5.1 is mainly from [16, 42]. We first check

Assumption 1. Consider the linear regression model defined in

Lemma 5.1, that is ùë¶ùëñ = ‚ü®ùíñùëñ, ùúΩ ‚àó‚ü© + ùëíùëñ, where ùúΩ ‚àó is the unknown true

model parameter, ùíñùëñ ‚àº ùëÅ (0, ùë∞ ), ùëíùëñ ‚àº ùëÅ (0, 1), ùëíùëñ is independent of ùíñùëñ .

The population risk of (1) is given by minùúΩ

1 2

‚à•ùúΩ

‚àí

ùúΩ

‚àó

‚à•2

+

1 2

.

ùêπ

(ùúΩ

)

‚âú

E [ùëì (ùúΩ, ùëã )] = E

1 2

( ‚ü®ùíñ,

ùúΩ

‚ü©

‚àí

ùë¶)2

=E

1 2

( ‚ü®ùíñ,

ùúΩ

‚ü©

‚àí

‚ü®ùíñ,

ùúΩ

‚àó‚ü©

‚àí

ùëí)2

=

1 2

‚à•ùúΩ

‚àí

ùúΩ ‚àó ‚à•2

+

1
.
2

Then

the

gradient

of

population

risk

is

‚àáùêπ (ùúΩ )

=

ùúΩ ‚àí ùúΩ ‚àó. We can see that the population risk ùêπ (¬∑) is ùêø-Lipschitz

continuous with ùêø = 1, and ùúá-strongly convex with ùúá = 1.

We then check Assumption 2. Let ùíñ ‚àº ùëÅ (0, ùë∞ ), ùëí ‚àº ùëÅ (0, 1) and ùëí is independent of ùíñ, then one has ‚àáùëì (ùúΩ, ùëã ) = ùíñ ‚ü®ùíñ, ùúΩ ‚àí ùúΩ ‚àó‚ü© ‚àí ùíñùëí.

Let v ‚àà ùëΩ be the unit vector, we further have that:

‚àá

ùëì

(ùúΩ

‚àó
,

ùëã

),

v

= ‚àíùëí ‚ü®ùíñ, v‚ü© .

(5)

Since ùíñ ‚àº ùëÅ (0, ùë∞ ), v is the unit vector and ùíñ is independent

of ùëí, so we have ‚ü®ùíñ, v‚ü© ‚àº ùëÅ (0, 1) and ‚ü®ùíñ, v‚ü© is independent of ùëí.

According

to

the

standard

conditioning

argument,

for

2
ùúë

‚â§

1,

one

has:

E

exp

ùúë

‚àáùëì

(ùúΩ

‚àó
,

ùëã

),

v

(ùëé)
= E [exp (‚àíùúëùëí ‚ü®ùíñ, v‚ü©)]

= E [E [exp (‚àíùúëùë¶ ‚ü®ùíñ, v‚ü©) |ùúë = ùë¶]]

(ùëè)
=E

exp

ùúë

2
ùëí

2/2

(ùëê)
=

1 ‚àí ùúë2

‚àí1/2

(ùëë )
‚â§

ùúë2
ùëí,

(6)

where (ùëé) is because of Eq. (5); (ùëè) is obtained by applying the

moment generating function of Gaussian distribution; (ùëê) is because

for

the

moment

generating

function

of

2
ùúí

distribution,

we

have

E exp

1

‚àí

2
ùúë

ùë°ùúë2 = (1 ‚àí 2ùë° )‚àí1/2 for ùë°

‚â•

‚àí2ùúë 2
ùëí‚àö

for

|ùúë |

‚àö‚â§

‚àö 1/ 2.

< 1/2; (ùëë) is due to the fact that Therefore, Assumption 2 holds

when ùõº1 = 2 and ùúå1 = 2.

Next, we check Assumption 3. As ‚àáùëì (ùúΩ, ùëã ) =

ùíñ ‚ü®ùíñ, ùúΩ ‚àí ùúΩ ‚àó‚ü© ‚àí ùíñùëí, ‚àáùëì (ùúΩ ‚àó, ùëã ) = ‚àíùíñùëí, so ùëû(ùúΩ, ùëã ) =

‚àáùëì

(ùúΩ,

ùëã)

‚àí

‚àáùëì

(ùúΩ

‚àó
,

ùëã

)

=

ùíñ

‚ü®ùíñ, ùúΩ

‚àí

ùúΩ ‚àó‚ü©.

As

E

[ùëû (ùúΩ ,

ùëã )]

=

ùúΩ

‚àí

ùúΩ‚àó,

so

‚ü®ùëû(ùúΩ, ùëã ) ‚àí E [ùëû(ùúΩ, ùëã )] , v‚ü© = ‚ü®ùíñ, ùúΩ ‚àí ùúΩ ‚àó‚ü© ‚ü®ùíñ, v‚ü© ‚àí ‚ü®ùúΩ ‚àí ùúΩ ‚àó, v‚ü© .

For a fixed ùúΩ ‚àà further decompose

ùöØ, ùúΩ ‚â† ùúΩ ‚àó, we let ùúΩ ‚àí ùúΩ ‚àó as ùúΩ ‚àí ùúΩ ‚àó =

‚àö√∞ = ùëê1v

‚à•ùúΩ‚àö‚àí ùúΩ ‚àó ‚à• > 0. + ùëê2vÀÜ, where

We vÀÜ is

an vector perpendicular to v, ùëê1 + ùëê2 = √∞2. We further have that

‚ü®ùíñ, vÀÜ‚ü© ‚àº ùëÅ (0, 1) and:

ùíñ, ùúΩ ‚àí ùúΩ‚àó

‚ü®ùíñ, v‚ü© ‚àí

ùúΩ

‚àí

ùúΩ

‚àó
,

v

‚àö

‚àö

= ùëê1 ‚ü®ùíñ, v‚ü©2 ‚àí 1 + ùëê2 ‚ü®ùíñ, vÀÜ‚ü© ‚ü®ùíñ, v‚ü© .

(7)

One also has E [‚ü®ùíñ, vÀÜ‚ü© ‚ü®ùíñ, v‚ü©] = E vÀÜ‚ä§uu‚ä§v = vÀÜ‚ä§E uu‚ä§ v = 0, where u‚ä§ is the transpose of u. Hence‚àö, ‚ü®ùíñ, vÀÜ‚ü© and ‚ü®ùíñ, v‚ü© are mutually independent. For any ùúë satisfies ùúë ùëê1 < 1/4 and ùúë2ùëê2 < 1/4,
we have:

E [exp (ùúë ‚ü®ùëû(ùúΩ, ùëã ) ‚àí E [ùëû(ùúΩ, ùëã )] , v‚ü©)]

(ùëé)
=E

exp

‚àö ùúë ùëê1

‚ü®ùíñ, v‚ü©2 ‚àí 1

‚àö + ùúë ùëê2 ‚ü®ùíñ, vÀÜ‚ü© ‚ü®ùíñ, v‚ü©

‚àöÔ∏Ñ
(ùëè)
‚â§E

‚àö 2ùúë ùëê1
ùëí

‚ü®ùíñ,v ‚ü© 2 ‚àí1

‚àö
E ùëí2ùúë ùëê2 ‚ü®ùíñ,vÀÜ ‚ü© ‚ü®ùíñ,v‚ü©

‚àöÔ∏Ñ
‚àö
= ùëí‚àíùúë ùëê1 E

‚àö 2ùúë ùëê1
ùëí

‚ü®ùíñ,v‚ü©2

‚àö
E ùëí2ùúë ùëê2 ‚ü®ùíñ,vÀÜ ‚ü© ‚ü®ùíñ,v‚ü©

Minghong Fang, Jia Liu, Neil Zhenqiang Gong, and Elizabeth S. Bentley

(ùëê)
=

‚àö

‚àíùúë
ùëí

ùëê1

‚àö 1 ‚àí 4ùúë ùëê1

‚àí1/4

1

‚àí

4ùúë

2
ùëê2

‚àí1/4
,

(8)

where (ùëé) holds by plugging in Eq. (7); (ùëè) is true by applying

the Cauchy-Schwartz‚Äôs inequality; (ùëê) is true by applying the mo-

ment for 0

generating ‚â§ ùë° ‚â§ 1/2,

afunndcùëíti‚àíoùë°n/‚àöo1f

ùúí2 distribution. ‚àí 2ùë° ‚â§ ùëí2ùë°2 for

Since 1 ‚àí |ùë° | ‚â§ 1/4.

ùë° ‚â•ùëí Thus,

‚àí4ùë°
for

ùúë2 ‚â§ 1/(64√∞2), one has E [exp (ùúë ‚ü®ùëû(ùúΩ, ùëã ) ‚àí E [ùëû(ùúΩ, ùëã )] , v‚ü©)] ‚â§

exp 4ùúë2 (ùëê‚àö1 + ùëê2) ‚â§ exp 4ùúë2√∞2 . Therefore, Assumption 3 holds with ùõº2 = 8 and ùúå2 = 8.
Last, we check Assumption 4. As ‚àáùëì (ùúΩ, ùëã ) = ùíñ ‚ü®ùíñ, ùúΩ ‚àí ùúΩ ‚àó‚ü© ‚àí ùíñùëí,

then ‚àá2 ùëì (ùúΩ, ùëã ) = ùíñùíñ‚ä§, thus it suffices to show the following

P

1 |ùëãùë† |

ùë• ‚ààùëãùë† ‚àá2 ùëì (ùúΩ, ùë•) ‚â§ ùêª = P

1 |ùëãùë† |

|ùëãùë† | ùëó =1

ùíñ

ùëó

ùíñ‚ä§
ùëó

‚â§ùêª

‚â•

1‚àíùõΩ/3. Let ùëº = ùíñ1, ùíñ2, ..., ùíñ |ùëãùë† | ‚äÇ Rùëë√ó|ùëãùë† |, one has

|ùëãùë† | ùëó =1

ùíñ

ùëó

ùíñ

‚ä§ ùëó

=

ùëº ùëº ‚ä§ and P

1 |ùëãùë† |

|ùëãùë† | ùëó =1

ùíñùëó

ùíñ‚ä§
ùëó

‚â§ùêª

=P

‚à•ùëº ‚à• ‚â§ ‚àöÔ∏Å|ùëãùë† | ùêª

. Since

ùëº

is

an

i.i.d.

standard

Gaussian

matrix,

then

according ‚àö

to

[47],

for ùë° ‚â• 0, we have that: P ‚à•ùëº ‚à• ‚â§ ‚àöÔ∏Å|ùëãùë† | + ùëë + ùë° ‚â• 1 ‚àí

‚àö

2

exp ‚àíùë°2/2 . Setting ùêª = ‚àöÔ∏Å|ùëãùë† | + ùëë + ‚àöÔ∏Å2log(4/ùõΩ) /|ùëãùë† | and

ùë° = ‚àöÔ∏Å2log(4/ùõΩ) to complete the proof.

A.2 Proof of Theorem 1

Since we assume that the server delay ùúèùë† is zero, i.e., ùúèùë† = 0. Then in the following, we use ùíàùë†ùë° to denote the server model update.
If server updates the global model following the AFLGuard algo-

rithm, i.e., Algorithm 2, then for any ùë° > 0, ùúèùëñ > 0, we have:

ùúΩùë°+1 ‚àí ùúΩ ‚àó = ùúΩùë° ‚àí ùúÇùíàùë°‚àíùúèùëñ ‚àí ùúΩ ‚àó
ùëñ

‚â§ ùúΩùë° ‚àí ùúÇ‚àáùêπ (ùúΩùë° ) ‚àí ùúΩ ‚àó + ùúÇ ùíàùë°‚àíùúèùëñ ‚àí ‚àáùêπ (ùúΩùë° )
ùëñ

(ùëé)
‚â§

ùúΩùë° ‚àí ùúÇ‚àáùêπ (ùúΩùë° ) ‚àí ùúΩ ‚àó

+ùúÇùúÜ

‚àáùêπ (ùúΩùë° ) ‚àí ‚àáùêπ (ùúΩ ‚àó)

‚ô£

‚ãÜ

+ ùúÇ (ùúÜ + 1) ùíàùë†ùë° ‚àí ‚àáùêπ (ùúΩùë° )

‚ô¶

‚àöÔ∏Ñ

(ùëè)

2ùúÇ ùúá ùêø

‚â§ 1‚àí

+ ùúÇùêøùúÜ + 8ùúÇŒõ(ùúÜ + 1)

ùúá+ùêø

ùúΩùë° ‚àí ùúΩ‚àó

+ 4ùúÇŒì(ùúÜ + 1),

(9)

where (ùëé) uses ‚àáùêπ (ùúΩ ‚àó) = 0 and Lemma 1, (ùëè) is true by plugging in
Lemma 2, Assumption 1 and Lemma 3 into ‚ô£, ‚ãÜ, and ‚ô¶, respectively. Telescoping, one has ùúΩùë° ‚àí ùúΩ ‚àó ‚â§ (1 ‚àí ùëû)ùë° ùúΩ 0 ‚àí ùúΩ ‚àó +4ùúÇŒì(ùúÜ +1)/ùëû,

where ùëû = 1 ‚àí

‚àöÔ∏Å 1

‚àí

2ùúÇ ùúá ùêø/ ( ùúá

+

ùêø)

+

ùúÇùêøùúÜ

+

8ùúÇŒõ(ùúÜ

+

1)

.

Next, we proof Lemma 1, Lemma 2 and Lemma 3 one by one.

Lemma 1. If the server uses the AFLGuard algorithm to update the global model, then for arbitrary number of malicious clients, one has:

ùíàùë°‚àíùúèùëñ ‚àí ‚àáùêπ (ùúΩùë° )
ùëñ

‚â§ (ùúÜ + 1)

ùíàùë†ùë° ‚àí ‚àáùêπ (ùúΩùë° )

+ùúÜ

‚àáùêπ (ùúΩùë° )

.

Proof.

ùíàùë°‚àíùúèùëñ ‚àí ‚àáùêπ (ùúΩùë° )
ùëñ

‚â§

ùíàùë° ‚àíùúèùëñ
ùëñ

‚àí ùíàùë†ùë°

+

ùíàùë†ùë° ‚àí ‚àáùêπ (ùúΩùë° )

AFLGuard: Byzantine-robust Asynchronous Federated Learning

(ùëé)
‚â§ ùúÜ ùíàùë†ùë° + ùíàùë†ùë° ‚àí ‚àáùêπ (ùúΩùë° )

‚â§ ùúÜ ùíàùë†ùë° ‚àí ‚àáùêπ (ùúΩùë° ) + ùúÜ ‚àáùêπ (ùúΩùë° ) + ùíàùë†ùë° ‚àí ‚àáùêπ (ùúΩùë° )

= (ùúÜ + 1) ùíàùë†ùë° ‚àí ‚àáùêπ (ùúΩùë° ) + ùúÜ ‚àáùêπ (ùúΩùë° ) ,

(10)

where (ùëé) is because for the AFLGuard algorithm, we have that

ùíàùë° ‚àíùúèùëñ
ùëñ

‚àí

ùíàùë†ùë°

‚â§ ùúÜ ùíàùë†ùë° .

‚ñ°

Lemma 2. Suppose Assumption 1 holds, if the global learning rate

satisfies ùúÇ

‚â§

2 ùúá+ùêø

,

then

we have

the following:

ùúΩùë° ‚àí ùúÇ‚àáùêπ (ùúΩùë° ) ‚àí ùúΩ ‚àó

‚â§

‚àöÔ∏Å 1

‚àí

2ùúÇ ùúá ùêø/ ( ùúá

+

ùêø)

ùúΩùë° ‚àí ùúΩ‚àó

.

Proof. ùúΩùë° ‚àí ùúÇ‚àáùêπ (ùúΩùë° ) ‚àí ùúΩ ‚àó 2 = ùúΩùë° ‚àí ùúΩ ‚àó 2 + ùúÇ2 ‚àáùêπ (ùúΩùë° ) 2 ‚àí 2ùúÇ ùúΩùë° ‚àí ùúΩ ‚àó, ùêπ (ùúΩùë° ) . According to [8], if ùêπ (ùúΩ ) is ùêø-smooth and

ùúá-strongly convex, for any ùúΩ, ùúΩ ‚Ä≤

‚àà

Œò, one has

ùúáùêø ùúá+ùêø

‚à•ùúΩ

‚àí

ùúΩ ‚Ä≤‚à•2

+

1 ùúá+ùêø

‚à•‚àáùêπ (ùúΩ )

‚àí

‚àáùêπ (ùúΩ ‚Ä≤)‚à•2

‚â§

‚ü®‚àáùêπ (ùúΩ ) ‚àí ‚àáùêπ (ùúΩ ‚Ä≤), ùúΩ ‚àí ùúΩ ‚Ä≤‚ü© . Setting

ùúΩ

=

ùúΩùë°, ùúΩ ‚Ä≤

=

ùúΩ‚àó,

since

‚àáùêπ (ùúΩ ‚àó)

=

0,

we

have

that

ùúáùêø ùúá+ùêø

ùúΩùë° ‚àí ùúΩ‚àó 2 +

1 ùúá+ùêø

‚àáùêπ (ùúΩùë° ) 2 ‚â§

‚àáùêπ (ùúΩùë° ), ùúΩùë° ‚àí ùúΩ ‚àó

. Thus one has:

ùúΩùë° ‚àí ùúÇ‚àáùêπ (ùúΩùë° ) ‚àí ùúΩ ‚àó 2 ‚â§

ùúΩùë°

‚àí ùúΩ‚àó

2

+

2
ùúÇ

‚àáùêπ (ùúΩùë° ) 2

‚àí 2ùúÇ

ùúáùêø ùúá+ùêø

ùúΩùë°

‚àí ùúΩ‚àó

2+

1 ùúá+ùêø

‚àáùêπ (ùúΩùë° ) 2

= (1 ‚àí 2ùúÇùúáùêø/(ùúá + ùêø)) ùúΩùë° ‚àí ùúΩ ‚àó 2 + ùúÇ (ùúÇ ‚àí 2/(ùúá + ùêø)) ‚àáùêπ (ùúΩùë° ) 2

(ùëé)
‚â§ (1 ‚àí 2ùúÇùúáùêø/(ùúá + ùêø))

ùúΩùë° ‚àí ùúΩ‚àó

2
,

(11)

where (ùëé) is because 0 < ùúÇ ‚â§ 2/(ùúá + ùêø). ùúΩùë° ‚àí ùúÇ‚àáùêπ (ùúΩùë° ) ‚àí ùúΩ ‚àó ‚â§

‚àöÔ∏Å 1

‚àí

2ùúÇ

ùúáùêø/(ùúá

+

ùêø)

ùúΩùë° ‚àí ùúΩ‚àó

.

‚ñ°

The proof of Lemma 3 is mainly motivated from [9, 16]. To

simplify the notation, we will ignore the superscript ùë° in ùíàùë†ùë° . Define

‚àáùëì¬Øùë† (ùúΩ ) =

1 |ùëãùë† |

ùë• ‚ààùëãùë† ‚àáùëì (ùúΩ, ùë•).

{ùúΩ

Lemma : ‚à•ùúΩ ‚àí ùúΩ

‚àó

3. If ‚àö Assumptions ‚à• ‚â§ ùúñ ùëë } holds for

2-4 some

hold and parameter ùúñ

Œò‚äÇ > 0. For

any

ùõΩ

‚àà

(0, 1),

if

Œì

‚â§

ùõº12/ùúå1

and

Œõ

‚â§

2
ùõº
2

/ùúå2

,

we

have

that:

P ‚à•ùíàùë† ‚àí ‚àáùêπ (ùúΩ ) ‚à• ‚â§ 8Œõ ùúΩ ‚àí ùúΩ ‚àó + 4Œì ‚â• 1 ‚àí ùõΩ,

where Œì, Œõ are defined in Theorem 1.

‚àöÔ∏É

‚àö

Proof. We define ùúâ = ùúå2ùõº1
2ùõº 2

ùëë |ùëãùë† |

and let ùúì

=

ùúñ

ùëë/ùúâ . Then

for any integer 1

‚â§

ùëô

‚â§

2
ùúì , we define Œòùëô

=

{ùúΩ

: ‚à•ùúΩ ‚àí ùúΩ‚àó‚à•

‚â§ ùúâùëô} .

For a given integer ùëô, we let ùúΩ1, ¬∑ ¬∑ ¬∑ , ùúΩùúçÀÜ be an ùúî-cover of Œòùëô ,

where ùúî

=

ùõº2ùúâùëô ùëÖ

‚àöÔ∏Å ùëë

/|ùëãùë†

|,

where

ùëÖ

=

max {ùêø, ùêª }. From [47], we

know that log ùúçÀÜ ‚â§ ùëë log(3ùúâùëô/ùúî). For any ùúΩ ‚àà Œòùëô , there exists a

1 ‚â§ ùëê ‚â§ ùúî such that ‚à•ùúΩ ‚àí ùúΩùëê ‚à• ‚â§ ùúî holds. Then, based on the trian-

gle inequality, one has ‚àáùëì¬Øùë† (ùúΩ ) ‚àí ‚àáùêπ (ùúΩ ) ‚â§ ‚à•‚àáùêπ (ùúΩ ) ‚àí ‚àáùêπ (ùúΩùëê ) ‚à• +

‚àáùëì¬Øùë† (ùúΩ ) ‚àí ‚àáùëì¬Øùë† (ùúΩùëê ) + ‚àáùëì¬Øùë† (ùúΩùëê ) ‚àí ‚àáùêπ (ùúΩùëê ) . By Assumption 1, one

has ‚à•‚àáùêπ (ùúΩ ) ‚àí ‚àáùêπ (ùúΩùëê ) ‚à• ‚â§ ùêø ‚à•ùúΩ ‚àí ùúΩùëê ‚à• ‚â§ ùêøùúî. We define event ùê∏1 as:

ùê∏1 = supùúΩ,ùúΩ‚Ä≤ ‚ààŒò:ùúΩ ‚â†ùúΩ‚Ä≤ ‚àáùëì¬Øùë† (ùúΩ ) ‚àí‚àáùëì¬Øùë† (ùúΩ ‚Ä≤) ‚â§ ùêª ùúΩ ‚àíùúΩ ‚Ä≤ . (12)

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

According to Assumption 4, we have P {ùê∏1} ‚â• 1 ‚àí ùõΩ/3. One also

has supùúΩ ‚ààŒò ‚àáùëì¬Øùë† (ùúΩ again, and because

) ‚àí ‚àáùëì¬Øùë† E [ùëû (ùúΩ

(ùúΩùëê ) , ùëã )]

‚â§ ùêªùúî. By = ‚àáùêπ (ùúΩ ) ‚àí

the triangle ‚àáùêπ (ùúΩ ‚àó), we

inequality have:

‚àáùëì¬Øùë† (ùúΩùëê ) ‚àí ‚àáùêπ (ùúΩùëê ) ‚â§ ‚àáùëì¬Øùë† (ùúΩ ‚àó) ‚àí ‚àáùêπ (ùúΩ ‚àó)

+ ‚àáùëì¬Øùë† (ùúΩùëê ) ‚àí ‚àáùëì¬Øùë† (ùúΩ ‚àó) ‚àí ‚àáùêπ (ùúΩùëê ) ‚àí ‚àáùêπ (ùúΩ ‚àó)

‚â§

‚àáùëì¬Øùë† (ùúΩ ‚àó) ‚àí ‚àáùêπ (ùúΩ ‚àó)

+

1 ‚àëÔ∏Å |ùëãùë† | ùë• ‚ààùëãùë† ùëû(ùúΩùëê, ùë•) ‚àí E [ùëû (ùúΩùëê, ùëã )]

.

Define events ùê∏2 = ‚àáùëì¬Øùë† (ùúΩ ‚àó) ‚àí ‚àáùêπ (ùúΩ ‚àó) ‚â§ 2Œì and ùê∏ùëô as:

1 ‚àëÔ∏Å ùê∏ùëô = sup1‚â§ùëò ‚â§ùëÅ |ùëãùë† | ùë• ‚ààùëãùë† ùëû(ùúΩùëò, ùë•) ‚àí E [ùëû (ùúΩùëò, ùëã )] ‚â§ 2Œõùúâùëô .

By

Proposition

1,

Proposition

2,

since

Œì

‚â§

2
ùõº
1

/ùúå1,

Œõ

‚â§

2
ùõº
2

/ùúå2

,

we have P {ùê∏2} ‚â• 1 ‚àí ùõΩ/3, P {ùê∏ùëô } ‚â• 1 ‚àí ùõΩ/(3ùúì ). Thus, on event

ùê∏1 ‚à© ùê∏2 ‚à© ùê∏ùëô , one has supùúΩ ‚ààŒòùëô ‚àáùëì¬Øùë† (ùúΩ ) ‚àí ‚àáùêπ (ùúΩ ) ‚â§ ùêøùúî + ùêªùúî + 2Œì + 2Œõùúâùëô ‚â§ 4Œõùúâùëô + 2Œì. Thus, we have at least 1 ‚àí ùõΩ that event

ùê∏ = ùê∏1 ‚à© exists an

ùê∏2 ‚à© 1‚â§ùëô

(‚à©ùúìùëô=1ùê∏ùëô ). Also, ‚â§ ùúì such that

on event ùê∏, for any ùúΩ ‚àà Œòùúì , there (ùëô ‚àí 1)ùúâ < ‚à•ùúΩ ‚àí ùúΩ ‚àó ‚à• ‚â§ ùúâùëô holds. If

ùëô = 1, we have ‚àáùëì¬Øùë† (ùúΩ ) ‚àí ‚àáùêπ (ùúΩ ) ‚â§ 4Œõùúâ + 2Œì ‚â§ 4Œì; and 2(ùëô ‚àí 1) ‚â• ùëô if ùëô ‚â• 2. Thus, one has ‚àáùëì¬Øùë† (ùúΩ ) ‚àí ‚àáùêπ (ùúΩ ) ‚â§ 8Œõ ‚à•ùúΩ ‚àí ùúΩ ‚àó ‚à• + 2Œì. On ùê∏, one has supùúΩ ‚ààŒòùúì ‚àáùëì¬Øùë† (ùúΩ ) ‚àí ‚àáùêπ (ùúΩ ) ‚â§ 8Œõ ‚à•ùúΩ ‚àí ùúΩ ‚àó ‚à• + 4Œì. ‚ñ°

The following proof of Proposition 1 is mainly motivated from [9, 16].

ùúΩ

Proposition‚àö 1. ‚àà Œò, let Œì = 2ùõº

Suppose

‚àöÔ∏Å
1

(ùëë

log

Assumption 2 holds. For 6 + log(3/ùõΩ))/|ùëãùë† |. If Œì

any ùõΩ ‚àà

‚â§

ùõº2
1

/ùúå1

(0, 1), , then

we have:

P

1 ‚àëÔ∏Å

‚àáùëì

(ùúΩ

‚àó
,

ùë•)

‚àí

‚àáùêπ

(ùúΩ

‚àó)

‚â• 2Œì

‚â§ ùõΩ/3.

|ùëãùë† | ùë• ‚ààùëã

Proof. We let B

=

{v1,, ¬∑ ¬∑ ¬∑ , vùúç }

be

one

1
-cover
2

of

the unit sphere V. By [47], one has log ùúç ‚â§ ùëë log 6 and

‚àáùëì¬Øùë† (ùúΩ ‚àó) ‚àí ‚àáùêπ (ùúΩ ‚àó) ‚â§ 2 supv‚ààB ‚àáùëì¬Øùë† (ùúΩ ‚àó) ‚àí ‚àáùêπ (ùúΩ ‚àó), v . If As-

sumption 2 and the condition Œì

‚â§

ùõº2
1

/ùúå1

satisfy,

and

accord-

ing to the concentration inequalities for sub-exponential random

variables [48], we have that P ‚àáùëì¬Øùë† (ùúΩ ‚àó) ‚àí ‚àáùêπ (ùúΩ ‚àó), v ‚â• Œì ‚â§

exp

‚àí

|ùëãùë†

|

Œì2/

(2ùõº 2 )
1

. One has P

‚àáùëì¬Øùë† (ùúΩ ‚àó) ‚àí ‚àáùêπ (ùúΩ ‚àó) ‚â• 2Œì

‚â§

exp

‚àí

|ùëãùë† |

Œì2 / (2ùõº 2 )
1

+ùëë

log 6

by the union bound. Put in Œì finishes

the proof.

‚ñ°

ùúΩ

‚ààPrŒòo,pleotsŒîiti=on‚àö22ùõº. 2S‚àöuÔ∏Å(pùëëpolosge

Assumption 3 holds. For 6 + log(3/ùõΩ))/|ùëãùë† |. If Œî

any ùõΩ ‚àà (0, 1),

‚â§

ùõº2
2

/ùúå2,

then

we have:

Ô£±

Ô£º

Ô£¥ Ô£¥Ô£≤ P Ô£¥ Ô£¥

1 ‚àëÔ∏Å |ùëãùë† | ùë• ‚ààùëãùë† ‚àáùëû(ùúΩ, ùë•) ‚àí E [ùëû(ùúΩ, ùëã )]

‚â• 2Œî

ùúΩ ‚àíùúΩ‚àó

Ô£¥ Ô£¥Ô£Ω

‚â§ ùõΩ/3.

Ô£¥ Ô£¥

Ô£≥

Ô£æ

Proof. The proof of Proposition 2 is similar to that of Proposi-

tion 1, and is omitted here for brevity.

‚ñ°

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

Minghong Fang, Jia Liu, Neil Zhenqiang Gong, and Elizabeth S. Bentley

Test error rate

AsyncSGD w/o attacks

AsyncSGD

Kardam

BASGD

Zeno++

AFLGuard

1.0

1.0

1.0

Test error rate

Attack success rate Test error rate

0.8

0.8

0.8

0.6

0.6

0.6

0.4

0.4

0.4

0.2

0.2

0.2

0.050 100Nu1(ma5)0bLe2Fr0oa0fttca3lic0ek0nts400 500 0.050 100N(bu1)m5G0baeu2rs0os0f ac3tlit0ea0nctks400 500 0.050 100Nu(1cm5)0bGeD2r0oa0ftct3ali0ec0nkts400 500

1.0

1.0

1.0

Test error rate

0.8

0.8

0.8

0.6

0.6

0.6

0.4

0.4

0.4

0.2

0.2

0.2

0.050 100Nu(1dm5)0bBeD2r0oa0ftct3ali0ec0nkts400 500 0.050 100Nu(1em5)0bBeD2r0oa0ftct3ali0ec0nkts400 500 0.050 100N(fu1)m5A0bdea2rp0ot0fact3lti0ea0nctks400 500

Test error rate

Figure 8: Test error rates and attack success rates of different defenses under different attacks with different number of clients on MNIST dataset.

Table 4: The CNN architecture.

Layer Input Convolution + ReLU Max Pooling Convolution + ReLU Max Pooling Fully Connected + ReLU Softmax

Size 28 √ó 28 √ó 1 3 √ó 3 √ó 30
2√ó2 3 √ó 3 √ó 50
2√ó2 100
10

A.3 Datasets
1) Synthetic Dataset: We randomly generate 10,000 data samples of dimensions ùëë = 100. Each dimension follows the Gaussian distribution ùëÅ (0, 1) and noise ùëíùëñ is sampled from ùëÅ (0, 1). We use ùëÅ (0, 25) to generate each entry of ùúΩ ‚àó. We generate ùë¶ùëñ according to the linear regression model in Lemma 5.1. We randomly draw 8,000 samples
for training and use the remaining 2,000 samples for testing.
2) MNIST [30]: MNIST is a 10-class handwritten digits image classification dataset, which contains 60,000 samples for training and
10,000 examples for testing.

3) Fashion-MNIST [50]: Fashion-MNIST is a dataset containing images of 70,000 fashion products from 10 classes. The training set has 60,000 images and the testing set has 10,000 images. 4) Human Activity Recognition (HAR) [4]: The HAR dataset aims to recognize 6 types of human activities and the dataset is collected from smartphones of 30 real-world users. There are 10,299 examples in total and each example includes 561 features. We randomly sample 75% of each client‚Äôs examples as training data and use the rest as test data. 5) Colorectal Histology MNIST [28]: Colorectal Histology MNIST is an 8-class dataset for classification of textures in human colorectal cancer histology. This dataset contains 5,000 images and each image has 64√ó64 grayscale pixels. We randomly select 4,000 images for training and use the remaining 1,000 images for testing. 6) CIFAR-10 [29]: CIFAR-10 consists of 60,000 color images. This dataset has 10 classes, and there are 6,000 images of each class. The training set has 50,000 images and the testing set has 10,000 images.

AFLGuard: Byzantine-robust Asynchronous Federated Learning

ACSAC ‚Äô22, December 5‚Äì9, 2022, Austin, TX, USA

Table 5: Test error rates and attack success rates of Zeno++ and AFLGuard under different attacks with different distribution shifts (DSs) on Fashion-MNIST, HAR, Colorectal Histology MNIST and CIFAR-10 datasets. The results of BD attack are in the form of ‚Äútest error rate / attack success rate‚Äù.

DS Attack No attack LF attack Gauss attack GD attack BD attack Adapt attack

0.1

Zeno++ AFLGuard

0.25

0.16

0.25

0.18

0.26

0.18

0.26

0.18

0.26 / 0.04 0.17 / 0.04

0.26

0.19

(a) Fashion-MNIST

0.5

0.6

Zeno++ AFLGuard Zeno++ AFLGuard

0.26

0.17

0.31

0.18

0.29

0.21

0.32

0.21

0.28

0.19

0.34

0.19

0.29

0.21

0.35

0.21

0.29 / 0.05 0.20 / 0.04 0.33 / 0.04 0.20 / 0.04

0.29

0.21

0.36

0.21

0.8

Zeno++ AFLGuard

0.58

0.21

0.72

0.22

0.58

0.22

0.58

0.21

0.58 / 0.03 0.20 / 0.03

0.72

0.22

1.0

Zeno++ AFLGuard

0.90

0.22

0.90

0.22

0.90

0.23

0.90

0.23

0.90 / 0.01 0.22 / 0.02

0.90

0.25

DS Attack No attack LF attack Gauss attack GD attack BD attack Adapt attack

0.167

Zeno++ AFLGuard

0.06

0.05

0.07

0.05

0.07

0.05

0.07

0.05

0.06 / 0.07 0.05 / 0.01

0.07

0.05

0.5

Zeno++ AFLGuard

0.06

0.05

0.08

0.05

0.07

0.05

0.08

0.05

0.07 / 0.01 0.05 / 0.01

0.08

0.05

(b) HAR

0.6

Zeno++ AFLGuard

0.08

0.05

0.09

0.05

0.09

0.05

0.09

0.06

0.09 / 0.02 0.05 / 0.01

0.09

0.06

0.8

Zeno++ AFLGuard

0.10

0.07

0.10

0.09

0.10

0.07

0.12

0.09

0.10 / 0.01 0.07 / 0.01

0.14

0.09

1.0

Zeno++ AFLGuard

0.43

0.12

0.43

0.36

0.43

0.36

0.43

0.42

0.43 / 0.01 0.36 / 0.01

0.55

0.54

DS Attack No attack LF attack Gauss attack GD attack BD attack Adapt attack

0.125

Zeno++ AFLGuard

0.25

0.18

0.31

0.21

0.35

0.21

0.29

0.21

0.42 / 0.02 0.22 / 0.02

0.44

0.29

(c) Colorectal Histology MNIST

0.5

0.6

Zeno++ AFLGuard Zeno++ AFLGuard

0.31

0.22

0.49

0.29

0.39

0.23

0.53

0.37

0.43

0.22

0.59

0.32

0.39

0.32

0.66

0.36

0.44 / 0.02 0.27 / 0.02 0.57 / 0.01 0.31 / 0.02

0.64

0.33

0.72

0.43

0.8

Zeno++ AFLGuard

0.62

0.32

0.63

0.41

0.70

0.35

0.74

0.49

0.62 / 0.01 0.32 / 0.01

0.77

0.51

1.0

Zeno++ AFLGuard

0.71

0.34

0.88

0.41

0.86

0.35

0.88

0.58

0.82 / 0.24 0.51 / 0.03

0.88

0.62

DS Attack No attack LF attack Gauss attack GD attack BD attack Adapt attack

0.1

Zeno++ AFLGuard

0.32

0.24

0.33

0.34

0.33

0.32

0.32

0.27

0.32 / 0.95 0.28 / 0.01

0.77

0.32

(d) CIFAR-10

0.5

0.6

Zeno++ AFLGuard Zeno++ AFLGuard

0.41

0.26

0.54

0.29

0.53

0.34

0.64

0.35

0.52

0.33

0.72

0.33

0.60

0.30

0.83

0.31

0.49 / 0.06 0.29 / 0.01 0.62 / 0.00 0.32 / 0.02

0.82

0.36

0.90

0.36

0.8

Zeno++ AFLGuard

0.68

0.31

0.71

0.35

0.76

0.35

0.85

0.33

0.80 / 0.01 0.34 / 0.01

0.90

0.36

1.0

Zeno++ AFLGuard

0.90

0.31

0.90

0.38

0.90

0.35

0.90

0.32

0.90 / 0.00 0.36 / 0.04

0.90

0.39

