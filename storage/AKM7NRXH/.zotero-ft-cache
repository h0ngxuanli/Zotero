写文章
点击打开要爆了的主页
深入理解git rebase
深入理解git rebase
两条鱼
两条鱼
​ 关注他
14 人赞同了该文章

rebase命令在git中是一个非常有魅力的命令，使用得当会极大提高自己的工作效率；相反，如果乱用，会给团队中的其他人带来麻烦。它的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；因此，合理使用rebase命令可以使我们的提交历史干净、简洁！
rebase基础

当你想起rebase命令时，你的脑海里是不是浮现出如下的画面：

你可能会认为，当你使用rebase命令时，git会从你想进行rebase操作的分支上，把你想进行rebase的提交“拔下”，然后插入到另外一个分支的顶部。这和rebase的真实操作差不了多少，但是这个点值得我们深究。

如果我们翻看git rebase文档，会看到官方文档上对rebase命令的描述是这样的：

    git-rebase: Forward-port local commits to the updated upstream head

看了之后是不是有点不知所云？起初我也不明白，经过我的摸索，rebase命令的作用可以用一句话来总结：把一个分支的提交 重新应用 到另外一个分支的顶部。注意这句话中加粗的部分“ 重新应用 ”，也就是说rebase命令并不是简单的把一个分支的提交ctrl + x / ctrl + v到另外一个分支上。rebase命令会把你所在的分支的提交都一个接一个在另外一个分支上应用。这个行为主要有两个影响：

    重新应用提交时，git会创建新的提交。即使这些提交修改内容一模一样，git也会把它们当做完全不一样且完全无关联的提交。
    rebase在重新应用提交时，不会销毁原来的提交。也就是说即使在rebase命令执行完成之后，原来的提交也依旧在.git命令里的objects文件夹下，这些提交也依旧存在。

所以，rebase命令真正的操作如下所示：

rebase命令执行完成后，feature分支会拥有两个新的提交，这两个新的提交和原来的提交修改内容一模一样，但是对git来说他们是完全不同的提交。同时，你应该也看到了，之前的提交依旧存在，并没有被销毁。
黄金法则

    “No one shall rebase a shared branch” — Everyone about rebase

你可能还听到过其他版本的rebase黄金法则，但其实都是在描述一件事情，就是 永远 、 永远 不要rebase一个共享分支。什么是共享分支？当一个分支会被push到远程仓库，且有可能其他人会进行pull操作时，这就是一个共享分支（ 这里我要特意说明一下，看到很多国内的博客都有写对共享分支进行rebase操作是会造成提交丢失，但这其实是错误的，具体原因且看我下文的解释 ）。相信这个法则你已经听到不同的公司不同的人说了很多遍了，你当然可以背诵下这条法则，不进行任何违反法则的操作，但是如果你能明白这背后的原因，相信可以让你对git的理解更上一层楼。

让我们来假设公司里的开发有人打破这个法则，看看会出现什么问题。

公司的Bob和Anna是同一个项目的开发，且公司项目Host在GitHub，如下是Bob、Anna以及GitHub目前仓库的视图。

所有人和GitHub仓库都是保持一致的。

现在Bob不道德的去打破黄金法则，与此同时，Anna却继续在feature分支上进行开发工作：

然后Bob进行push操作，他会收到一个错误提示：

通常来说，当你push你的分支到远程仓库时，git会合并你push的分支到远程仓库的对应分支上。准确的来说，git会使用fast-forword的方式来进行合并（如果大家有兴趣的话，我再另开一篇文章详细说明），因此Bob的提交会被拒绝。

Bob的一个解决办法就是使用命令git push --force，即告诉git，不要在尝试合并或做任何事，直接删除远程仓库feature分支的版本，把我push到过来的分支当做feature分支。此时，Bob、Anna及GitHub仓库如下所示：

Anna在不知情的情况下，push自己的代码到远程仓库：

这是正常的，git告诉Anna，她还没有同步远程的feature分支的版本，因为她的版本和GitHub的版本不一样。所以，Anna按照往常，首先进行pull操作，拉取远程的分支到本地进行合并。在pull操作前，远程和本地分支如下所示：

 A--B--C--D' origin/feature // GitHub A--B--D--E feature // Anna 

当进行pull操作时，git不得不进行一次合并操作来解决冲突，如下所示：

其中提交M代表合并提交，现在Anna可以进行提交了，Anna提交后Bob进行pull操作，这个时候所有人的代码又都是同步的：

看看这乱成一团的提交历史，还需要我再多言打破法则的后果么？这堆乱麻仅仅只是一个人不道德的打破法则，且代码只有两个人共享，如果是在一个十人的团队里甚至一个大型公司里，这还怎么得了？大家使用git的一个重要原因是可以随时回到某个提交点，在一堆乱麻的提交历史中还怎么轻松的回到某个提交点？

相信你也发现了，在远程仓库里D和D’的修改内容是一模一样的，通常来说一模一样的提交的数量和你rebase分支的提交有关系。

如果你还是觉得自己目光如炬，设想一下团队里还有一个同事叫Emma，她在
Bob对共享分支进行rebase操作之前也在feature分支进行工作，现在她也想进行push操作，于是提交历史变成了这样：

相信你看了之后已经在追打Bob的路上了。

再次强调一下， 共享分支进行rebase操作是不会造成提交丢失的！！！

关于命令 git pull --rebase 我们将在下一篇文章 深入理解git rebase（二） 详细讨论。

参考：
https://www.daolf.com/posts/git-series-part-2/ ​ www.daolf.com/posts/git-series-part-2/

编辑于 2022-12-25 22:25・IP 属地广东
Git
编程
​ 赞同 14 ​ ​ 3 条评论
​ 分享
​ 喜欢 ​ 收藏 ​ 申请转载
​
评论千万条，友善第一条

3 条评论
默认
最新
姨妈红不过红领巾
姨妈红不过红领巾
我觉得问题在于，Bob居然rebase了已经merge的commit和git push --force。敢用--force的直接打死[飙泪笑] [飙泪笑] [飙泪笑]
2022-01-04
​ 回复 ​ 1
姨妈红不过红领巾
姨妈红不过红领巾
笑笑泥人
建议revert有bug的提交，然后重新提交新的patch
04-03
​ 回复 ​ 赞
笑笑泥人
笑笑泥人

要怎么做呢？
04-03
​ 回复 ​ 赞
推荐阅读

    详解git rebase，让你走上git大神之路
    详解git rebase，让你走上git大神之路
    梁唐 发表于TechF...
    Git & Gitlab 使用指南

    原文转载： https://www.restran.net/2016/02/23/git-and-gitlab-guide/去年小组在从 SVN 和 TFS 迁移到 Git 的过程中整理了这份文档，面向的用户是对 Git 和 SVN 可能都不是很了解的人。看…
    王奥
    Git由浅入深之细说变基(rebase)

    在 上一篇，详细介绍了Git分支管理，最后一节介绍了Git变基及其与合并的区别，限于篇幅，并未对变基展开介绍，实在是因为关于Git变基需要阐述的内容颇多，而且并不是新手能彻底掌握的，于是…
    熊建刚 发表于极乐科技
    Git Rebase 与解决冲突

    1. 什么情况下使用假设主分支为 master，工作分支为work-for-project-1,当在工作分支工作一段时间后，master分支有新的代码提交，这时如果想要把工作分支work-for-project-1的代码合并到mas…
    小揪

